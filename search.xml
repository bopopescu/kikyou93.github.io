<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EasyUI_Tree</title>
    <url>/archives/5d3df5f4.html</url>
    <content><![CDATA[<h1 id="EasyUi-Tree"><a href="#EasyUi-Tree" class="headerlink" title="EasyUi Tree"></a>EasyUi Tree</h1><p> <strong>树的初始化，以及数据格式</strong><br><a id="more"></a></p>
<ol>
<li>树的数据格式<ul>
<li>id：节点的 id，它对于加载远程数据很重要。</li>
<li>text：要显示的节点文本。</li>
<li>state：节点状态，’open’ 或 ‘closed’，默认是 ‘open’。当设置为 ‘closed’ 时，该节点有子节点，并且将从远程站点加载它们。</li>
<li>checked：指示节点是否被选中。</li>
<li>attributes：给一个节点添加的自定义属性。</li>
<li>children：定义了一些子节点的节点数组。</li>
</ul>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"Folder1"</span>,</span><br><span class="line">    <span class="attr">"iconCls"</span>:<span class="string">"icon-save"</span>,</span><br><span class="line">    <span class="attr">"children"</span>:[&#123;</span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"File1"</span>,</span><br><span class="line">        <span class="attr">"checked"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"Books"</span>,</span><br><span class="line">        <span class="attr">"state"</span>:<span class="string">"open"</span>,</span><br><span class="line">        <span class="attr">"attributes"</span>:&#123;</span><br><span class="line">            <span class="attr">"url"</span>:<span class="string">"/demo/book/abc"</span>,</span><br><span class="line">            <span class="attr">"price"</span>:<span class="number">100</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"children"</span>:[&#123;</span><br><span class="line">            <span class="attr">"text"</span>:<span class="string">"PhotoShop"</span>,</span><br><span class="line">            <span class="attr">"checked"</span>:<span class="literal">true</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">"text"</span>:<span class="string">"Sub Bookds"</span>,</span><br><span class="line">            <span class="attr">"state"</span>:<span class="string">"closed"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"Languages"</span>,</span><br><span class="line">    <span class="attr">"state"</span>:<span class="string">"closed"</span>,</span><br><span class="line">    <span class="attr">"children"</span>:[&#123;</span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"Java"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"C#"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>初始化树</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="string">".tt"</span>).tree(&#123;</span><br><span class="line">    data: treeData,</span><br><span class="line">    onClick: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> parentTd = $(<span class="keyword">this</span>).parents(<span class="string">'.ttDiv'</span>).parent();</span><br><span class="line">    &#125;,</span><br><span class="line">    onSelect: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).tree(node.state === <span class="string">'closed'</span> ? <span class="string">'expand'</span> : <span class="string">'collapse'</span>, node.target);</span><br><span class="line">    &#125;,</span><br><span class="line">    onLoadSuccess: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).tree(<span class="string">"collapseAll"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>天涯海角</category>
      </categories>
      <tags>
        <tag>easyUI</tag>
        <tag>tree</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/archives/d32d37e5.html</url>
    <content><![CDATA[<h1 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wutang/elasticsearch-shanghai-zone:6.3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">cluster.name:</span> <span class="string">elasticsearch</span></span><br></pre></td></tr></table></figure>
<h1 id="连接ES"><a href="#连接ES" class="headerlink" title="连接ES"></a>连接ES</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testElasticsearch</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    Settings settings = Settings.builder()</span><br><span class="line">            .put(<span class="string">"cluster.name"</span>, <span class="string">"elasticsearch"</span>)</span><br><span class="line">            .put(<span class="string">"client.transport.sniff"</span>, <span class="keyword">false</span>)</span><br><span class="line">            .build();</span><br><span class="line">    TransportClient client = <span class="keyword">new</span> PreBuiltTransportClient(settings);</span><br><span class="line"></span><br><span class="line">    client.addTransportAddress(<span class="keyword">new</span> TransportAddress(InetAddress.getByName(<span class="string">"192.168.147.128"</span>),<span class="number">9300</span>));</span><br><span class="line">    </span><br><span class="line">    GetResponse response = client.prepareGet(<span class="string">"accounts"</span>, <span class="string">"person"</span>, <span class="string">"1"</span>).get();</span><br><span class="line"></span><br><span class="line">    System.out.println(response.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA插件开发小试牛刀</title>
    <url>/archives/89d150c.html</url>
    <content><![CDATA[<p>下了个社区版，先试试 <code>Hello World</code> ，后续尝试更多花样<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> <span class="keyword">extends</span> <span class="title">AnAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent e)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        String formatDate = sdf.format(date);</span><br><span class="line">        Messages.showMessageDialog(String.format(<span class="string">"It is %s now"</span>,formatDate), <span class="string">"Good Morning"</span>, Messages.getWarningIcon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://note.youdao.com/yws/public/resource/7fe8e401352a5a9cbdeac81cafe1f9e1/xmlnote/D737BB17BA134BEF9778D78A2E7EC622/2706" alt="IDEA插件"></p>
<h1 id="心情的起伏"><a href="#心情的起伏" class="headerlink" title="心情的起伏"></a>心情的起伏</h1><p>人生总是很难一帆风顺，总会磕磕绊绊，所以是否能够不受影响，坚定地去做自己想做的事就显得尤为重要！</p>
<h1 id="插入时间插件"><a href="#插入时间插件" class="headerlink" title="插入时间插件"></a>插入时间插件</h1><p>每次写完博客，手动写更新时间真的挺烦，自己动手，丰衣足食  </p>
<ul>
<li><p>plugin.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">idea-plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>com.your.company.unique.plugin.id<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Insert Time Plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.01<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vendor</span> <span class="attr">email</span>=<span class="string">"gustave.yupeng@gmail.com"</span> <span class="attr">url</span>=<span class="string">"https://www.kikfan.com"</span>&gt;</span>Gustave<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      插入当前时间的插件.&lt;br&gt;</span><br><span class="line">      &lt;em&gt;insert time plugin&lt;/em&gt;</span><br><span class="line">    ]]&gt;<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">change-notes</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">      Add change notes here.&lt;br&gt;</span><br><span class="line">      &lt;em&gt;most HTML tags may be used&lt;/em&gt;</span><br><span class="line">    ]]&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">change-notes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">idea-version</span> <span class="attr">since-build</span>=<span class="string">"173.0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html</span></span><br><span class="line"><span class="comment">       on how to target different products --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- uncomment to enable plugin in all products</span></span><br><span class="line"><span class="comment">  &lt;depends&gt;com.intellij.modules.lang&lt;/depends&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your extensions here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">actions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add your actions here --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;action id="plugins.HelloAction" class="HelloAction" text="HelloAction" description="Say Hello World"&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;add-to-group group-id="HelpMenu" anchor="after" relative-to-action="About"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/action&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">id</span>=<span class="string">"plugins.InsertTimeAction"</span> <span class="attr">class</span>=<span class="string">"InsertTimeAction"</span> <span class="attr">text</span>=<span class="string">"InsertTime"</span> <span class="attr">description</span>=<span class="string">"插入当前时间"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"EditorPopupMenu"</span> <span class="attr">anchor</span>=<span class="string">"before"</span> <span class="attr">relative-to-action</span>=<span class="string">"CopyReference"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">keyboard-shortcut</span> <span class="attr">first-keystroke</span>=<span class="string">"alt T"</span> <span class="attr">second-keystroke</span>=<span class="string">"ctrl T"</span> <span class="attr">keymap</span>=<span class="string">"$default"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">actions</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">idea-plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>InsertTimeAction</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnAction;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.AnActionEvent;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.actionSystem.PlatformDataKeys;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.command.WriteCommandAction;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.editor.Editor;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.editor.EditorModificationUtil;</span><br><span class="line"><span class="keyword">import</span> com.intellij.openapi.editor.SelectionModel;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertTimeAction</span> <span class="keyword">extends</span> <span class="title">AnAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent e)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        String formatDate = sdf.format(date);</span><br><span class="line"><span class="comment">//        Messages.showMessageDialog(String.format("It is %s now",formatDate), "Good Morning", Messages.getWarningIcon());</span></span><br><span class="line">        Editor editor = e.getData(PlatformDataKeys.EDITOR);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == editor) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SelectionModel selectionModel = editor.getSelectionModel();</span><br><span class="line">        Runnable runnable;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(selectionModel.getSelectedText()))&#123;</span><br><span class="line">            runnable = () -&gt; EditorModificationUtil.insertStringAtCaret(editor, formatDate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            runnable = () -&gt;editor.getDocument().replaceString(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd(), formatDate);</span><br><span class="line">        &#125;</span><br><span class="line">        WriteCommandAction.runWriteCommandAction(editor.getProject(), runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea快捷键及IdeaVim</title>
    <url>/archives/afc449e8.html</url>
    <content><![CDATA[<h1 id="Idea快捷键一览"><a href="#Idea快捷键一览" class="headerlink" title="Idea快捷键一览"></a>Idea快捷键一览</h1><p> Ctrl+Shift + Enter，语句完成<br> “！”，否定完成，输入表达式时按 “！”键<br> Ctrl+E，最近的文件<br> Ctrl+Shift+E，最近更改的文件<br> Shift+Click，可以关闭文件<br> Ctrl+[ OR ]，可以跑到大括号的开头与结尾<br> Ctrl+F12，可以显示当前文件的结构<br> Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择<br> Ctrl+N，可以快速打开类<br> Ctrl+Shift+N，可以快速打开文件<br> Alt+Q，可以看到当前方法的声明<br> Ctrl+P，可以显示参数信息<br> Ctrl+Shift+Insert，可以选择剪贴板内容并插入<br> Alt+Insert，可以生成构造器/Getter/Setter等<br> Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br> Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch<br> Ctrl+Enter，导入包，自动修正<br> Ctrl+Alt+L，格式化代码<br> Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作<br> Ctrl+Alt+O，优化导入的类和包<br> Ctrl+R，替换文本<br> Ctrl+F，查找文本<br> Ctrl+Shift+Space，自动补全代码<br> Ctrl+空格，代码提示（与系统输入法快捷键冲突）<br> Ctrl+Shift+Alt+N，查找类中的方法或变量<br> Alt+Shift+C，最近的更改<br> Alt+Shift+Up/Down，上/下移一行<br> Shift+F6，重构 – 重命名<br> Ctrl+X，删除行<br> Ctrl+D，复制行<br> Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）<br> Ctrl+J，自动代码（例如：serr）<br> Ctrl+Alt+J，用动态模板环绕<br> Ctrl+H，显示类结构图（类的继承层次）<br> Ctrl+Q，显示注释文档<br> Alt+F1，查找代码所在位置<br> Alt+1，快速打开或隐藏工程面板<br> Ctrl+Alt+left/right，返回至上次浏览的位置<br> Alt+left/right，切换代码视图<br> Alt+Up/Down，在方法间快速移动定位<br> Ctrl+Shift+Up/Down，向上/下移动语句<br> F2 或 Shift+F2，高亮错误或警告快速定位<br> Tab，代码标签输入完成后，按 Tab，生成代码<br> Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失<br> Alt+F3，逐个往下查找相同文本，并高亮显示<br> Ctrl+Up/Down，光标中转到第一行或最后一行下<br> Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）<br> Ctrl+Alt+B，跳转到方法实现处<br> Ctrl+Shift+Backspace，跳转到上次编辑的地方<br> Ctrl+O，重写方法<br> Ctrl+Alt+Space，类名自动完成<br> Ctrl+Alt+Up/Down，快速跳转搜索结果<br> Ctrl+Shift+J，整合两行<br> Alt+F8，计算变量值<br> Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本<br> Ctrl+Alt+Shift+V，简单粘贴<br> Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口<br> F12，把焦点从编辑器移到最近使用的工具窗口<br> Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器<br> Ctrl+W，可以选择单词继而语句继而行继而函数<br> Ctrl+Shift+W，取消选择光标所在词<br> Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置<br> Ctrl+I，实现方法<br> Ctrl+Shift+U，大小写转化<br> Ctrl+Y，删除当前行</p>
<p> Shift+Enter，向下插入新行<br> psvm/sout，main/System.out.println(); Ctrl+J，查看更多<br> Ctrl+Shift+F，全局查找<br> Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找<br> Ctrl+Shift+S，高级搜索<br> Ctrl+U，转到父类<br> Ctrl+Alt+S，打开设置对话框<br> Alt+Shift+Inert，开启/关闭列选择模式<br> Ctrl+Alt+Shift+S，打开当前项目/模块属性<br> Ctrl+G，定位行<br> Alt+Home，跳转到导航栏<br> Ctrl+Enter，上插一行<br> Ctrl+Backspace，按单词删除<br> Ctrl+”+/-”，当前方法展开、折叠<br> Ctrl+Shift+”+/-”，全部展开、折叠<br> 【调试部分、编译】<br> Ctrl+F2，停止<br> Alt+Shift+F9，选择 Debug<br> Alt+Shift+F10，选择 Run<br> Ctrl+Shift+F9，编译<br> Ctrl+Shift+F10，运行<br> Ctrl+Shift+F8，查看断点<br> F8，步过<br> F7，步入<br> Shift+F7，智能步入<br> Shift+F8，步出<br> Alt+Shift+F8，强制步过<br> Alt+Shift+F7，强制步入<br> Alt+F9，运行至光标处<br> Ctrl+Alt+F9，强制运行至光标处<br> F9，恢复程序<br> Alt+F10，定位到断点<br> Ctrl+F8，切换行断点<br> Ctrl+F9，生成项目<br> Alt+1，项目<br> Alt+2，收藏<br> Alt+6，TODO<br> Alt+7，结构<br> Ctrl+Shift+C，复制路径<br> Ctrl+Alt+Shift+C，复制引用，必须选择类名<br> Ctrl+Alt+Y，同步<br> Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）<br> Shift+F12，还原默认布局<br> Ctrl+Shift+F12，隐藏/恢复所有窗口<br> Ctrl+F4，关闭<br> Ctrl+Shift+F4，关闭活动选项卡<br> Ctrl+Tab，转到下一个拆分器<br> Ctrl+Shift+Tab，转到上一个拆分器<br> 【重构】<br> Ctrl+Alt+Shift+T，弹出重构菜单<br> Shift+F6，重命名<br> F6，移动<br> F5，复制<br> Alt+Delete，安全删除<br> Ctrl+Alt+N，内联<br> 【查找】<br> Ctrl+F，查找<br> Ctrl+R，替换<br> F3，查找下一个<br> Shift+F3，查找上一个<br> Ctrl+Shift+F，在路径中查找<br> Ctrl+Shift+R，在路径中替换<br> Ctrl+Shift+S，搜索结构<br> Ctrl+Shift+M，替换结构<br> Alt+F7，查找用法<br> Ctrl+Alt+F7，显示用法<br> Ctrl+F7，在文件中查找用法<br> Ctrl+Shift+F7，在文件中高亮显示用法</p>
<p> 转自:<a href="http://www.open-open.com/lib/view/open1396578860887.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1396578860887.html</a></p>
<p> 最常用快捷键<br> 1.Ctrl＋E，可以显示最近编辑的文件列表<br> 2.Shift＋Click可以关闭文件<br> 3.Ctrl＋[或]可以跳到大括号的开头结尾<br> 4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方<br> 5.Ctrl＋F12，可以显示当前文件的结构<br> 6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择<br> 7.Ctrl＋N，可以快速打开类<br> 8.Ctrl＋Shift＋N，可以快速打开文件<br> 9.Alt＋Q可以看到当前方法的声明<br> 10.Ctrl＋W可以选择单词继而语句继而行继而函数<br> 11.Alt＋F1可以将正在编辑的元素在各个面板中定位<br> 12.Ctrl＋P，可以显示参数信息<br> 13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入<br> 14.Alt＋Insert可以生成构造器/Getter/Setter等<br> 15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量<br> 16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch<br> 17.Alt＋Up and Alt＋Down可在方法间快速移动<br> 下面的不是很有用<br> 18.在一些地方按Alt＋Enter可以得到一些Intention Action，例如将”==”改为”equals()”<br> 19.Ctrl＋Shift＋Alt＋N可以快速打开符号<br> 20.Ctrl＋Shift＋Space在很多时候都能够给出Smart提示<br> 21.Alt＋F3可以快速寻找<br> 22.Ctrl＋/和Ctrl＋Shift＋/可以注释代码<br> 23.Ctrl＋Alt＋B可以跳转到抽象方法的实现<br> 24.Ctrl＋O可以选择父类的方法进行重写<br> 25.Ctrl＋Q可以看JavaDoc<br> 26.Ctrl＋Alt＋Space是类名自动完成<br> 27.快速打开类/文件/符号时，可以使用通配符，也可以使用缩写<br> 28.Live Templates! Ctrl＋J<br> 29.Ctrl＋Shift＋F7可以高亮当前元素在当前文件中的使用<br> 30.Ctrl＋Alt＋Up /Ctrl＋Alt＋Down可以快速跳转搜索结果<br> 31.Ctrl＋Shift＋J可以整合两行<br> 32.Alt＋F8是计算变量值</p>
<p> Ctrl + Shift +F11 标记该行代码，加入书签<br> Shift + F11 打开书签<br> Ctrl + Shift + Alt + F11 有符号的标记<br> Ctrl+ 刚刚选择的标记   跳转到相应标记处</p>
<h1 id="IdeaVim操作"><a href="#IdeaVim操作" class="headerlink" title="IdeaVim操作"></a>IdeaVim操作</h1><p> <a href="http://kidneyball.iteye.com/blog/1828427" target="_blank" rel="noopener">http://kidneyball.iteye.com/blog/1828427</a></p>
<h1 id="chrome快捷键"><a href="#chrome快捷键" class="headerlink" title="chrome快捷键"></a>chrome快捷键</h1><p><a href="https://blog.csdn.net/xjz729827161/article/details/78846175" target="_blank" rel="noopener">https://blog.csdn.net/xjz729827161/article/details/78846175</a></p>
<p>状态略不好，警惕啊  </p>
<p>一件事攒着就成梦魇了，一步步分解，不怕解决不掉！！</p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>快捷键</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>JFrame</title>
    <url>/archives/ad1a6c7d.html</url>
    <content><![CDATA[<h1 id="WindowMenu"><a href="#WindowMenu" class="headerlink" title="WindowMenu"></a>WindowMenu</h1><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gustave.practice.jframe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowMenu</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    JMenuBar menubar;</span><br><span class="line"></span><br><span class="line">    JMenu menu0,menu1,menu2,subMenu;</span><br><span class="line"></span><br><span class="line">    JMenuItem item1,item2,item3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowMenu</span><span class="params">(String s,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        init(s);</span><br><span class="line"></span><br><span class="line">        setLocation(x,y);</span><br><span class="line"></span><br><span class="line">        setSize(w,h);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        setDefaultCloseOperation(DISPOSE_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        setTitle(s);</span><br><span class="line"></span><br><span class="line">        menubar = <span class="keyword">new</span> JMenuBar();</span><br><span class="line"></span><br><span class="line">        menu0 = <span class="keyword">new</span> JMenu(<span class="string">"游戏"</span>); <span class="comment">//菜单栏的第一个选项</span></span><br><span class="line"></span><br><span class="line">        item1 = <span class="keyword">new</span> JMenuItem(<span class="string">"新游戏(new)"</span>);</span><br><span class="line"></span><br><span class="line">        item2 = <span class="keyword">new</span> JMenuItem(<span class="string">"重新开始"</span>);</span><br><span class="line"></span><br><span class="line">        menu0.add(item1);</span><br><span class="line"></span><br><span class="line">        menu0.addSeparator(); <span class="comment">//设置子菜单之间的分割线</span></span><br><span class="line"></span><br><span class="line">        menu0.add(item2);</span><br><span class="line"></span><br><span class="line">        menu0.addSeparator(); <span class="comment">//设置子菜单之间的分割线</span></span><br><span class="line"></span><br><span class="line">        subMenu = <span class="keyword">new</span> JMenu(<span class="string">"难度等级"</span>);</span><br><span class="line"></span><br><span class="line">        menu0.add(subMenu);</span><br><span class="line"></span><br><span class="line">        subMenu.add(<span class="keyword">new</span> JMenuItem(<span class="string">"初级"</span>));</span><br><span class="line"></span><br><span class="line">        subMenu.add(<span class="keyword">new</span> JMenuItem(<span class="string">"中级"</span>));</span><br><span class="line"></span><br><span class="line">        subMenu.add(<span class="keyword">new</span> JMenuItem(<span class="string">"高级"</span>));</span><br><span class="line"></span><br><span class="line">        menu0.addSeparator();</span><br><span class="line"></span><br><span class="line">        item3 = <span class="keyword">new</span> JMenuItem(<span class="string">"退出"</span>);</span><br><span class="line"></span><br><span class="line">        menu0.add(item3);</span><br><span class="line"></span><br><span class="line">        menubar.add(menu0);</span><br><span class="line"></span><br><span class="line">        menu1 = <span class="keyword">new</span> JMenu(<span class="string">"编辑"</span>); <span class="comment">//菜单栏的第二个选项</span></span><br><span class="line"></span><br><span class="line">        item1 = <span class="keyword">new</span> JMenuItem(<span class="string">"后退一步"</span>);</span><br><span class="line"></span><br><span class="line">        menu1.add(item1);</span><br><span class="line"></span><br><span class="line">        menu1.addSeparator(); <span class="comment">//设置子菜单之间的分割线</span></span><br><span class="line"></span><br><span class="line">        item2 = <span class="keyword">new</span> JMenuItem(<span class="string">"前进一步"</span>);</span><br><span class="line"></span><br><span class="line">        menu1.add(item2);</span><br><span class="line"></span><br><span class="line">        menubar.add(menu1);</span><br><span class="line"></span><br><span class="line">        menu2 = <span class="keyword">new</span> JMenu(<span class="string">"关于"</span>);</span><br><span class="line"></span><br><span class="line">        item1 = <span class="keyword">new</span> JMenuItem(<span class="string">"作者：rwxian"</span>);</span><br><span class="line"></span><br><span class="line">        menu2.add(item1);</span><br><span class="line"></span><br><span class="line">        menu2.addSeparator();</span><br><span class="line"></span><br><span class="line">        item2 = <span class="keyword">new</span> JMenuItem(<span class="string">"版本：v1.0"</span>);</span><br><span class="line"></span><br><span class="line">        menu2.add(item2);</span><br><span class="line"></span><br><span class="line">        menubar.add(menu2);</span><br><span class="line"></span><br><span class="line">        setJMenuBar(menubar);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gustave.practice.jframe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        WindowMenu win = <span class="keyword">new</span> WindowMenu(<span class="string">"俄罗斯方块"</span>, <span class="number">200</span>, <span class="number">30</span>, <span class="number">900</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JFrame</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson工具类</title>
    <url>/archives/80084445.html</url>
    <content><![CDATA[<h1 id="MapperUtils"><a href="#MapperUtils" class="headerlink" title="MapperUtils "></a>MapperUtils <a id="more"></a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Gustave</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ObjectMapper <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为 JSON 字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">obj2json</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsString(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为 JSON 字符串，忽略空值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">obj2jsonIgnoreNull</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="keyword">return</span> mapper.writeValueAsString(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换为 JavaBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">json2pojo</span><span class="params">(String jsonString, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> objectMapper.readValue(jsonString, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串转换为 Map&lt;String, Object&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Map&lt;String, Object&gt; <span class="title">json2map</span><span class="params">(String jsonString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="keyword">return</span> mapper.readValue(jsonString, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串转换为 Map&lt;String, T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">json2map</span><span class="params">(String jsonString, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Object&gt;&gt; map = objectMapper.readValue(jsonString, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, T&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        Map&lt;String, T&gt; result = <span class="keyword">new</span> HashMap&lt;String, T&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Map&lt;String, Object&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            result.put(entry.getKey(), map2pojo(entry.getValue(), clazz));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 深度转换 JSON 成 Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">json2mapDeeply</span><span class="params">(String json)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json2MapRecursion(json, objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把 JSON 解析成 List，如果 List 内部的元素存在 jsonString，继续解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper 解析工具</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title">json2ListRecursion</span><span class="params">(String json, ObjectMapper mapper)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; list = mapper.readValue(json, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                String str = (String) obj;</span><br><span class="line">                <span class="keyword">if</span> (str.startsWith(<span class="string">"["</span>)) &#123;</span><br><span class="line">                    obj = json2ListRecursion(str, mapper);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj.toString().startsWith(<span class="string">"&#123;"</span>)) &#123;</span><br><span class="line">                    obj = json2MapRecursion(str, mapper);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把 JSON 解析成 Map，如果 Map 内部的 Value 存在 jsonString，继续解析</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">json2MapRecursion</span><span class="params">(String json, ObjectMapper mapper)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = mapper.readValue(json, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            Object obj = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp; obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                String str = ((String) obj);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (str.startsWith(<span class="string">"["</span>)) &#123;</span><br><span class="line">                    List&lt;?&gt; list = json2ListRecursion(str, mapper);</span><br><span class="line">                    map.put(entry.getKey(), list);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.startsWith(<span class="string">"&#123;"</span>)) &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; mapRecursion = json2MapRecursion(str, mapper);</span><br><span class="line">                    map.put(entry.getKey(), mapRecursion);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 JSON 数组转换为集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonArrayStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">json2list</span><span class="params">(String jsonArrayStr, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JavaType javaType = getCollectionType(ArrayList<span class="class">.<span class="keyword">class</span>, <span class="title">clazz</span>)</span>;</span><br><span class="line">        List&lt;T&gt; list = (List&lt;T&gt;) objectMapper.readValue(jsonArrayStr, javaType);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取泛型的 Collection Type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collectionClass 泛型的Collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elementClasses  元素类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JavaType Java类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JavaType <span class="title">getCollectionType</span><span class="params">(Class&lt;?&gt; collectionClass, Class&lt;?&gt;... elementClasses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.getTypeFactory().constructParametricType(collectionClass, elementClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 Map 转换为 JavaBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">map2pojo</span><span class="params">(Map map, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.convertValue(map, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 Map 转换为 JSON</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mapToJson</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.writeValueAsString(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 JSON 对象转换为 JavaBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">obj2pojo</span><span class="params">(Object obj, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.convertValue(obj, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式</title>
    <url>/archives/41e00c03.html</url>
    <content><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><blockquote>
<p>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。</p>
<ul>
<li>实体类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物在叫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗在叫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫在叫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li><p>工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">creatAnimal</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"猫"</span>:</span><br><span class="line">                animal = <span class="keyword">new</span> Cat();<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"狗"</span>:</span><br><span class="line">                animal = <span class="keyword">new</span> Dog();<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                animal = <span class="keyword">new</span> Animal() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"不知名动物在叫"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> animal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Main函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            String name = in.next();</span><br><span class="line">            Animal animal = AnimalFactory.creatAnimal(name);</span><br><span class="line">            animal.shout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果<br><img src="../images/简单工厂模式运行结果.jpg" alt="运行结果"></p>
</li>
</ul>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p>它定义了算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p>
</blockquote>
<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><blockquote>
<p>定义：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
<ul>
<li>外观模式的目的：外观模式的目的不是给子系统添加新的功能接口，而是为了让外部减少与子系统内部多个模块的交互，松散耦合，从而让外部更加简单地使用子系统。</li>
</ul>
</blockquote>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高质量问题</title>
    <url>/archives/12d199bb.html</url>
    <content><![CDATA[<ul>
<li>千万不能沉溺于回报周期短的、微小的正反馈不能自拔，而要找到让你一路走下去的真正动力。得失心不要太重，目光不要太短，人生百年，说短也短，说长，其实也挺长的。<h1 id="题目1、MySQL中-like-和find-in-set的区别"><a href="#题目1、MySQL中-like-和find-in-set的区别" class="headerlink" title="题目1、MySQL中 like%%和find_in_set的区别"></a>题目1、MySQL中 like<code>%%</code>和<code>find_in_set</code>的区别</h1><code>find_in_set</code>对于查找以英文逗号分隔的字段，更加具有精确性</li>
</ul>
<h1 id="题目2、Java类初始化顺序"><a href="#题目2、Java类初始化顺序" class="headerlink" title="题目2、Java类初始化顺序"></a>题目2、Java类初始化顺序</h1><p>基类静态代码块，基类静态成员字段（并列优先级，按照代码中出现的先后顺序执行，且只有第一次加载时执行）——&gt;派生类静态代码块，派生类静态成员字段（并列优先级，按照代码中出现的先后顺序执行，且只有第一次加载时执行）——&gt;基类普通代码块，基类普通成员字段（并列优点级，按代码中出现先后顺序执行）——&gt;基类构造函数——&gt;派生类普通代码块，派生类普通成员字段（并列优点级，按代码中出现先后顺序执行）——&gt;派生类构造函数</p>
<h1 id="题目3、一个java文件有3个类，编译后有几个class文件"><a href="#题目3、一个java文件有3个类，编译后有几个class文件" class="headerlink" title="题目3、一个java文件有3个类，编译后有几个class文件"></a>题目3、一个java文件有3个类，编译后有几个class文件</h1><p>文件中有几个类编译后就有几个class文件。</p>
<h1 id="题目4、局部变量为何必须要显式地赋值才可以使用"><a href="#题目4、局部变量为何必须要显式地赋值才可以使用" class="headerlink" title="题目4、局部变量为何必须要显式地赋值才可以使用"></a>题目4、局部变量为何必须要显式地赋值才可以使用</h1><p>成员变量是可以不经初始化的，在类加载过程的准备阶段即可给它赋予默认值，但局部变量使用前需要显式赋予初始值，javac不是推断不出不可以这样做，而是没有这样做，对于成员变量而言，其赋值和取值访问的先后顺序具有不确定性，对于成员变量可以在一个方法调用前赋值，也可以在方法调用后进行，这是运行时发生的，编译器确定不了，交给jvm去做比较合适。而对于局部变量而言，其赋值和取值访问顺序是确定的。</p>
<h1 id="题目5、写一个死锁"><a href="#题目5、写一个死锁" class="headerlink" title="题目5、写一个死锁"></a>题目5、写一个死锁</h1><blockquote>
<p>死锁概念及产生原理<br>    概念：多个并发进程因争夺系统资源而产生相互等待的现象。<br>    原理：当一组进程中的每个进程都在等待某个事件发生，而只有这组进程中的其他进程才能触发该事件，这就称这组进程发生了死锁。<br>    本质原因：<br>        1）、系统资源有限。<br>        2）、进程推进顺序不合理。<br>死锁产生的4个必要条件<br>    1、互斥：某种资源一次只允许一个进程访问，即该资源一旦分配给某个进程，其他进程就不能再访问，直到该进程访问结束。<br>    2、占有且等待：一个进程本身占有资源（一种或多种），同时还有资源未得到满足，正在等待其他进程释放该资源。<br>    3、不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。<br>    4、循环等待：存在一个进程链，使得每个进程都占有下一个进程所需的至少一种资源。<br>当以上四个条件均满足，必然会造成死锁，发生死锁的进程无法进行下去，它们所持有的资源也无法释放。这样会导致CPU的吞吐量下降。所以死锁情况是会浪费系统资源和影响计算机的使用性能的。那么，解决死锁问题就是相当有必要的了。<br>思想为：定义两个ArrayList,将他们都加上锁A,B，线程1,2，1拿住了锁A ，请求锁B，2拿住了锁B请求锁A，在等待对方释放锁的过程中谁也不让出已获得的锁。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (list1)&#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer o : list1) &#123;</span><br><span class="line">                    System.out.println(o);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (list2) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer o : list2) &#123;</span><br><span class="line">                        System.out.println(o);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (list2)&#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer o : list2) &#123;</span><br><span class="line">                    System.out.println(o);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (list1) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Integer o : list1) &#123;</span><br><span class="line">                        System.out.println(o);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>K线形态分析程序</title>
    <url>/archives/728ca17.html</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome, enter password to read this" />
    <label for="pass">Welcome, enter password to read this</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>股票</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/archives/d0edc1ed.html</url>
    <content><![CDATA[<p>1.查看日志常用命令<br>    tail:<br>       -n  是显示行号；相当于nl命令；例子如下：<br>            tail -100f test.log      实时监控100行日志<br>            tail  -n  10  test.log   查询日志尾部最后10行的日志;</p>
<pre><code>        tail -n +10 test.log    查询10行之后的所有日志;

head:  

    跟tail是相反的，tail是看后多少行日志；例子如下：

        head -n 10  test.log   查询日志文件中的头10行日志;

        head -n -10  test.log   查询日志文件除了最后10行的其他所有日志;

cat： 

    tac是倒序查看，是cat单词反写；例子如下：

        cat -n test.log |grep &quot;debug&quot;   查询关键字的日志
</code></pre><ol start="2">
<li><p>应用场景一：按行号查看—过滤出关键字附近的日志</p>
<ul>
<li><p>cat -n test.log |grep “debug”  得到关键日志的行号</p>
</li>
<li><p>cat -n test.log |tail -n +92|head -n 20  选择关键字所在的中间一行. 然后查看这个关键字前10行和后10行的日志:</p>
<pre><code>tail -n +92表示查询92行之后的日志

head -n 20 则表示在前面的查询结果里再查前20条记录
</code></pre></li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>应用场景二：根据日期查询日志</p>
<p>   sed -n ‘/2014-12-17 16:17:20/,/2014-12-17 16:17:36/p’  test.log</p>
<p>   特别说明:上面的两个日期必须是日志中打印出来的日志,否则无效；</p>
<pre><code>先 grep &apos;2014-12-17 16:17:20&apos; test.log 来确定日志中是否有该 时间点
</code></pre></li>
</ol>
<p>4.应用场景三：日志内容特别多，打印在屏幕上不方便查看</p>
<pre><code>- 使用more和less命令,

       如： cat -n test.log |grep &quot;debug&quot; |more     这样就分页打印了,通过点击空格键翻页

- 使用 &gt;xxx.txt 将其保存到文件中,到时可以拉下这个文件分析

        如：cat -n test.log |grep &quot;debug&quot;  &gt;debug.txt
</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>List排序</title>
    <url>/archives/b8b2cf67.html</url>
    <content><![CDATA[<ul>
<li>最近懈怠较重，急需正反馈</li>
<li>结合Lambda,初始list<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;StudentCourse&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span>[][] nums = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">88</span>&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>&#125;, &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>&#125;, &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">88</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        StudentCourse course = <span class="keyword">new</span> StudentCourse();</span><br><span class="line">        course.setSid(nums[i][<span class="number">0</span>]);</span><br><span class="line">        course.setCid(nums[i][<span class="number">1</span>]);</span><br><span class="line">        course.setScore(nums[i][<span class="number">2</span>]);</span><br><span class="line">        list.add(course);</span><br><span class="line">    &#125;</span><br><span class="line">    list.sort(Comparator.comparing(StudentCourse::getSid).reversed()</span><br><span class="line">            .thenComparing((s1, s2) -&gt; s2.getCid().compareTo(s1.getCid()))</span><br><span class="line">            .thenComparing(StudentCourse::getScore));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="根据某个字段的值排序"><a href="#根据某个字段的值排序" class="headerlink" title="根据某个字段的值排序"></a>根据某个字段的值排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.sort((o1, o2) -&gt; o1.getCid().compareTo(o2.getCid()));</span><br></pre></td></tr></table></figure>
<h1 id="结合Comparator-注意可以使用reversed调转"><a href="#结合Comparator-注意可以使用reversed调转" class="headerlink" title="结合Comparator,注意可以使用reversed调转"></a>结合Comparator,注意可以使用reversed调转</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.sort(Comparator.comparing(StudentCourse::getSid).reversed());</span><br></pre></td></tr></table></figure>
<h1 id="需要根据多个字段排序"><a href="#需要根据多个字段排序" class="headerlink" title="需要根据多个字段排序"></a>需要根据多个字段排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.sort(Comparator.comparing(StudentCourse::getSid).reversed()</span><br><span class="line">        .thenComparing((s1, s2) -&gt; s2.getCid().compareTo(s1.getCid()))</span><br><span class="line">        .thenComparing(StudentCourse::getScore));</span><br></pre></td></tr></table></figure>
<h1 id="将A-List的元素以B-List的排序规则进行排序"><a href="#将A-List的元素以B-List的排序规则进行排序" class="headerlink" title="将A List的元素以B List的排序规则进行排序"></a>将A List的元素以B List的排序规则进行排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">entities.sort(Comparator.comparing((o) -&gt; bookIds.indexOf(o.getReadingBookId())));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql物理备份恢复</title>
    <url>/archives/29644176.html</url>
    <content><![CDATA[<h1 id="物理备份的恢复"><a href="#物理备份的恢复" class="headerlink" title="物理备份的恢复"></a>物理备份的恢复</h1><p><a href="https://help.aliyun.com/knowledge_detail/41817.html?spm=5176.10695662.1996646101.searchclickresult.4aca2e25JZhG1n&amp;aly_as=OF-4wSKB" target="_blank" rel="noopener">官方链接</a></p>
<ul>
<li><p>存在问题，因为我们是要恢复到docker上的自建数据库，使用mysqld_safe命令启动，我们不好操作</p>
</li>
<li><p>其实只需要吧对应的数据指向容器的/var/lib/mysql 配置指向/etc/my.cnf即可</p>
</li>
<li><p>backup-my.cnf需要修改</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># This MySQL options file was generated by innobackupex.</span><br><span class="line"></span><br><span class="line"># The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">#innodb_checksum_algorithm=innodb</span><br><span class="line">#innodb_log_checksum_algorithm=innodb</span><br><span class="line">#innodb_data_file_path=ibdata1:200M:autoextend</span><br><span class="line">#innodb_log_files_in_group=2</span><br><span class="line">#innodb_log_file_size=1048576000</span><br><span class="line">#innodb_fast_checksum=false</span><br><span class="line">#innodb_page_size=16384</span><br><span class="line">#innodb_log_block_size=512</span><br><span class="line">#innodb_undo_directory=.</span><br><span class="line">#innodb_undo_tablespaces=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#rds_encrypt_data=false</span><br><span class="line">#innodb_encrypt_algorithm=aes_128_ecb</span><br></pre></td></tr></table></figure>
<ul>
<li>如下为docker-compose.yml文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.6</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="string">--explicit_defaults_for_timestamp=true</span></span><br><span class="line">      <span class="string">--lower_case_table_names=1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/mysql/data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/mysql/data/backup-my.cnf:/etc/my.cnf</span></span><br></pre></td></tr></table></figure>
<ul>
<li>自己测试数据库的备份和恢复，包括逻辑备份以及binlog的恢复<h1 id="mysqlbinlog的恢复"><a href="#mysqlbinlog的恢复" class="headerlink" title="mysqlbinlog的恢复"></a>mysqlbinlog的恢复</h1></li>
<li><p>直接获取到的binlog的日志是通过base64加密的，需要查看的话，需要通过解密<br><code>mysqlbinlog --base64-output=decode-rows -v mysql-bin.000001</code></p>
</li>
<li><p>通过position恢复的命令<br><code>mysqlbinlog --start-position=&quot;230&quot; --stop-position=&quot;689&quot; binlog.000004 |mysql -uroot -p</code></p>
</li>
<li><p>通过时间点来进行恢复<br><code>mysqlbinlog --start-datetime=&quot;2019-10-24 3:21:26&quot; --stop-datetime=&quot;2019-10-24 3:21:29&quot; binlog.000004 |mysql -uroot -p</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/archives/1c6ba3e2.html</url>
    <content><![CDATA[<ul>
<li>前进的脚步不停，才是彷徨迷惘的唯一解药</li>
<li>骚年，情商和逆商还是有待提高啊，沦落至此，不就是当初不够不要脸吗，莫在同一个坑跌倒两次！</li>
<li>让自己忙碌，去获取更高层次的乐趣，形成持久的正反馈机制</li>
<li>Netty依旧闲置，明白自己要的是啥，都是曾经血淋淋的教训，心胸放开阔点，大不了而已。。。</li>
<li>当陷入心烦意乱影响思考的死循环时，最好的办法就是找回场子！各取所需而已</li>
<li>明白那是硬性的矛盾，不要让时间浪费在那种无谓的事情上</li>
<li>最基本的东西，源头的东西不可以动摇</li>
<li>让自己的脑子沉浸在感兴趣的东西里是所向披靡的！！</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis,Sentinel高可用</title>
    <url>/archives/b6f06c4a.html</url>
    <content><![CDATA[<ul>
<li>redis,sentinel的高可用,必须允许sentinel更改配置文件</li>
<li>查找资料，分析原因，问题在于使用了Docker之后，不在同一网段</li>
<li>解决办法，使用host网络模式即可</li>
<li>借此，引申需要研究Docker-Compose的各项命令，网络模式的研究</li>
</ul>
<h1 id="redis-yml配置"><a href="#redis-yml配置" class="headerlink" title="redis.yml配置"></a>redis.yml配置</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/usr/local/bin/redis-server</span> <span class="string">/usr/local/redis.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/redis1-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/redis1.conf:/usr/local/redis.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/usr/local/bin/redis-server</span> <span class="string">/usr/local/redis.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/redis2-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/redis2.conf:/usr/local/redis.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6380</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/usr/local/bin/redis-server</span> <span class="string">/usr/local/redis.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/redis3-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/redis3.conf:/usr/local/redis.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6381</span><span class="string">:6381</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br></pre></td></tr></table></figure>
<h1 id="redis-conf"><a href="#redis-conf" class="headerlink" title="redis.conf"></a>redis.conf</h1><ul>
<li><p>master</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">port</span> <span class="number">6379</span></span><br><span class="line"><span class="string">masterauth</span> <span class="number">123456</span></span><br><span class="line"><span class="string">requirepass</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>slave</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">port</span> <span class="number">6380</span></span><br><span class="line"><span class="string">masterauth</span> <span class="number">123456</span></span><br><span class="line"><span class="string">requirepass</span> <span class="number">123456</span></span><br><span class="line"><span class="string">slaveof</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.129</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="sentinel-yml"><a href="#sentinel-yml" class="headerlink" title="sentinel.yml"></a>sentinel.yml</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26379</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/sentinel1.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/sentinel1-data:/data</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26380</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/sentinel2.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/sentinel2-data:/data</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis-sentinel-3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26381</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/sentinel3.conf:/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/sentinel3-data:/data</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br></pre></td></tr></table></figure>
<h1 id="sentinel-conf"><a href="#sentinel-conf" class="headerlink" title="sentinel.conf"></a>sentinel.conf</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">port</span> <span class="number">26379</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">mymaster</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.129</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">auth-pass</span> <span class="string">mymaster</span> <span class="number">123456</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">down-after-milliseconds</span> <span class="string">mymaster</span> <span class="number">15000</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">parallel-syncs</span> <span class="string">mymaster</span> <span class="number">1</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">failover-timeout</span> <span class="string">mymaster</span> <span class="number">80000</span></span><br><span class="line"><span class="string">protected-mode</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Sentinel</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL战leetcode</title>
    <url>/archives/7c4ba2e7.html</url>
    <content><![CDATA[<h1 id="180-连续出现的数字"><a href="#180-连续出现的数字" class="headerlink" title="180.连续出现的数字"></a>180.连续出现的数字</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> tmp.ConsecutiveNums <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">Num</span> <span class="keyword">as</span> ConsecutiveNums,</span><br><span class="line"> <span class="keyword">case</span> <span class="keyword">when</span> @prev = <span class="keyword">Num</span> <span class="keyword">then</span> @<span class="keyword">count</span> := @<span class="keyword">count</span>+<span class="number">1</span></span><br><span class="line"> <span class="keyword">when</span> @prev :=<span class="keyword">Num</span> <span class="keyword">then</span> @<span class="keyword">count</span> :=<span class="number">1</span></span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">as</span> <span class="keyword">count</span></span><br><span class="line"> <span class="keyword">from</span> <span class="keyword">Logs</span>,(<span class="keyword">select</span> @prev :=<span class="literal">null</span>,@<span class="keyword">count</span> :=<span class="literal">null</span>) pc) tmp</span><br><span class="line"> <span class="keyword">where</span> tmp.count &gt;=<span class="number">3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其实不够严谨，没有考虑Num为0的情况，应当把<br><code>when @prev :=Num then @count :=1</code>改为<code>when (@prev :=Num) is not null then @count :=1</code></li>
</ul>
<h1 id="184-部门工资最高的员工"><a href="#184-部门工资最高的员工" class="headerlink" title="184.部门工资最高的员工"></a>184.部门工资最高的员工</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.Name <span class="keyword">as</span> Department,e.Name <span class="keyword">as</span> Employee,e.Salary</span><br><span class="line"><span class="keyword">from</span> Employee e <span class="keyword">inner</span> <span class="keyword">join</span> Department d <span class="keyword">on</span> e.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">DepartmentId,<span class="keyword">Max</span>(Salary) <span class="keyword">as</span> maxSalary</span><br><span class="line"><span class="keyword">from</span> Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> DepartmentId) tmp</span><br><span class="line"><span class="keyword">on</span> e.DepartmentId = tmp.DepartmentId <span class="keyword">and</span> e.Salary = tmp.maxSalary</span><br></pre></td></tr></table></figure>
<h1 id="178-分数排名"><a href="#178-分数排名" class="headerlink" title="178.分数排名"></a>178.分数排名</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tmp.Score,</span><br><span class="line">       <span class="keyword">CASE</span></span><br><span class="line">         <span class="keyword">WHEN</span> tmp.Score = @prev <span class="keyword">THEN</span> <span class="keyword">convert</span>(@<span class="keyword">rank</span>,<span class="keyword">UNSIGNED</span> )</span><br><span class="line">         <span class="keyword">WHEN</span> (@prev := tmp.Score) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">THEN</span> <span class="keyword">convert</span>(@<span class="keyword">rank</span> := @<span class="keyword">rank</span> + <span class="number">1</span>,<span class="keyword">UNSIGNED</span> )</span><br><span class="line">           <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> Score <span class="keyword">FROM</span> Scores <span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">DESC</span>) tmp,</span><br><span class="line">     (<span class="keyword">SELECT</span> @prev := <span class="literal">NULL</span>, @<span class="keyword">rank</span> := <span class="number">0</span>) pr</span><br></pre></td></tr></table></figure>
<ul>
<li><p>也是注意这里when后面的用法问题</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s1.Score,(<span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">DISTINCT</span> s2.Score)+<span class="number">1</span> <span class="keyword">FROM</span> Scores s2 <span class="keyword">WHERE</span> s2.Score &gt;s1.Score ) <span class="keyword">as</span> <span class="keyword">Rank</span></span><br><span class="line">       <span class="keyword">FROM</span> Scores s1 <span class="keyword">order</span> <span class="keyword">by</span> Score <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>子查询，看起来写法是简单了，但是实质上性能差了不少</p>
</li>
</ul>
<h1 id="177-第N高的薪水"><a href="#177-第N高的薪水" class="headerlink" title="177.第N高的薪水"></a>177.第N高的薪水</h1><ul>
<li>要求如果不存在的话返回null</li>
<li><p>下方为自己的解法,判断null的问题居然还是多余的。。。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">RETURN</span> (</span><br><span class="line">      <span class="comment"># Write your MySQL query statement below.</span></span><br><span class="line">      <span class="keyword">select</span></span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">count</span>(*) = <span class="number">1</span> <span class="keyword">then</span> Salary</span><br><span class="line">      <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">from</span></span><br><span class="line">      (<span class="keyword">select</span> e.Salary,@<span class="keyword">rownum</span> := @<span class="keyword">rownum</span> + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">rownum</span> <span class="keyword">from</span></span><br><span class="line">      (<span class="keyword">select</span> Salary <span class="keyword">from</span> Employee <span class="keyword">group</span> <span class="keyword">by</span> Salary <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span>) e,(<span class="keyword">select</span> @<span class="keyword">rownum</span> := <span class="number">0</span>) r) tmp <span class="keyword">where</span> <span class="keyword">rownum</span> = N</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>看起来简洁写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">      <span class="comment"># Write your MySQL query statement below.</span></span><br><span class="line">          <span class="keyword">set</span> N = N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">ifnull</span>(salary,<span class="literal">null</span>) <span class="keyword">from</span>  employee <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> <span class="keyword">limit</span> N,<span class="number">1</span> </span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="177-上升的温度"><a href="#177-上升的温度" class="headerlink" title="177.上升的温度"></a>177.上升的温度</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">w1.Id</span><br><span class="line"><span class="keyword">from</span> Weather w1 <span class="keyword">inner</span> <span class="keyword">join</span> Weather w2 </span><br><span class="line"><span class="comment"># on w1.RecordDate = date_add(w2.RecordDate,interval 1 Day)</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">datediff</span>(w1.RecordDate,w2.RecordDate) = <span class="number">1</span></span><br><span class="line"><span class="keyword">and</span> w1.Temperature &gt; w2.Temperature</span><br></pre></td></tr></table></figure>
<ul>
<li>inner join当中，where和on的效果貌似没什么区别</li>
</ul>
<h1 id="176-第二高的薪水"><a href="#176-第二高的薪水" class="headerlink" title="176.第二高的薪水"></a>176.第二高的薪水</h1><ul>
<li><p>这里就看出写法的问题了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">count</span>(*) = <span class="number">1</span> <span class="keyword">then</span> Salary</span><br><span class="line"><span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> Salary,@<span class="keyword">rownum</span> := @<span class="keyword">rownum</span> + <span class="number">1</span> <span class="keyword">as</span> <span class="keyword">rownum</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> Salary </span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">group</span> <span class="keyword">by</span> Salary <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span>) tmp,(<span class="keyword">select</span> @<span class="keyword">rownum</span> := <span class="number">0</span>) r) t</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">rownum</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>个人第二种解法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">count</span>(*) &gt; <span class="number">0</span> <span class="keyword">then</span> Salary</span><br><span class="line"><span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">from</span> Employee e1 <span class="keyword">where</span> (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> Salary) <span class="keyword">from</span> Employee e2 <span class="keyword">where</span> e2.Salary &gt; e1.Salary) =<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>丫的还有这种玩法,外面再套一层的方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">IFNULL</span>((<span class="keyword">select</span> <span class="keyword">distinct</span>(Salary) </span><br><span class="line"><span class="keyword">from</span> Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>),<span class="literal">null</span>) <span class="keyword">as</span> SecondHighestSalary</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="需要第N高使用limit-N-1-1是最直接的，如果没有需要返回null，那么在外面再套一层就是了"><a href="#需要第N高使用limit-N-1-1是最直接的，如果没有需要返回null，那么在外面再套一层就是了" class="headerlink" title="需要第N高使用limit N-1,1是最直接的，如果没有需要返回null，那么在外面再套一层就是了"></a>需要第N高使用limit N-1,1是最直接的，如果没有需要返回null，那么在外面再套一层就是了</h2><h1 id="262-行程和用户"><a href="#262-行程和用户" class="headerlink" title="262.行程和用户"></a>262.行程和用户</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">t.Request_at <span class="keyword">as</span> <span class="keyword">Day</span>,</span><br><span class="line"><span class="keyword">round</span>((<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> t.Status &lt;&gt; <span class="string">'completed'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*)),<span class="number">2</span>) <span class="keyword">as</span> <span class="string">'Cancellation Rate'</span></span><br><span class="line"><span class="keyword">from</span> Trips t</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">Users</span> u <span class="keyword">on</span> t.Client_Id = u.Users_Id <span class="keyword">and</span> u.Banned = <span class="string">'No'</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">Users</span> u2 <span class="keyword">on</span> t.Driver_Id = u2.Users_Id <span class="keyword">and</span> u2.Banned = <span class="string">'No'</span></span><br><span class="line"><span class="keyword">where</span> t.Request_at <span class="keyword">between</span> <span class="string">'2013-10-01'</span> <span class="keyword">and</span> <span class="string">'2013-10-03'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.Request_at <span class="keyword">order</span> <span class="keyword">by</span> t.Request_at <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<ul>
<li>1.非禁止用户这是一个坑2.round的用法</li>
</ul>
<h1 id="196-删除重复的邮箱"><a href="#196-删除重复的邮箱" class="headerlink" title="196.删除重复的邮箱"></a>196.删除重复的邮箱</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> Person <span class="keyword">from</span> Person</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> </span><br><span class="line"><span class="keyword">min</span>(<span class="keyword">Id</span>) <span class="keyword">as</span> <span class="keyword">mId</span></span><br><span class="line"><span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email ) tmp</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">Id</span> = tmp.mId <span class="keyword">where</span> tmp.mId <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>亦可使用该种方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> p1 <span class="keyword">from</span> Person p1 ,Person p2</span><br><span class="line"><span class="keyword">where</span> p1.Email =p2.Email <span class="keyword">and</span> p1.Id &gt; p2.Id</span><br></pre></td></tr></table></figure>
</li>
<li><p>delete 后面的table不能使用别名</p>
<h2 id="扩展，delete连表的语句"><a href="#扩展，delete连表的语句" class="headerlink" title="扩展，delete连表的语句"></a>扩展，delete连表的语句</h2></li>
<li>不可别名或者使用了别名需要别名对应</li>
<li>USING的使用<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1 <span class="keyword">FROM</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T2 <span class="keyword">ON</span> t1.id=t2.id <span class="keyword">WHERE</span> t2.id <span class="keyword">IS</span> <span class="literal">NULL</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span>  <span class="keyword">FROM</span> t1 <span class="keyword">USING</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T2 <span class="keyword">ON</span> t1.id=t2.id <span class="keyword">WHERE</span> t2.id <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="185-部门工资前三高的员工"><a href="#185-部门工资前三高的员工" class="headerlink" title="185.部门工资前三高的员工"></a>185.部门工资前三高的员工</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"> d.Name <span class="keyword">as</span> Department, e.Name <span class="keyword">as</span> Employee,e.Salary</span><br><span class="line"><span class="keyword">from</span> Employee e <span class="keyword">inner</span> <span class="keyword">join</span> Department d</span><br><span class="line"><span class="keyword">on</span> e.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">where</span> (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> e2.Salary) <span class="keyword">from</span> Employee e2 <span class="keyword">where</span></span><br><span class="line">       e.DepartmentId = e2.DepartmentId <span class="keyword">and</span> e2.Salary &gt; e.Salary)</span><br><span class="line">&lt; <span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> d.Id <span class="keyword">asc</span>,e.Salary <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>
<ul>
<li>where条件和所选的字段其实都是可以使用该种子查询的方式的</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"> d.Name <span class="keyword">as</span> Department, tmp.Name <span class="keyword">as</span> Employee,tmp.Salary</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">e1.Name,e1.Salary,e1.DepartmentId</span><br><span class="line"><span class="keyword">from</span> Employee e1 <span class="keyword">inner</span> <span class="keyword">join</span> Employee e2 <span class="keyword">on</span> e1.DepartmentId = e2.DepartmentId</span><br><span class="line"><span class="keyword">where</span> e2.Salary &gt;= e1.Salary</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e1.Id <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> e2.Salary) &lt;=<span class="number">3</span>) tmp</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Department d</span><br><span class="line"><span class="keyword">on</span> tmp.DepartmentId = d.Id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> d.Id <span class="keyword">asc</span>,tmp.Salary <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用了group by和having的处理方式，效率方面更高，可以看出子查询的局限性</li>
</ul>
<h1 id="601-体育馆的人流量"><a href="#601-体育馆的人流量" class="headerlink" title="601.体育馆的人流量"></a>601.体育馆的人流量</h1><ul>
<li><p>初步想法，用到了find_in_set这个函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> stadium.* <span class="keyword">from</span> stadium,</span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line"><span class="keyword">group_concat</span>(t.id) <span class="keyword">as</span> ids</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> tmp.*,@<span class="keyword">rownum</span> := @<span class="keyword">rownum</span> + <span class="number">1</span>,tmp.id - @<span class="keyword">rownum</span> <span class="keyword">as</span> diff</span><br><span class="line"> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> stadium <span class="keyword">where</span> people &gt;=<span class="number">100</span>) tmp,(<span class="keyword">select</span> @<span class="keyword">rownum</span> := <span class="number">0</span>) r) t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> diff <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;=<span class="number">3</span>) tt</span><br><span class="line"><span class="keyword">where</span> find_in_set(<span class="keyword">id</span>,tt.ids) &gt;<span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以使用min和max然后使用between and的方式</p>
</li>
</ul>
<h1 id="627-交换性别"><a href="#627-交换性别" class="headerlink" title="627.交换性别"></a>627.交换性别</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="keyword">if</span>(sex = <span class="string">'m'</span>,<span class="string">'f'</span>,<span class="string">'m'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>简单题，考察sql里面if的用法</li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>SearchQuickByShortcut</title>
    <url>/archives/137c7eea.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>作为码农，总免不了开心地撸着代码的时候需要查下谷歌、stackoverflow等，那就得切到浏览器-&gt;输入网址-&gt;搜索，那就很烦，这款插件应运而生</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li>IDEA marketplace 中搜索 SearchQuickByShortcut，安装</li>
<li>选中或不选中文字，按对应快捷键跳转进行搜索，当然你也可以在keymap中自定义</li>
<li>以下为对应网址的默认快捷键<h3 id="alt-B"><a href="#alt-B" class="headerlink" title="alt + B"></a>alt + B</h3>go baidu with text or not<h3 id="alt-W"><a href="#alt-W" class="headerlink" title="alt + W"></a>alt + W</h3>go stackoverflow with text or not<h3 id="alt-G"><a href="#alt-G" class="headerlink" title="alt + G"></a>alt + G</h3>go google with text or not<h3 id="alt-Y"><a href="#alt-Y" class="headerlink" title="alt + Y"></a>alt + Y</h3>go youdao with text or not</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet工具类</title>
    <url>/archives/951131f0.html</url>
    <content><![CDATA[<h1 id="HttpServletUtils"><a href="#HttpServletUtils" class="headerlink" title="HttpServletUtils "></a>HttpServletUtils <a id="more"></a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Gustave</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/9 17:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServletUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取完整请求路径，带请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFullPath</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        StringBuffer uri = request.getRequestURL();</span><br><span class="line">        String url = uri.toString();</span><br><span class="line">        <span class="comment">// 获取所有请求,返回 Map 集合</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entry = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String[]&gt;&gt; iterator = entry.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, String[]&gt; item = iterator.next();</span><br><span class="line">            <span class="comment">//请求名</span></span><br><span class="line">            String key = item.getKey();</span><br><span class="line">            <span class="comment">//请求值</span></span><br><span class="line">            <span class="keyword">for</span> (String value : item.getValue()) &#123;</span><br><span class="line">                <span class="comment">// 拼接每个请求参数 key=value&amp;</span></span><br><span class="line">                sb.append(key + <span class="string">"="</span> + value + <span class="string">"&amp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String string = sb.toString();</span><br><span class="line">        <span class="comment">// 拼接 URL, URL?key=value&amp;key=value&amp; 并且去掉最后一个 &amp;</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(string))&#123;</span><br><span class="line">            url = url + <span class="string">"?"</span> + string.substring(<span class="number">0</span>, string.lastIndexOf(<span class="string">"&amp;"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP网络</title>
    <url>/archives/4e962cde.html</url>
    <content><![CDATA[<h1 id="网络地址"><a href="#网络地址" class="headerlink" title="网络地址"></a>网络地址</h1><ul>
<li>在网络层和传输层，寻址是通过IP地址和MAC地址，但是IP地址具有层次性，而MAC地址虽为最终通信地址，但不具有层次</li>
<li>IP地址和MAC地址是相互配合的关系，把IP地址通过ARP缓存获取具体的MAC地址，最终发送的消息到达的是MAC地址</li>
<li>关于子网掩码<blockquote>
<p>子网掩码与IP地址都是由4个数段组成，每个数段的取值范围是0-255（共256个值，等于2的8次方），<br>如我们在搭建局域网时通常用到的IP地址192.168.1.1，子网掩码255.255.255.0，当然十进制是为了方便人的理解，<br>转换成机器能识别的二进制后，每个数段由8个0或1组成，一个完整的IP地址或子网掩码就转换成32个0或1组成的序列。<br>子网掩码与IP地址是组合使用的，IP地址我们都知道是计算机在网络内的唯一标识，而子网掩码顾名思义是用于划分子网的.</p>
</blockquote>
</li>
</ul>
<h1 id="Keep-Moving-Anyway"><a href="#Keep-Moving-Anyway" class="headerlink" title="Keep Moving Anyway"></a>Keep Moving Anyway</h1>]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>网络基础</tag>
        <tag>TCP</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis-CI持续集成</title>
    <url>/archives/d4ce3f58.html</url>
    <content><![CDATA[<h1 id="生命不息，折腾不止"><a href="#生命不息，折腾不止" class="headerlink" title="生命不息，折腾不止"></a>生命不息，折腾不止</h1><ul>
<li>还是没忍住捣腾了下Travis CI的持续集成，一开始因为墙的问题，node-sass下不来，折腾挺久，坑啊！！</li>
<li>解决办法就是cnpm！！</li>
<li><p>持续集成Coding和Github</p>
<a id="more"></a>
<p>.travis.yml的配置文件如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span> <span class="comment"># 缓存不经常更改的内容</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span> <span class="comment"># 更改时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">cnpm</span> <span class="string">-g</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#before_script:</span></span><br><span class="line"><span class="comment"># - npm install -g gulp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span>  <span class="comment">#清除</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">gulp</span>  <span class="comment">#生成</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://$&#123;GH_REF&#125;</span> <span class="string">.github_git</span>  <span class="comment"># GH_REF是下面配置的GitHub仓库地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">.github_git</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">../</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mv</span> <span class="string">.github_git/.git/</span> <span class="string">./public/</span>   <span class="comment"># 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="comment">#  - git init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"Gustave"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"1014016816@qq.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"Travis CI Auto Builder For Github Pages at `date +"</span><span class="string">%Y-%m-%d</span> <span class="string">%H:%M"`"</span>  <span class="comment"># 提交记录包含时间 跟上面更改时区配合</span></span><br><span class="line">  <span class="comment"># GitHub</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="string">master:master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-fr</span> <span class="string">.git/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">../</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://$&#123;CO_REF&#125;</span> <span class="string">.coding_git</span>  <span class="comment"># CO_REF是最下面配置Coding的仓库地址</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">.coding_git</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">../</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mv</span> <span class="string">.coding_git/.git/</span> <span class="string">./public/</span>   <span class="comment"># 这一步之前的操作是为了保留master分支的提交记录，不然每次git init的话只有1条commit</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"Gustave"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"1014016816@qq.com"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"Travis CI Auto Builder For Coding Pages at `date +"</span><span class="string">%Y-%m-%d</span> <span class="string">%H:%M"`"</span>  <span class="comment"># 提交记录包含时间 跟上面更改时区配合</span></span><br><span class="line">  <span class="comment"># Coding Pages</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://kikfan:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;"</span> <span class="string">master:master</span></span><br><span class="line"><span class="comment"># E: Build LifeCycle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">source</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/kikyou93/kikyou93.github.io.git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">CO_REF:</span> <span class="string">git.coding.net/kikfan/kikfan.coding.me.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure notifications (email, IRC, campfire etc)</span></span><br><span class="line"><span class="comment"># please update this section to your needs!</span></span><br><span class="line"><span class="comment"># https://docs.travis-ci.com/user/notifications/</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1014016816</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="attr">on_success:</span> <span class="string">change</span></span><br><span class="line">  <span class="attr">on_failure:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>持续集成了就是方便，哈哈</p>
</li>
<li>添加Coding Pages试试</li>
<li>百度爬虫啊，心累!</li>
<li>Git commit的问题也是心累</li>
<li>全都保留提交记录，舒服！！</li>
<li>Bingo,问题都铲除了就是爽</li>
<li>hexo g -d呢,摸不着头脑</li>
<li>双十一买什么,头疼</li>
<li>手机编辑试试</li>
<li>添加了时间,还是挺舒服的</li>
<li>摊上单词真是倒了八辈子血霉了</li>
<li>日常推一推,(<em>^_^</em>)</li>
</ul>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Travis CI</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>bitmap,有点意思</title>
    <url>/archives/78236c9b.html</url>
    <content><![CDATA[<h1 id="位移操作的基本概念与逻辑运算"><a href="#位移操作的基本概念与逻辑运算" class="headerlink" title="位移操作的基本概念与逻辑运算"></a>位移操作的基本概念与逻辑运算</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0010</span>(<span class="number">0x02</span>)</span><br><span class="line">a &gt;&gt;= <span class="number">1</span>; (a 右移<span class="number">1</span>位并把右移的结果重新赋值给a) 此时a = <span class="number">0001</span>(<span class="number">0x01</span>);</span><br><span class="line">a &lt;&lt;= <span class="number">1</span>；（a左移<span class="number">1</span>位并把左移的结果重新赋值给a） 此时 a = <span class="number">0100</span>(<span class="number">0x04</span>);</span><br><span class="line">a &amp;= <span class="number">0x01</span>;（ a与<span class="number">0x01</span> 按位与，并把按位与的结果重新赋值给a）。此时a = <span class="number">0x0</span>;</span><br><span class="line">a |= <span class="number">0x01</span>;（ a与<span class="number">0x01</span> 按位或，并把按位或的结果重新赋值给a）。此时a = <span class="number">0011</span>(<span class="number">0x03</span>);</span><br><span class="line">a ^= <span class="number">0x01</span>;（ a与<span class="number">0x01</span> 按位异或，并把按位异或的结果重新赋值给a）。此时a = <span class="number">0x03</span>;(异或的意思就是，该位均为相同的则该位结果为<span class="number">0</span>，该位均为不同的则该位结果为<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 二进制里的加减法</span></span><br><span class="line">    System.out.println(~a == -<span class="number">9</span>);</span><br><span class="line">    System.out.println(-~a == a + <span class="number">1</span>);</span><br><span class="line">    System.out.println(~-a == a - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="扩展的bitmap-最高统计次数为15次"><a href="#扩展的bitmap-最高统计次数为15次" class="headerlink" title="扩展的bitmap,最高统计次数为15次"></a>扩展的bitmap,最高统计次数为15次</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gustave.practice.hobby.interest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PER_WORDS = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] words;</span><br><span class="line">    <span class="comment">// 每个数字最高出现16次，既需要4bit来表示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINAL_PER_WORDS = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitMap</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        words = <span class="keyword">new</span> <span class="keyword">int</span>[((size - <span class="number">1</span>) &gt;&gt; FINAL_PER_WORDS) + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> wordIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="keyword">this</span>.get(wordIndex);</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">15</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = (wordIndex - <span class="number">1</span>) % (<span class="number">1</span> &lt;&lt; FINAL_PER_WORDS);</span><br><span class="line">            words[wordIndex &gt;&gt; FINAL_PER_WORDS] += (<span class="number">1</span> &lt;&lt; count * <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> wordIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = (wordIndex - <span class="number">1</span>) % (<span class="number">1</span> &lt;&lt; FINAL_PER_WORDS);</span><br><span class="line">        <span class="keyword">int</span> num = (words[wordIndex &gt;&gt; FINAL_PER_WORDS] &amp; (<span class="number">15</span> &lt;&lt; count * <span class="number">4</span>)) / (<span class="number">1</span> &lt;&lt; count * <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> num &lt; <span class="number">0</span> ? <span class="number">16</span> + num : num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="测试的类"><a href="#测试的类" class="headerlink" title="测试的类"></a>测试的类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gustave.practice.testWork.bitMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gustave.practice.hobby.interest.BitMap;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBitMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">100</span>;</span><br><span class="line">        BitMap bitMap = <span class="keyword">new</span> BitMap(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            bitMap.set(i);</span><br><span class="line">        &#125;</span><br><span class="line">        bitMap.set(<span class="number">1</span>);</span><br><span class="line">        bitMap.set(<span class="number">1</span>);</span><br><span class="line">        bitMap.set(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">9</span> ; i++) &#123;</span><br><span class="line">            bitMap.set(<span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">19</span> ; i++) &#123;</span><br><span class="line">            bitMap.set(<span class="number">16</span>);</span><br><span class="line">            bitMap.set(<span class="number">17</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(bitMap.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(bitMap.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(bitMap.get(<span class="number">12</span>));</span><br><span class="line">        System.out.println(bitMap.get(<span class="number">8</span>));</span><br><span class="line">        System.out.println(bitMap.get(<span class="number">16</span>));</span><br><span class="line">        System.out.println(bitMap.get(<span class="number">17</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>bitmap</tag>
      </tags>
  </entry>
  <entry>
    <title>frp实现内网穿透</title>
    <url>/archives/f51df9f4.html</url>
    <content><![CDATA[<h1 id="什么是frp"><a href="#什么是frp" class="headerlink" title="什么是frp"></a>什么是frp</h1><p>frp 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在使用frp之前，需要一台有公网IP的服务器（下文称外网主机），一台需要实现内网穿透的机器（下文称内网主机），SSH工具，以及一个域名（如果只是建立SSH反向代理则不需要域名）。<br>该文章中笔者所使用的服务器是朋友推荐的Vultr服务器，虽然服务器是在国外，但胜在带宽够，有需要的朋友可以注册一个。而需要实现内网穿透的机器则是笔者用上网本搭建的黑。SSH工具使用的是Xshell 5。而域名笔者则是使用自己个人网站的域名。<br>开始使用<br>根据机器的操作系统，在Release页面中找到对应的frp程序，然后分别在外网主机和内网主机中下载它。<br>下面的所示范用的frp程序版本是以笔者的服务器为主的。<br>外网主机<br>SSH连接上外网主机后，使用wget指令下载frp。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>使用tar指令解压tar.gz文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf frp_0.20.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure></p>
<p>使用cd指令进入解压出来的文件夹<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd frp_0.20.0_linux_amd64/</span><br></pre></td></tr></table></figure></p>
<p>外网主机作为服务端，可以删掉不必要的客户端文件，使用rm指令删除文件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -f frpc</span><br><span class="line">rm -f frpc.ini</span><br></pre></td></tr></table></figure></p>
<p>接下来要修改服务器配置文件，即frps.ini文件。使用vi指令对目标文件进行编辑。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi frps.ini</span><br></pre></td></tr></table></figure></p>
<p>打开frps.ini后可以看到默认已经有很多详细的配置和示范样例，该文章仅以达到内网穿透为目的，所以这里选择删掉或注释掉里面的所有内容，然后根据的情况，按照官方的中文文档添加以下配置。（这里的操作都使用vi命令，关于vi命令的使用方式这里不作详细介绍，可以自行搜索相关使用方法。）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br></pre></td></tr></table></figure></p>
<h1 id="common"><a href="#common" class="headerlink" title="[common]"></a>[common]</h1><p>[common]部分是必须有的配置，其中bind_port是自己设定的frp服务端端口，vhost_http_port是自己设定的http访问端口。<br>保存上面的配置后，使用以下指令启动frp服务端。（如果需要在后台运行，请往下翻阅关于后台运行的部分。）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></p>
<p>服务端的工作就到此结束了。</p>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>客户端前面的操作和服务端是一模一样的，这里不一一解释。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.20.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.20.0_linux_amd64</span><br><span class="line">rm -f frps</span><br><span class="line">rm -f frps.ini</span><br><span class="line">vi frpc.ini</span><br></pre></td></tr></table></figure></p>
<p>客户端的配置如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line">[nas]</span><br><span class="line">type = http</span><br><span class="line">local_port = 5000</span><br><span class="line">custom_domains = no1.sunnyrx.com</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = no2.sunnyrx.com</span><br></pre></td></tr></table></figure></p>
<p>上面的配置和服务端是对应的。<br>[common]中的server_addr填frp服务端的ip（也就是外网主机的IP），server_port填frp服务端的bind_prot。<br>[ssh]中的local_port填的ssh端口。<br>[nas]中的type对应服务端配置。local_port填的DSM端口。custom_domains为要映射的域名，记得域名的A记录要解析到外网主机的IP。<br>[web]同上，local_port填的web端口。这里创建了两个http反向代理是为了分别映射两个重要的端口，5000和80，前者用于登录管理，后者用于的Web Station和DS Photo。<br>保存配置，输入以下指令运行frp客户端。（同样如果需要在后台运行，请往下翻阅关于后台运行的部分。）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure></p>
<p>此时在服务端会看到”start proxy sucess”字样，即连接成功。<br>现在可以用SSH通过外网主机IP:6000和建立SSH连接。通过浏览器访问no1.sunnyrx.com:8080打开nas的管理页面，访问no2.sunnyrx.com:8080打开Web Station的网站，DS Photo app可以连接no2.sunnyrx.com:8080进入DS Photo管理。</p>
<h1 id="让frp在后台运行"><a href="#让frp在后台运行" class="headerlink" title="让frp在后台运行"></a>让frp在后台运行</h1><p>虽然现在frp运作起来了，内网穿透也实现了，但这还是不够的。此时如果断开与服务端或者客户端的SSH连接（比如关掉了Xshell）也就中止了frp的运行。<br>保持frp运行是关键是让服务端的frp和客户端的frp在后台运行，这里提两个方法供参考，一个是使用screen指令，另一个是使用nohup指令。由于的系统默认是没有screen指令的，这里也不提供安装screen的方法，所以推荐直接使用nohup。</p>
<p>其实服务端也直接用’nohup’就好了。</p>
<h1 id="使用nohup指令"><a href="#使用nohup指令" class="headerlink" title="使用nohup指令"></a>使用nohup指令</h1><p>nohup指令的使用方法相对简单，只需要在nohup后面加上frp的运行指令即可。下面示范的指令是运行frp客户端。（同样，如果之前断开了SSH连接，记得用cd指令进入frp的目录先。）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure></p>
<p>这样就成功让frp在后台运行了。</p>
<ul>
<li><a href="https://www.jianshu.com/p/e8e26bcc6fe6" target="_blank" rel="noopener">原文链接</a></li>
<li><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">GitHub</a></li>
</ul>
<h1 id="ngrok自建服务器穿透"><a href="#ngrok自建服务器穿透" class="headerlink" title="ngrok自建服务器穿透"></a>ngrok自建服务器穿透</h1><ul>
<li><a href="https://www.jianshu.com/p/b81bb6a3c0b9" target="_blank" rel="noopener">ngrok</a></li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>frp</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/archives/43167.html</url>
    <content><![CDATA[<h1 id="git-reset-–hard-–soft-–mixed区别"><a href="#git-reset-–hard-–soft-–mixed区别" class="headerlink" title="git reset –hard –soft –mixed区别"></a>git reset –hard –soft –mixed区别</h1><p>使用方法<br><code>git reset --mixed/--hard/--soft  41e1d58739a5ab280b5b2dbde107c14aeeb0b6d2</code></p>
<ul>
<li><p>git –soft<br>只是删除某次提交,再次提交直接commit即可</p>
</li>
<li><p>git –mixed-<br>删除某次提交,并且回到add之前的状态,再次提交先add  在commit</p>
</li>
<li><p>git –hard<br>删除末次提交,并清空所有基于41e1d58739a5ab280b5b2dbde107c14aeeb0b6d2这次commit的修改.可能会造成数据丢失.</p>
</li>
</ul>
<h1 id="git-cherry-pick-commit-id-…"><a href="#git-cherry-pick-commit-id-…" class="headerlink" title="git cherry-pick {commit_id} …"></a>git cherry-pick {commit_id} …</h1><p>合并一条或者多条的commit 记录</p>
<h1 id="git-rebase-branch"><a href="#git-rebase-branch" class="headerlink" title="git rebase {branch}"></a>git rebase {branch}</h1><p>将当前分支基点置于另一分支的最后一个提交的位置，同样可以更新另一分支的内容，与merge的区别是1、rebase更加干净2、rebase 是线性的提交记录</p>
<h1 id="git-rebase-i-commit-id"><a href="#git-rebase-i-commit-id" class="headerlink" title="git rebase -i {commit_id}"></a>git rebase -i {commit_id}</h1><p>交互模式，操作当前分支所在位置，通常用于插入commit，删除commit，合并commit等，功能较为强大</p>
<blockquote>
<p> Commands:<br>   p, pick = use commit<br>   r, reword = use commit, but edit the commit message<br>   e, edit = use commit, but stop for amending<br>   s, squash = use commit, but meld into previous commit<br>   f, fixup = like “squash”, but discard this commit’s log message<br>   x, exec = run command (the rest of the line) using shell<br>   d, drop = remove commit</p>
</blockquote>
<h1 id="merge-与-rebase的选择"><a href="#merge-与-rebase的选择" class="headerlink" title="merge 与 rebase的选择"></a>merge 与 rebase的选择</h1><ul>
<li>不要在公共分支上使用rebase，因为rebase会修改提交记录，否则会造成回溯的困难</li>
</ul>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/archives/a1751c09.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! <a id="more"></a> This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<p>hexo  <a href="https://www.jianshu.com/p/a142eb105279" target="_blank" rel="noopener">模板写法</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo模板</title>
    <url>/archives/72c6fac0.html</url>
    <content><![CDATA[<p>寻觅有意思的，禁得起研究的东西中…<br>迅速调整，始终保持一颗前行的心，方为根本<br>任时间匆匆流过。。。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
  </entry>
  <entry>
    <title>jenkins配置及使用</title>
    <url>/archives/adddc8ee.html</url>
    <content><![CDATA[<h1 id="关于-var-run-docker-sock"><a href="#关于-var-run-docker-sock" class="headerlink" title="关于/var/run/docker.sock"></a>关于/var/run/docker.sock</h1><ul>
<li>http方式创建和启动容器，帮助理解<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPOST --unix-socket /var/run/docker.sock  -d &apos;&#123;&quot;Image&quot;:&quot;redis&quot;&#125;&apos; -H &apos;Content-Type:application/json&apos; http://localhost/containers/create</span><br><span class="line"></span><br><span class="line">&#123;&quot;Id&quot;:&quot;773590db01d5061c9edb91ab258a2bfb537d00b76b74c695ff9cb7564b46d1c3&quot;,&quot;Warnings&quot;:null&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/773590db01d5061c9edb91ab258a2bfb537d00b76b74c695ff9cb7564b46d1c3/start</span><br></pre></td></tr></table></figure>
<h1 id="docker搭建jenkins"><a href="#docker搭建jenkins" class="headerlink" title="docker搭建jenkins"></a>docker搭建jenkins</h1><ul>
<li>docker-compose.yml</li>
<li>需要注意的是因为需求权限，所以添加root<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkinsci/jenkins</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/jenkins/jenkinsci_home:/var/jenkins_home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx折腾记</title>
    <url>/archives/c2e234dc.html</url>
    <content><![CDATA[<ul>
<li><p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">"80:80"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    # 配置一个代理服务器</span><br><span class="line">    upstream kikfan &#123;</span><br><span class="line">        server space.kikfan.com:5000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置一个虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name yp.kikfan.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                # 域名 yp.kikfan.com 的请求全部转发到 kikfan 服务上</span><br><span class="line">                proxy_pass http://kikfan;</span><br><span class="line">                # 欢迎页面，按照从左到右的顺序查找页面</span><br><span class="line">                # index index.jsp index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn+frp实现内网穿透远程办公</title>
    <url>/archives/87304ffa.html</url>
    <content><![CDATA[<h1 id="openvpn"><a href="#openvpn" class="headerlink" title="openvpn"></a>openvpn</h1><ul>
<li>使用Nyr大神的一键脚本即可（注：数据源上面吃了小亏，package 错误，不再犯）<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">wget https://git.io/vpn -O openvpn-install.sh &amp;&amp; bash openvpn-install.sh</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><h6 id="站在巨人的肩膀上，同样简单操作，注意需要配置服务以防频繁掉（linux-配置系统服务）"><a href="#站在巨人的肩膀上，同样简单操作，注意需要配置服务以防频繁掉（linux-配置系统服务）" class="headerlink" title="- 站在巨人的肩膀上，同样简单操作，注意需要配置服务以防频繁掉（linux 配置系统服务）"></a>- 站在巨人的肩膀上，同样简单操作，注意需要配置服务以防频繁掉（linux 配置系统服务）</h6><p><code>vi /lib/systemd/system/frpc.service</code><br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">  </span><br><span class="line">Description=frpc service</span><br><span class="line"></span><br><span class="line">After=network.target syslog.target</span><br><span class="line"></span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=simple</span><br><span class="line"></span><br><span class="line">ExecStart=/root/frp_0.33.0_linux_amd64/frpc -c /root/frp_0.33.0_linux_amd64/frpc.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>
<p><code>systemctl enable frpc</code></p>
<p><code>systemctl start frpc</code></p>
<ul>
<li>配置frp的过程中有个小坑，frpc的映射必须填所在网段的地址<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">[vpn]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 192.168.0.0</span><br><span class="line">local_port = </span><br><span class="line">remote_port =</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>frp</tag>
        <tag>内网穿透</tag>
        <tag>openvpn</tag>
      </tags>
  </entry>
  <entry>
    <title>shell学习</title>
    <url>/archives/f8d5cfbe.html</url>
    <content><![CDATA[<h1 id="shell脚本学习"><a href="#shell脚本学习" class="headerlink" title="shell脚本学习"></a>shell脚本学习</h1><ul>
<li><p>echo -e 不显示转义的字符</p>
</li>
<li><p>shell传递参数实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># author:菜鸟教程</span><br><span class="line"># url:www.runoob.com</span><br><span class="line"></span><br><span class="line">echo &quot;Shell 传递参数实例！&quot;;</span><br><span class="line">echo &quot;执行的文件名：$0&quot;;</span><br><span class="line">echo &quot;第一个参数为：$1&quot;;</span><br><span class="line">echo &quot;第二个参数为：$2&quot;;</span><br><span class="line">echo &quot;第三个参数为：$3&quot;;</span><br><span class="line"></span><br><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure>
</li>
<li><p>$<em> 与 $@ 区别：<br>相同点：都是引用所有参数。<br>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ </em> “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p>
</li>
<li><p>运算符<br>eq：equal to。<br>ne：not equal to。<br>gt：greater than。<br>ge：greater than or equal to。<br>lt：less than。<br>le：less than or equal to。</p>
</li>
<li><p>shell脚本还是有点意思，可以方便地传变量</p>
</li>
<li><p>shell里如果是赋值那么算式那么等号两边不能有空格<br>而如果是进行比较等算式，则必须要有空格在两边</p>
</li>
<li><p>shell语句中的case when 用法<br><img src="../images/case-when.png" alt="shell 中的case when"></p>
</li>
<li><p>shell脚本求解一元二次方程<br>不熟悉的东西，坑也是众多</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">while read nums</span><br><span class="line">do</span><br><span class="line">   array=($nums)</span><br><span class="line">        a=$&#123;array[0]&#125;;b=$&#123;array[1]&#125;;c=$&#123;array[2]&#125;</span><br><span class="line"># echo $a;echo $b;echo $c;</span><br><span class="line">tmp=$(scale=2;echo &quot;sqrt($b*$b-4*$a*$c)&quot;|bc);</span><br><span class="line">#echo $tmp;</span><br><span class="line">#echo &quot;scale=2;$b+$tmp&quot;|bc</span><br><span class="line">x1=$(echo &quot;scale=2;(-($b)+$tmp)/(2*$a)&quot;|bc)</span><br><span class="line">x2=$(echo &quot;scale=2;(-($b)-$tmp)/(2*$a)&quot;|bc)</span><br><span class="line">echo &quot;x1=$x1&quot;</span><br><span class="line">echo &quot;x2=$x2&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>关于RNG,关于LOL</title>
    <url>/archives/587eb1e3.html</url>
    <content><![CDATA[<h1 id="游戏而已"><a href="#游戏而已" class="headerlink" title="游戏而已"></a>游戏而已</h1><p>RNG输了，输的很彻底，输的很难看。<br>对于脱坑很久的老咸鱼来说，看比赛这唯一的乐趣也再也提不起来了。<br>或许是我一向的低预期习惯，比赛前就隐隐感觉不会那么轻松，结果就真的发生了。。。<br>希望IG可以努努力，不要太伤老玩家的心吧</p>
]]></content>
      <categories>
        <category>风轻云淡</category>
      </categories>
      <tags>
        <tag>游戏人生</tag>
      </tags>
  </entry>
  <entry>
    <title>分区助手迁移系统真的是爽</title>
    <url>/archives/a33f44d0.html</url>
    <content><![CDATA[<ul>
<li>坑爹的建兴SSD，多次无缘无故自动格式化，终于没忍住动手搞搞</li>
<li>在固态中的系统果然是稳的不行<br><img src="../images/浦科特跑分.jpg" alt="浦科特跑分"></li>
</ul>
]]></content>
      <categories>
        <category>漫漫人生</category>
      </categories>
      <tags>
        <tag>System</tag>
      </tags>
  </entry>
  <entry>
    <title>匮乏即是富足，自律产生喜悦</title>
    <url>/archives/5e60ef9a.html</url>
    <content><![CDATA[<blockquote>
<p>（Asceticism and minimalist let a person more sensitive,<br>lack is rich, self-discipline to produce joy! To understand<br> a truth: most people don’t know too much!） ——乔布斯   </p>
</blockquote>
]]></content>
      <categories>
        <category>漫漫人生</category>
      </categories>
      <tags>
        <tag>人生</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>感谢IG</title>
    <url>/archives/a6ddf20d.html</url>
    <content><![CDATA[<h1 id="七年，终于等到了"><a href="#七年，终于等到了" class="headerlink" title="七年，终于等到了"></a>七年，终于等到了</h1><p>恕我贫瘠的文字没有办法描述我此刻的心情，但作为一个玩lol的老男人，<br>身处网吧，听到此起彼伏的嚎叫的时候，很感慨，有太多的人，等这一刻太久了。</p>
]]></content>
      <categories>
        <category>风轻云淡</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>日常小技巧</title>
    <url>/archives/9dfc94f1.html</url>
    <content><![CDATA[<h1 id="Excel连接文本"><a href="#Excel连接文本" class="headerlink" title="Excel连接文本"></a>Excel连接文本</h1><p>使用concatenate(text1,text2,text3…)函数，其中，如果有符号需要用双引号包裹<br>例如 concatenate(“‘“,text1,”‘“)这种形式，主要是跑辅助sql的时候可以比较方便</p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>晴雨表</title>
    <url>/archives/9c72626d.html</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome, enter password to read this" />
    <label for="pass">Welcome, enter password to read this</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漫漫人生</category>
      </categories>
      <tags>
        <tag>无聊</tag>
        <tag>踌躇徘徊</tag>
      </tags>
  </entry>
  <entry>
    <title>有意思的Java单例模式</title>
    <url>/archives/e95c6f09.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java的单例模式号称最简单的设计模式，然后其实并没有那么简单，下面来研究研究单例模式的具体实现</p>
<h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonB INSTANCE = <span class="keyword">new</span> SingletonB();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonB <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 如上所示为饿汉式的单例模式的实现，全局的单例实例在类加载的时候就构建（可以免疫很多多线程的问题），但是该种方式也缺陷明显，浪费资源。</p>
<h1 id="v1-懒汉式"><a href="#v1-懒汉式" class="headerlink" title="v1.懒汉式"></a>v1.懒汉式</h1> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonA1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonA1 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonA1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonA1 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> SingletonA1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上为简单版懒汉模式，相比饿汉式，在需要的时候才构建实例，然而多线程的场景下，<br>如果有多个线程同时判断了INSTANCE为null，则系统中会出现多个实例</p>
<h1 id="v2-synchronized版本"><a href="#v2-synchronized版本" class="headerlink" title="v2.synchronized版本"></a>v2.synchronized版本</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonA2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonA2 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonA2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonA2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> SingletonA2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然如此，将获取实例的方法加锁即可，确实可以避免v1版的问题，但是一旦方法加锁之后同步了，<br>所有其他线程都被阻塞，为了1%可能导致的多线程问题，而造成了效率上的大大降低，其实是得不偿失的</p>
<h1 id="v3-Double-Check版本"><a href="#v3-Double-Check版本" class="headerlink" title="v3.Double-Check版本"></a>v3.Double-Check版本</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonA3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonA3 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonA3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonA3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonA3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> SingletonA3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>双检法，当实例为null的时候，才加锁，相对于v2版本，只针对那1%的时候，进行同步处理<br>到了这里，基本就是完美的了，然而事情并没有这么简单！！！<br><code>INSTANCE = new SingletonA3();</code>该语句并非是原子性的（不可分割）<br>细分之后为1.INSTANCE分配内存2.SingletonA3调用构造器在堆中构建实例3.将INSTANCE指向堆中的实例<br>而Java有指令重排的机制，并非一定是123的顺序，如果是132的顺序时，刚执行完13，此时恰好，有另外的线程在进行<br>第一个<code>if (INSTANCE == null)</code>的判断，此时判断INSTANCE是非null的，则会直接返回，然而实际上它并没有正确指向堆，<br>所以理所应该地就报错了。如下则为指令重排详解</p>
<h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><p>简单来说，就是计算机为了提高执行效率，会做的一些优化，在不影响最终结果的情况下，可能会对一些语句的执行顺序进行调整。<br>比如，这一段代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a ;   <span class="comment">// 语句1 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">8</span> ;   <span class="comment">// 语句2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">9</span> ;     <span class="comment">// 语句3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = a + b ; <span class="comment">// 语句4</span></span><br></pre></td></tr></table></figure></p>
<p>正常来说，对于顺序结构，执行的顺序是自上到下，也即1234。<br>但是，由于指令重排的原因，因为不影响最终的结果，所以，实际执行的顺序可能会变成3124或者1324。<br>由于语句3和4没有原子性的问题，语句3和语句4也可能会拆分成原子操作，再重排。<br>——也就是说，对于非原子性的操作，在不影响最终结果的情况下，其拆分成的原子操作可能会被重新排列执行顺序。<br>OK，了解了原子操作和指令重排的概念之后，我们再继续看Version3代码的问题。<br>下面这段话直接从陈皓的文章(深入浅出单实例SINGLETON设计模式)中复制而来：<br>主要在于singleton = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p>
<ol>
<li>给 singleton 分配内存</li>
<li>调用 Singleton 的构造函数来初始化成员变量，形成实例</li>
<li>将singleton对象指向分配的内存空间（执行完这步 singleton才是非 null 了）<br>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。<br>再稍微解释一下，就是说，由于有一个『instance已经不为null但是仍没有完成初始化』的中间状态，而这个时候，如果有其他线程刚好运行到第一层if (instance == null)这里，这里读取到的instance已经不为null了，所以就直接把这个中间状态的instance拿去用了，就会产生问题。<br>这里的关键在于——线程T1对instance的写操作没有完成，线程T2就执行了读操作。</li>
</ol>
<h1 id="v4-volatile关键字完美版"><a href="#v4-volatile关键字完美版" class="headerlink" title="v4.volatile关键字完美版"></a>v4.volatile关键字完美版</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonA4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonA4 INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonA4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonA4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonA4<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> SingletonA4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>volatile关键字的作用在于，在写之前即<code>INSTANCE = new SingletonA4();</code>操作之前，不会进行读操作，即<code>if (INSTANCE == null)</code>操作<br>这是双检法的终极版本，要说缺点的话，就是写法太复杂了</p>
<h1 id="静态内部类法"><a href="#静态内部类法" class="headerlink" title="静态内部类法"></a>静态内部类法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingetonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingetonHolder INSTANCE = <span class="keyword">new</span> SingetonHolder();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingetonHolder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内部类的方法，该种方式，获取实例的方式是饿汉式的，然后由于它属于内部类，并不会在外层SingletonC类加载的时候进行构建<br>所以是非常巧妙的实现</p>
<h1 id="枚举法"><a href="#枚举法" class="headerlink" title="枚举法"></a>枚举法</h1><p>下面是使用enum的实现方式<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonD &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dosth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"枚举法的实现方式"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SingletonD.INSTANCE.dosth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>枚举法简洁直观，要说缺点的话，因为它不是class所以无法继承</p>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>背驰</title>
    <url>/archives/88ba48e.html</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome, enter password to read this" />
    <label for="pass">Welcome, enter password to read this</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+TJPyQtLEJ1EhPD4khAY8HcJNUuDKNSbT9kjOKwVOHTgLpD6MqYK+xkxnDgTCdgct6jcn2WE0ktz70Xp8p96lmHTbWLnByvyFTWvwt7+dBOIru7LssGbyIqrwNmAHsbBUdls2GFpvrd+ALBcMg/mNuUu4f8cMzl89dLLG0iUio461Qz0Y7R8+iPICLFFGyFgehQi9OVitUdi8ri7aFJ7g2NTvhG+n41tOiIv3rvXBF5xWHrLXdm4N4c0TfDrKAjpL/Plx1nFe7WNJ0grGYLUiNBqHN3G3gl2vrHFeIGzd1MuU96MxJe031BXp7h5WLFvFuZxhE4kqrNDjQGv/8TZUX1cv1ZL8qvjd5H2J5b+5HFqp53EJVplZDaXOkeN9KIAxoDEZV9Frft7QbZ8zWHEHFeKyhrMy6VjT52QC8EE+Jl2FUGq/pXZAK5c7qgNa/lcA9ylWMuMd8QsfvRFXaLCgXXopqCXN6UIsI5+TTGTOu3gdNDMrAwPxzyxUFfq5zO3CyrQVcX3rnl/JiPj1JTgg40aILIpPZNkraWFzy23atZbb4JAeGcCQqq0uBtq7oXI20BVcUkHcYzH7W5C/p6vXivIAeRXfh5S4KVp+fPTvrSX0jB0LrjoJz0M66PzPWdx2uvHbNh0ESYzh1bkgkr4XHB4mgboIJVIRdy7Us76kk+uBtwriw6p06udDs93hnhiCQN7DBRIsIHoO4q/hywNIam39TPeWwQ/98qkACsU3rCIrbuQs0lyVN7vwaYPqSRUcun0h2HmCy6tmN926e/CU/cD5Mqya1/2NzfJR6UceLb0osNj7dRO8howlT65KdOuJ9TCA04il5GlumzOilG8YdCdU/LpB9iczGjKm8CVQFqrNvuNPY9abRy+Q2YshAFAxLZ2/Di8f8LCBQy4rku4bNnhsWXuoNZFt851m/4xAa/JSATNcuBNwnq7cAaJd2ZhARQPG0qQKLMXcleRci7zQ9R5StmIIjou7pHGAKZNh6VjvobxrL/3XPCA/QqbpvjGe9gLhlOPiI2j7I7OgBM4WQWEEhopbXgGOni3+sjLsb2adQL1Lbcdbdb/GWnXT1mvwm9VGtsTPcIcNLngue6HLR6wA6iksOTmm40Cv01IP2Zakrr/TspH3xiPk+bwJ758takVCFXJcGSVT9y5hcX0vcLNp8vP/cbDG8J6wY06+qItgolWyM7JzGu68gzZufpul5sbnI61Sox2TeGondyHLKdhzySlwxat05bItRZFtd/JnCMrdVoQeQ4lBiNvwlVPL0eSPXLqZ3OTLR+FWOxErXAVuRsN0PYcvPIruOQNqv+lrp3jnVIjmbbXXfyKSZISMG4L2Je9xVisVjm5mzyOn1BqW6swMTdYL3u3rsjxCviK5jV9bElJR6NXDIhhI7YKdEeDphyNIy0dweI9St0DfwM1/8O79NPELG1wpest/L1BPRnszpV49U661afzF8Emty4tZjrjRXNA==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>股海浮沉</category>
      </categories>
      <tags>
        <tag>股票</tag>
      </tags>
  </entry>
  <entry>
    <title>追根溯源，PN结、三极管与场效应管</title>
    <url>/archives/f8b5ed62.html</url>
    <content><![CDATA[<ul>
<li>热泪盈眶，大学学的东西，终于能起到点桥梁作用了</li>
<li>虽然与编程没有直接的联系，但是却是二进制、寄存器、计算机内存等等的基本原理，源头所在。从源头弄懂，才可以构建一个完整的知识体系，浑身才会舒坦，进而更好地编程。<h1 id="PN结"><a href="#PN结" class="headerlink" title="PN结"></a>PN结</h1></li>
<li>本征半导体<br><img src="../images/本征半导体.jpg" alt="本征半导体"><blockquote>
<p>2019.2.2 更新于k210，别有一番风味</p>
</blockquote>
</li>
</ul>
<p>如图为本征半导体的结构，其含义为没有掺杂任何杂质的硅或锗的结构，在热运动下，部分电子会脱离束缚，这样就形成了空穴-电子对，电子是有电荷的，而空穴则具有吸引电子的能力，所以这两者都是属于载流子。</p>
<ul>
<li><p>N型材料<br><img src="../images/杂质半导体掺磷.jpg" alt="杂质半导体掺磷"><br>在本征半导体中掺入磷杂质，那么该种物质的成键方式如图，由于磷的外层具有5个电子，所以则打破了原有的空穴和电子对的平衡，此时电子数远大于空穴数，（注意：宏观上来说，对外界，它仍然是属于电中性的），由于其结构体中，电子很多，故称该种掺磷的本征半导体为N（Negative）材料。（导电的本质是载流子的运动，形成电流而已，当一种物质具有很多载流子时，则其导电能力就增强）。</p>
</li>
<li><p>P型材料<br><img src="../images/杂质半导体掺硼.jpg" alt="杂质半导体掺硼"><br>和掺磷的相对应，由于硼的外层电子数为3，所以形成共价键时，空穴更多，空穴是吸引电子，所以该种物质属于P(Positive)材料</p>
</li>
<li><p>将P型材料和N型材料相连构成PN结<br><img src="../images/PN结形成内电场.jpg" alt="PN结形成内电场"><br>将两者相连之后，由于空穴和电子的相互吸引，则PN结则会相互发生扩散运动，此时注意了，由于这两种材料，连接之前其实都还是呈现电中性的，所以，P型材料失去空穴（吸引了电子），带负电。N型半导体失去了电子，则带正电。因此则形成了内电场，该内电场是阻碍扩散运动的，会使空穴和电子与扩散运动相反的方向运动，称为漂移运动。那么，这样会最终形成一个稳定状态，即局部区域内，扩散运动和漂移运动相平衡，这个区域被称为耗尽层，由于该内部空穴和电子相平衡，所以相当于其载流子很少，即阻碍导电。</p>
</li>
</ul>
<p><img src="../images/PN结单向导电.jpg" alt="PN结单向导电"><br>那么将PN结两端用导线连接起来，并加以电源，此时电压方向有两种，如图显示的为P点电势更高，此时外电场与内电场方向相反，会削弱内电场，即导电性能会增强。反之则导电性能变差（在高压下，耗尽层非常宽，电阻很大，可视为无法导电）。这样，PN结实际上就实现了一种单向导电的功能。</p>
<h1 id="三极管"><a href="#三极管" class="headerlink" title="三极管"></a>三极管</h1><p><img src="../images/三级管.jpg" alt="三极管"><br>三极管的一个重要作用就是用小电流1控制大电流，该种情况工作在三极管的放大区，此时发射结正偏，而集电结反偏，通过控制Ibe的电流，控制ce的电流。类似于小水龙头控制大水龙头的过程。</p>
<h1 id="场效应管"><a href="#场效应管" class="headerlink" title="场效应管"></a>场效应管</h1><p>从结构划分<br><img src="../images/场效应管.jpg" alt="场效应管"></p>
<h2 id="结型场效应管"><a href="#结型场效应管" class="headerlink" title="结型场效应管"></a>结型场效应管</h2><p><img src="../images/结型场效应管.jpg" alt="结型场效应管"><br>可将N沟道JFET看作带“人工智能开关”的水龙头。这就有三部分：进水、人工智能开关、出水，可以分别看成是JFET的 d极 、g 极、s极。<br>“人工”体现了开关的“控制”作用即vGS。JFET工作时，在栅极与源极之间需加一负电压(vGS&lt;0)，使栅极、沟道间的PN结反偏，栅极电流iG≈0，场效应管呈现高达107Ω以上的输入电阻。在漏极与源极之间加一正电压(vDS&gt;0)，使N沟道中的多数载流子(电子)在电场作用下由源极向漏极运动，形成电流iD。iD的大小受“人工开关”vGS的控制，vGS由零往负向增大时，PN结的耗尽层将加宽，导电沟道变窄，vGS绝对值越大则人工开关越接近于关上，流出的水(iD)肯定越来越小了，当你把开关关到一定程度的时候水就不流了。<br>“智能”体现了开关的“影响”作用，当水龙头两端压力差(vDS)越大时，则人工开关自动智能“生长”。vDS值越大则人工开关生长越快，流水沟道越接近于关上，流出的水(iD)肯定越小了，当人工开关生长到一定程度的时候水也就不流了。理论上，随着vDS逐渐增加，一方面沟道电场强度加大，有利于漏极电流iD增加;另一方面，有了vDS，就在由源极经沟道到漏极组成的N型半导体区域中，产生了一个沿沟道的电位梯度。由于N沟道的电位从源端到漏端是逐渐升高的，所以在从源端到漏端的不同位置上，漏极与沟道之间的电位差是不相等的，离源极越远，电位差越大，加到该处PN结的反向电压也越大，耗尽层也越向N型半导体中心扩展，使靠近漏极处的导电沟道比靠近源极要窄，导电沟道呈楔形。所以形象地比喻为当水龙头两端压力差(vDS)越大，则人工开关自动智能“生长”。<br>当开关第一次相碰时，就是预夹断状态，预夹断之后id趋于饱和。<br>当vGS&gt;0时，将使PN结处于正向偏置而产生较大的栅流，破坏了它对漏极电流iD的控制作用，即将人工开关拔出来，在开关处又加了一根进水水管，对水龙头就没有控制作用了。</p>
<h2 id="绝缘栅型场效应管"><a href="#绝缘栅型场效应管" class="headerlink" title="绝缘栅型场效应管"></a>绝缘栅型场效应管</h2><p><img src="../images/绝缘栅型场效应管.jpg" alt="绝缘栅型场效应管"><br>可将N沟道MOSFET看作带“人工智能开关”的水龙头。相对应情况同JFET。与JFET不同的的是，MOSFET刚开始人工开关是关着的，水流流不出来。当在栅源之间加vGS&gt;0， N型感生沟道(反型层)产生后，人工开关逐渐打开，水流(iD)也就越来越大。iD的大小受“人工开关”vGS的控制，vGS由零往正向增大时，则栅极和P型硅片相当于以二氧化硅为介质的平板电容器，在正的栅源电压作用下，介质中便产生了一个垂直于半导体表面的由栅极指向P型衬底的电场，这个电场排斥空穴而吸引电子，P型衬底中的少子电子被吸引到衬底表面，这些电子在栅极附近的P型硅表面便形成了一个N型薄层，即导通源极和漏极间的N型导电沟道。栅源电压vGS越大则半导体表面的电场就越强，吸引到P型硅表面的电子就越多，感生沟道将越厚，沟道电阻将越小。相当于人工开关越接近于打开，流出的水(iD)肯定越来越多了，当你把开关开到一定程度的时候水流就达到最大了。MOSFET的“智能”性与JFET原理相同，参上。</p>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>PN结</tag>
        <tag>三极管</tag>
        <tag>场效应管</tag>
      </tags>
  </entry>
  <entry>
    <title>重启征程</title>
    <url>/archives/188c91f.html</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome, enter password to read this" />
    <label for="pass">Welcome, enter password to read this</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+WE5qFOzdNVIbVDO9ZA2tUVe6QAqokan6vK0ITu7vve44lqk9fc+uGnIQfvI165EDdTmkgmZTp99+NVDcEAOr8DfyI6dxg4EBtBNrvIflgE3Ijs+vwo4v1M9MtRZ2yKwB2sPVMs2mH6RKjnMuVlwK5W70DlCR7FNxR0WxP10azAu9JmL1AKQiIliCp2LRqgLkxhHibsz3jYlnHEwByfviA8yqBUS1qem7xVVfcCcs2fjLRvoxp5+vWtfv3yvO6j2ky0Tx2EDP1Hr7Lc43RkFWoaYj6JMevq3u/ltf2q2r1FT4Mf2vgW+T1aB8QpgpzOEjZJmH9ACX61XK9EIwefrEkx/LrJL3jcB/zxhn20OYrJlw7FbBrx6EPgXI1hPRLEEnkTJFQksyesguVnCewFzQHiXNodj61eZUgyWMcdSC9fZItF4rSTQjwCqbFU/Uj8XKo7T8rkvpAozGAKsxSu+Y3mAKIySm5kHrkS0rT4mSjUc8HPkuzKXUdpTjEkeD3na50VWtvjG/azUi9PAp8PltY4bA0PsBHOGSLm08ia8YNsQBMs6Um4DnxoggWtmXaFDsUaizHWepccSgdjCX1MpHr/7pP4bQp0SPaRUJ6ZLLZt4xCewc5FrHZwUzxlhE6FmVYBLko4kjMEyoQU+0td4+yxnVq9YzpORbenuVprRFr/AyOUFgdGA16
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>阴阳师外挂</title>
    <url>/archives/63a2eef1.html</url>
    <content><![CDATA[<p>咸鱼地有些时日没动博客，最近回坑了下阴阳师，旨在养肝，遂心血来潮写写自动脚本，封号即脱坑，终是闲云野鹤<a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初步功能：自动魂土并点怪，自动结界，自动换结界卡</p>
<h1 id="基石"><a href="#基石" class="headerlink" title="基石"></a>基石</h1><p>在相应的分辨率下截图，并存入内存中，后续进行比对<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(absolutePath + <span class="string">"/images/"</span> + fblpath);</span><br><span class="line">String[] fileList = file.list();</span><br><span class="line"><span class="keyword">for</span> (String fileName : fileList) &#123;</span><br><span class="line">    System.out.println(fileName.substring(<span class="number">0</span>, fileName.lastIndexOf(<span class="string">"."</span>)));</span><br><span class="line">    imagesMap.put(fileName.substring(<span class="number">0</span>, fileName.lastIndexOf(<span class="string">"."</span>)), getImageFromPath(<span class="string">"/images/"</span> + fblpath + <span class="string">"/"</span> + fileName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><ul>
<li>使用rgb进行颜色比对，判断图片是否包含，确定图片位置之后进行相对位置的定位<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找图片</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">findPic</span><span class="params">(BufferedImage screenShotImage,</span></span></span><br><span class="line"><span class="function"><span class="params">                        BufferedImage targetImage, String buttonName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] screenImageData = getImageGRB(screenShotImage);</span><br><span class="line">    <span class="keyword">int</span>[][] targetImageData = getImageGRB(targetImage);</span><br><span class="line">    <span class="keyword">int</span> targetImageHeight = targetImage.getHeight();</span><br><span class="line">    <span class="keyword">int</span> targetImageWidth = targetImage.getWidth();</span><br><span class="line">    <span class="keyword">int</span> screenImageHeight = screenShotImage.getHeight();</span><br><span class="line">    <span class="keyword">int</span> screenImageWidth = screenShotImage.getWidth();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先根据上次的位置查找，找不到再遍历查找</span></span><br><span class="line">    <span class="keyword">int</span>[] res = position.get(buttonName);</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="keyword">null</span> &amp;&amp; res.length == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isFinded = isMatchAll(res[<span class="number">1</span>], res[<span class="number">0</span>], targetImageHeight, targetImageWidth, screenImageHeight, screenImageWidth, screenImageData, targetImageData);</span><br><span class="line">        <span class="keyword">if</span> (isFinded) &#123;</span><br><span class="line">            <span class="keyword">int</span> mouseX = res[<span class="number">0</span>] + getNum(<span class="number">3</span>, targetImageWidth);</span><br><span class="line">            <span class="keyword">int</span> mouseY = res[<span class="number">1</span>] + getNum(<span class="number">3</span>, targetImageHeight);</span><br><span class="line">            position.put(buttonName, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;res[<span class="number">0</span>], res[<span class="number">1</span>], mouseX, mouseY&#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历屏幕截图像素点数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; screenImageHeight - targetImageHeight; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; screenImageWidth - targetImageWidth; x++) &#123;</span><br><span class="line">            <span class="comment">//根据目标图的尺寸，得到目标图四个角映射到屏幕截图上的四个点，</span></span><br><span class="line">            <span class="comment">//判断截图上对应的四个点与图B的四个角像素点的值是否相同，</span></span><br><span class="line">            <span class="comment">//如果相同就将屏幕截图上映射范围内的所有的点与目标图的所有的点进行比较。</span></span><br><span class="line">            <span class="keyword">if</span> (isSamePoint(targetImageData[<span class="number">0</span>][<span class="number">0</span>], screenImageData[y][x])</span><br><span class="line">                    &amp;&amp; isSamePoint(targetImageData[<span class="number">0</span>][targetImageWidth - <span class="number">1</span>], screenImageData[y][x + targetImageWidth - <span class="number">1</span>])</span><br><span class="line">                    &amp;&amp; isSamePoint(targetImageData[targetImageHeight - <span class="number">1</span>][targetImageWidth - <span class="number">1</span>], screenImageData[y + targetImageHeight - <span class="number">1</span>][x + targetImageWidth - <span class="number">1</span>])</span><br><span class="line">                    &amp;&amp; isSamePoint(targetImageData[targetImageHeight - <span class="number">1</span>][<span class="number">0</span>], screenImageData[y + targetImageHeight - <span class="number">1</span>][x])) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isFinded = isMatchAll(y, x, targetImageHeight, targetImageWidth, screenImageHeight, screenImageWidth, screenImageData, targetImageData);</span><br><span class="line">                <span class="comment">//如果比较结果完全相同，则说明图片找到，填充查找到的位置坐标数据到查找结果数组。</span></span><br><span class="line">                <span class="keyword">if</span> (isFinded) &#123;</span><br><span class="line">                    <span class="keyword">int</span> mouseX = x + getNum(<span class="number">3</span>, targetImageWidth);</span><br><span class="line">                    <span class="keyword">int</span> mouseY = y + getNum(<span class="number">3</span>, targetImageHeight);</span><br><span class="line">                    position.put(buttonName, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x, y, mouseX, mouseY&#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h1><ul>
<li>目前已增加鬼王之宴、突破功能，择日有空再肝</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>hobby</tag>
      </tags>
  </entry>
  <entry>
    <title>集合的求交集方法测试</title>
    <url>/archives/b0026423.html</url>
    <content><![CDATA[<h1 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h1><ul>
<li>心血来潮，也是有需要使用到集合的交集，对List的Stream求交集，retainAll求交集，以及guava的求交集方式进行了测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGuava</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String a = <span class="string">"1,7,3"</span>;</span><br><span class="line">    String b = <span class="string">"2,5,8"</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;num ; i++) &#123;</span><br><span class="line">        a = String.format(<span class="string">"%s,%s"</span>,a,(<span class="keyword">int</span>) (Math.random() * num));</span><br><span class="line">        b = String.format(<span class="string">"%s,%s"</span>,b,(<span class="keyword">int</span>) (Math.random() * num));</span><br><span class="line">    &#125;</span><br><span class="line">    String[] arrayA = a.split(<span class="string">","</span>);</span><br><span class="line">    String[] arrayB = b.split(<span class="string">","</span>);</span><br><span class="line">    Set&lt;String&gt; setA = Arrays.stream(arrayA).collect(Collectors.toSet());</span><br><span class="line">    Set&lt;String&gt; setB = Arrays.stream(arrayB).collect(Collectors.toSet());</span><br><span class="line">    List&lt;String&gt; listA = Arrays.stream(arrayA).distinct().collect(Collectors.toList());</span><br><span class="line">    List&lt;String&gt; listB = Arrays.stream(arrayB).distinct().collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">    System.out.println(listA.stream().filter(listB::contains).collect(Collectors.toList()).size());</span><br><span class="line">    <span class="keyword">long</span> l1 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(String.format(<span class="string">"%s个数字：stream方法耗时：%s"</span>,num,l1-l));</span><br><span class="line">    System.out.println(Sets.intersection(setA, setB).size());</span><br><span class="line">    <span class="keyword">long</span> l2 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(String.format(<span class="string">"%s个数字：Guava方法耗时：%s"</span>,num,l2-l1));</span><br><span class="line">    listA.retainAll(listB);</span><br><span class="line">    System.out.println(listA.size());</span><br><span class="line">    System.out.println(String.format(<span class="string">"%s个数字：retainAll方法耗时：%s"</span>,num,System.currentTimeMillis()-l2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">203</span><br><span class="line">500个数字：stream方法耗时：4</span><br><span class="line">203</span><br><span class="line">500个数字：Guava方法耗时：38</span><br><span class="line">203</span><br><span class="line">500个数字：retainAll方法耗时：2</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">2013</span><br><span class="line">5000个数字：stream方法耗时：70</span><br><span class="line">2013</span><br><span class="line">5000个数字：Guava方法耗时：37</span><br><span class="line">2013</span><br><span class="line">5000个数字：retainAll方法耗时：32</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">8082</span><br><span class="line">20000个数字：stream方法耗时：777</span><br><span class="line">8082</span><br><span class="line">20000个数字：Guava方法耗时：31</span><br><span class="line">8082</span><br><span class="line">20000个数字：retainAll方法耗时：771</span><br></pre></td></tr></table></figure>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul>
<li>在数据的规模小的时候，使用List的Stream方法和retainAll效率更高，但当数据量大了之后，Guava的方法就拉开了一个档次</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>龟兔赛跑</title>
    <url>/archives/20450659.html</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome, enter password to read this" />
    <label for="pass">Welcome, enter password to read this</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1/Q29f2ZjS1TZdt0JnEzWFN/D5w7QA46q+BI7I03ffl9ovxUw8UhsbrLnMOKx/C/2R5wOjgMXI7CPC3KZhhez6AREbS55P4m2Onezaf9CZsxK9/A6XW4loZl2U/Huvkc5+C4bnolHBL2UVJWkAB7W8Y53rRw6sLWyy9b0XAxHLmfCKbzXrmKG7AF+aBO9apmpvdFwlXqKlVVkihTAljPrVTQMcO2T7v/x+5tp1bp7RYeSbmuzpMk80IBnMb7ADPbkJU2Pf9ygLuBZ14rHdLKRPtot4sD5TesZywIhq38qqKJUZiXsOjWkSTGW4vfY0k3ciA/NA9ZEQu7+MFG4Rr8P98UABjmG4vLXz03+3f1elHp6H5aF8zvzaPJibwmbgD+k1FzQ/w1xjnqJ4IiPQaSukhd8RnxufU4WZVyxbHDN9s5QtvU9vVqVHen3quyFKRYgRKBiTiOKDBJT9u78xLGF8XudENlQks9H2NeR9mO9+0DlQG2M6/3Y4b8Zv88CM7RQvBtZU1N8ILJ5Xd1oksrF0x4cjBIAq8BCAuf7mBK9hbGNDgB+6x9XEj/ilR5T9ht/N/PR0ESNtGdZEMMc2SnYl0yyHOMSKTRekDhIXwQH97fqvdd9uTL2D9PWpcbINsGxiAQSv4Umf3GQVryoVc+ApzMArjUDulXb5t3llEmgZhCBIhI26rdRaGwBOWZ2Oen9+lTByGMeuAofKZSz/chMZCOZYdiJFesvvj0rGunJX1eEDliwJwxvygm0znw3GvlL5oUhQ+VTFGuDZOgImiQhDIO5ElNu6qwxgB9f/TOfsnb8UgE8PCrLDTnAEaJETXHJ+Bq8ZnJvVEwVu5Te3/W+OL54VqKCaM/+8p7ci2DDhiNmBWBfzzGhziGFLDmwVoiFEiSa3Nlgjg2rf8OObyW7nbPx8gdTW078pep1kHmIpliGnnDKHIsQ5R
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漫漫人生</category>
      </categories>
      <tags>
        <tag>人生思考</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie工具类</title>
    <url>/archives/b1e39e23.html</url>
    <content><![CDATA[<h1 id="CookieUtils"><a href="#CookieUtils" class="headerlink" title="CookieUtils "></a>CookieUtils <a id="more"></a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Gustave</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到Cookie的值, 不编码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookieValue</span><span class="params">(HttpServletRequest request, String cookieName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getCookieValue(request, cookieName, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到Cookie的值,</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookieValue</span><span class="params">(HttpServletRequest request, String cookieName, <span class="keyword">boolean</span> isDecoder)</span> </span>&#123;</span><br><span class="line">        Cookie[] cookieList = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookieList == <span class="keyword">null</span> || cookieName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String retValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookieList.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookieList[i].getName().equals(cookieName)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isDecoder) &#123;</span><br><span class="line">                        retValue = URLDecoder.decode(cookieList[i].getValue(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        retValue = cookieList[i].getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到Cookie的值,</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookieValue</span><span class="params">(HttpServletRequest request, String cookieName, String encodeString)</span> </span>&#123;</span><br><span class="line">        Cookie[] cookieList = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookieList == <span class="keyword">null</span> || cookieName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String retValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookieList.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookieList[i].getName().equals(cookieName)) &#123;</span><br><span class="line">                    retValue = URLDecoder.decode(cookieList[i].getValue(), encodeString);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String cookieValue)</span> </span>&#123;</span><br><span class="line">        setCookie(request, response, cookieName, cookieValue, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Cookie的值 在指定时间内生效,但不编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String cookieValue, <span class="keyword">int</span> cookieMaxage)</span> </span>&#123;</span><br><span class="line">        setCookie(request, response, cookieName, cookieValue, cookieMaxage, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Cookie的值 不设置生效时间,但编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String cookieValue, <span class="keyword">boolean</span> isEncode)</span> </span>&#123;</span><br><span class="line">        setCookie(request, response, cookieName, cookieValue, -<span class="number">1</span>, isEncode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Cookie的值 在指定时间内生效, 编码参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String cookieValue, <span class="keyword">int</span> cookieMaxage, <span class="keyword">boolean</span> isEncode)</span> </span>&#123;</span><br><span class="line">        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String cookieName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String cookieValue, <span class="keyword">int</span> cookieMaxage, String encodeString)</span> </span>&#123;</span><br><span class="line">        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Cookie带cookie域名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String cookieName)</span> </span>&#123;</span><br><span class="line">        doSetCookie(request, response, cookieName, <span class="string">""</span>, -<span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Cookie的值，并使其在指定时间内生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieMaxage cookie生效的最大秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSetCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          String cookieName, String cookieValue, <span class="keyword">int</span> cookieMaxage, <span class="keyword">boolean</span> isEncode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookieValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cookieValue = <span class="string">""</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isEncode) &#123;</span><br><span class="line">                cookieValue = URLEncoder.encode(cookieValue, <span class="string">"utf-8"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(cookieName, cookieValue);</span><br><span class="line">            <span class="keyword">if</span> (cookieMaxage &gt; <span class="number">0</span>)</span><br><span class="line">                cookie.setMaxAge(cookieMaxage);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != request) &#123;<span class="comment">// 设置域名的cookie</span></span><br><span class="line">                String domainName = getDomainName(request);</span><br><span class="line"><span class="comment">//                System.out.println(domainName);</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"localhost"</span>.equals(domainName)) &#123;</span><br><span class="line">                    cookie.setDomain(domainName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Cookie的值，并使其在指定时间内生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookieMaxage cookie生效的最大秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSetCookie</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          String cookieName, String cookieValue, <span class="keyword">int</span> cookieMaxage, String encodeString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookieValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cookieValue = <span class="string">""</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cookieValue = URLEncoder.encode(cookieValue, encodeString);</span><br><span class="line">            &#125;</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(cookieName, cookieValue);</span><br><span class="line">            <span class="keyword">if</span> (cookieMaxage &gt; <span class="number">0</span>)</span><br><span class="line">                cookie.setMaxAge(cookieMaxage);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != request) &#123;<span class="comment">// 设置域名的cookie</span></span><br><span class="line">                String domainName = getDomainName(request);</span><br><span class="line"><span class="comment">//                System.out.println(domainName);</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"localhost"</span>.equals(domainName)) &#123;</span><br><span class="line">                    cookie.setDomain(domainName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到cookie的域名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">getDomainName</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String domainName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String serverName = request.getRequestURL().toString();</span><br><span class="line">        <span class="keyword">if</span> (serverName == <span class="keyword">null</span> || serverName.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            domainName = <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            serverName = serverName.toLowerCase();</span><br><span class="line">            serverName = serverName.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> end = serverName.indexOf(<span class="string">"/"</span>);</span><br><span class="line">            serverName = serverName.substring(<span class="number">0</span>, end);</span><br><span class="line">            <span class="keyword">final</span> String[] domains = serverName.split(<span class="string">"\\."</span>);</span><br><span class="line">            <span class="keyword">int</span> len = domains.length;</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// www.xxx.com.cn</span></span><br><span class="line">                domainName = <span class="string">"."</span> + domains[len - <span class="number">3</span>] + <span class="string">"."</span> + domains[len - <span class="number">2</span>] + <span class="string">"."</span> + domains[len - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len &lt;= <span class="number">3</span> &amp;&amp; len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// xxx.com or xxx.cn</span></span><br><span class="line">                domainName = <span class="string">"."</span> + domains[len - <span class="number">2</span>] + <span class="string">"."</span> + domains[len - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                domainName = serverName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (domainName != <span class="keyword">null</span> &amp;&amp; domainName.indexOf(<span class="string">":"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String[] ary = domainName.split(<span class="string">"\\:"</span>);</span><br><span class="line">            domainName = ary[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> domainName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代码优化</title>
    <url>/archives/a2337e7d.html</url>
    <content><![CDATA[<h1 id="尽量指定类、方法的final修饰符"><a href="#尽量指定类、方法的final修饰符" class="headerlink" title="尽量指定类、方法的final修饰符"></a>尽量指定类、方法的final修饰符</h1><p>带有final修饰符的类是不可派生的。在Java核心API中，有许多应用final的例子，例如java.lang.String，整个类都是final的。为类指定final修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写。如果指定了一个类为final，则该类所有的方法都是final的。Java编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大，具体参见Java运行期优化。此举能够使性能平均提高50%。</p>
<h1 id="尽可能使用局部变量"><a href="#尽可能使用局部变量" class="headerlink" title="尽可能使用局部变量"></a>尽可能使用局部变量</h1><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中，速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</p>
<h1 id="及时关闭流"><a href="#及时关闭流" class="headerlink" title="及时关闭流"></a>及时关闭流</h1><p>Java编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。</p>
<h1 id="尽量减少变量的重复计算"><a href="#尽量减少变量的重复计算" class="headerlink" title="尽量减少变量的重复计算"></a>尽量减少变量的重复计算</h1><p>明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。所以例如下面的操作：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i;i &lt; list.size();i++)</span><br><span class="line">    &#123;...&#125;</span><br><span class="line">修改为:</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i,length = list.size;i&lt;length;i++)</span><br><span class="line">    &#123;...&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种写法，在list的size很大的时候，可以减少开销</p>
<h1 id="尽量使用懒加载，即在需要的时候创建"><a href="#尽量使用懒加载，即在需要的时候创建" class="headerlink" title="尽量使用懒加载，即在需要的时候创建"></a>尽量使用懒加载，即在需要的时候创建</h1><h1 id="慎用异常"><a href="#慎用异常" class="headerlink" title="慎用异常"></a>慎用异常</h1><ol>
<li>只在必要使用异常的地方才使用异常，不要用异常去控制程序的流程<br>谨慎地使用异常，异常捕获的代价非常高昂，异常使用过多会严重影响程序的性能。如果在程序中能够用if语句和Boolean变量来进行逻辑判断，那么尽量减少异常的使用，从而避免不必要的异常捕获和处理。比如下面这段经典的程序：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useExceptionsForFlowControl</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">try</span> &#123;  </span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">    increaseCount();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (MaximumCountReachedException ex) &#123;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">//Continue execution  </span></span><br><span class="line">&#125;  </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increaseCount</span><span class="params">()</span> <span class="keyword">throws</span> MaximumCountReachedException </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (count &gt;= <span class="number">5000</span>)  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MaximumCountReachedException();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上边的useExceptionsForFlowControl()用一个无限循环来增加count直到抛出异常，这种做法并没有说让代码不易读，而是使得程序执行效率降低。</p>
<ol start="2">
<li>切忌使用空catch块<br>在捕获了异常之后什么都不做，相当于忽略了这个异常。千万不要使用空的catch块，空的catch块意味着你在程序中隐藏了错误和异常，并且很可能导致程序出现不可控的执行结果。如果你非常肯定捕获到的异常不会以任何方式对程序造成影响，最好用Log日志将该异常进行记录，以便日后方便更新和维护。</li>
<li>检查异常和非检查异常的选择<br>一旦你决定抛出异常，你就要决定抛出什么异常。这里面的主要问题就是抛出检查异常还是非检查异常。<br>检查异常导致了太多的try…catch代码，可能有很多检查异常对开发人员来说是无法合理地进行处理的，比如SQLException，而开发人员却不得不去进行try…catch，这样就会导致经常出现这样一种情况：逻辑代码只有很少的几行，而进行异常捕获和处理的代码却有很多行。这样不仅导致逻辑代码阅读起来晦涩难懂，而且降低了程序的性能。<br>我个人建议尽量避免检查异常的使用，如果确实该异常情况的出现很普遍，需要提醒调用者注意处理的话，就使用检查异常；否则使用非检查异常。<br>因此，在一般情况下，我觉得尽量将检查异常转变为非检查异常交给上层处理。</li>
<li>注意catch块的顺序<br>不要把上层类的异常放在最前面的catch块。比如下面这段代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> ch = inputStream.read();</span><br><span class="line">        System.out.println(<span class="string">"aaa"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"step1"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">　　      System.out.println(<span class="string">"io exception"</span>);　　      </span><br><span class="line">         <span class="keyword">return</span> <span class="string">"step2"</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"file not found"</span>);　　　　      </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"step3"</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"finally block"</span>);</span><br><span class="line">        <span class="comment">//return "finally";</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>第二个catch的FileNotFoundException将永远不会被捕获到，因为FileNotFoundException是IOException的子类。</p>
<ol start="5">
<li>不要将提供给用户看的信息放在异常信息里<br>比如下面这段代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String user = <span class="keyword">null</span>;</span><br><span class="line">            String pwd = <span class="keyword">null</span>;</span><br><span class="line">            login(user,pwd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String user,String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>||pwd==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"用户名或者密码为空"</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>展示给用户错误提示信息最好不要跟程序混淆一起，比较好的方式是将所有错误提示信息放在一个配置文件中统一管理。</p>
<ol start="6">
<li>避免多次在日志信息中记录同一个异常<br>只在异常最开始发生的地方进行日志信息记录。很多情况下异常都是层层向上跑出的，如果在每次向上抛出的时候，都Log到日志系统中，则会导致无从查找异常发生的根源。</li>
<li>异常处理尽量放在高层进行<br>尽量将异常统一抛给上层调用者，由上层调用者统一之时如何进行处理。如果在每个出现异常的地方都直接进行处理，会导致程序异常处理流程混乱，不利于后期维护和异常错误排查。由上层统一进行处理会使得整个程序的流程清晰易懂。</li>
<li>在finally中释放资源<br>如果有使用文件读取、网络操作以及数据库操作等，记得在finally中释放资源。这样不仅会使得程序占用更少的资源，也会避免不必要的由于资源未释放而发生的异常情况。</li>
</ol>
<h1 id="当复制大量数据时，使用System-arraycopy-命令"><a href="#当复制大量数据时，使用System-arraycopy-命令" class="headerlink" title="当复制大量数据时，使用System.arraycopy()命令"></a>当复制大量数据时，使用<code>System.arraycopy()</code>命令</h1><h1 id="乘法和除法使用移位操作"><a href="#乘法和除法使用移位操作" class="headerlink" title="乘法和除法使用移位操作"></a>乘法和除法使用移位操作</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i ++)&#123;</span><br><span class="line">    a = i * <span class="number">8</span>;</span><br><span class="line">    b = i / <span class="number">16</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i -= <span class="number">0</span>;i &lt; <span class="number">100</span>; i ++)&#123;</span><br><span class="line">    a = i &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    b = i &gt;&gt; <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移位操作会降低可读性，所以最好带上注释</p>
<h1 id="循环内不要不断创建对象引用"><a href="#循环内不要不断创建对象引用" class="headerlink" title="循环内不要不断创建对象引用"></a>循环内不要不断创建对象引用</h1><h1 id="尽量在合适的场合使用单例"><a href="#尽量在合适的场合使用单例" class="headerlink" title="尽量在合适的场合使用单例"></a>尽量在合适的场合使用单例</h1><p>使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：</p>
<ul>
<li>控制资源的使用，通过线程同步来控制资源的并发访问</li>
<li>控制实例的产生，以达到节约资源的目的</li>
<li>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</li>
</ul>
<h1 id="ArrayList等实现了RandomAccess接口的集合，应当使用普通for循环而不是foreach循环"><a href="#ArrayList等实现了RandomAccess接口的集合，应当使用普通for循环而不是foreach循环" class="headerlink" title="ArrayList等实现了RandomAccess接口的集合，应当使用普通for循环而不是foreach循环"></a>ArrayList等实现了RandomAccess接口的集合，应当使用普通for循环而不是foreach循环</h1><p>这是JDK推荐给用户的。JDK API对于RandomAccess接口的解释是：实现RandomAccess接口用来表明其支持快速随机访问，此接口的主要目的是允许一般的算法更改其行为，从而将其应用到随机或连续访问列表时能提供良好的性能。实际经验表明，实现RandomAccess接口的类实例，假如是随机访问的，使用普通for循环效率将高于使用foreach循环；反过来，如果是顺序访问的，则使用Iterator会效率更高。可以使用类似如下的代码作判断：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Iterator&lt;?&gt; iterator = list.iterable();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;iterator.next()&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>自己的测试<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRandomAccess</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span> ; i++) &#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        obj = list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> l1 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(l1-l);</span><br><span class="line">    <span class="keyword">for</span> (Integer x : list) &#123;</span><br><span class="line">        obj = x;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(System.currentTimeMillis() - l1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="../images/快速随机访问for循环.jpg" alt="结果"></p>
<h1 id="使用同步代码块代替同步方法"><a href="#使用同步代码块代替同步方法" class="headerlink" title="使用同步代码块代替同步方法"></a>使用同步代码块代替同步方法</h1><p>这点在多线程模块中的synchronized锁方法块一文中已经讲得很清楚了，除非能确定一整个方法都是需要进行同步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，影响了代码执行效率。</p>
<h1 id="程序运行过程避免使用反射"><a href="#程序运行过程避免使用反射" class="headerlink" title="程序运行过程避免使用反射"></a>程序运行过程避免使用反射</h1><p>关于，请参见反射。反射是Java提供给用户一个很强大的功能，功能强大往往意味着效率不高。不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是Method的invoke方法，如果确实有必要，一种建议性的做法是将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存—-用户只关心和对端交互的时候获取最快的响应速度，并不关心对端的项目启动花多久时间。</p>
<h1 id="使用带缓冲的输入输出流进行IO操作"><a href="#使用带缓冲的输入输出流进行IO操作" class="headerlink" title="使用带缓冲的输入输出流进行IO操作"></a>使用带缓冲的输入输出流进行IO操作</h1><p>带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升IO效率</p>
<h1 id="公用的集合类中不使用的数据一定要及时remove掉"><a href="#公用的集合类中不使用的数据一定要及时remove掉" class="headerlink" title="公用的集合类中不使用的数据一定要及时remove掉"></a>公用的集合类中不使用的数据一定要及时remove掉</h1><p>如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。</p>
<h1 id="把一个基本数据类型转为字符串，基本数据类型-toString-是最快的方式、String-valueOf-数据-次之、数据-””最慢"><a href="#把一个基本数据类型转为字符串，基本数据类型-toString-是最快的方式、String-valueOf-数据-次之、数据-””最慢" class="headerlink" title="把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢"></a>把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> loopTime = <span class="number">50000</span>;</span><br><span class="line">    Integer i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; loopTime; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        String str = String.valueOf(i);</span><br><span class="line">    &#125;    </span><br><span class="line">    System.out.println(<span class="string">"String.valueOf()："</span> + (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; loopTime; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        String str = i.toString();</span><br><span class="line">    &#125;    </span><br><span class="line">    System.out.println(<span class="string">"Integer.toString()："</span> + (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; loopTime; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        String str = i + <span class="string">""</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    System.out.println(<span class="string">"i + \"\"："</span> + (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.valueOf()：<span class="number">11</span>ms</span><br><span class="line">Integer.toString()：<span class="number">5</span>ms</span><br><span class="line">i + <span class="string">""</span>：<span class="number">25</span>ms</span><br></pre></td></tr></table></figure></p>
<p>所以以后遇到把一个基本数据类型转为String的时候，优先考虑使用toString()方法。至于为什么，很简单：</p>
<ul>
<li>String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断</li>
<li>Integer.toString()方法就不说了，直接调用了</li>
<li>i + “”底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串<br>三者对比下来，明显是2最快、1次之、3最慢</li>
</ul>
<h1 id="对资源的close-建议分开操作"><a href="#对资源的close-建议分开操作" class="headerlink" title="对资源的close()建议分开操作"></a>对资源的close()建议分开操作</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改为<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>虽然有些麻烦，却能避免资源泄露。我们想，如果没有修改过的代码，万一XXX.close()抛异常了，那么就进入了catch块中了，YYY.close()不会执行，YYY这块资源就不会回收了，一直占用着，这样的代码一多，是可能引起资源句柄泄露的。而改为下面的写法之后，就保证了无论如何XXX和YYY都会被close掉</p>
<h1 id="切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定"><a href="#切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定" class="headerlink" title="切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定"></a>切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定</h1><h1 id="推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a-equals-b-，有空指针异常的风险"><a href="#推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a-equals-b-，有空指针异常的风险" class="headerlink" title="推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a.equals(b)，有空指针异常的风险"></a>推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a.equals(b)，有空指针异常的风险</h1><h1 id="对于ThreadLocal使用前或者使用后一定要先remove"><a href="#对于ThreadLocal使用前或者使用后一定要先remove" class="headerlink" title="对于ThreadLocal使用前或者使用后一定要先remove"></a>对于ThreadLocal使用前或者使用后一定要先remove</h1><p>当前基本所有的项目都使用了线程池技术，这非常好，可以动态配置线程数、可以重用线程。<br>然而，如果你在项目中使用到了ThreadLocal，一定要记得使用前或者使用后remove一下。这是因为上面提到了线程池技术做的是一个线程重用，这意味着代码运行过程中，一条线程使用完毕，并不会被销毁而是等待下一次的使用。我们看一下Thread类中，持有ThreadLocal.ThreadLocalMap的引用：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment"> * by the ThreadLocal class. */</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p>
<p>线程不销毁意味着上条线程set的ThreadLocal.ThreadLocalMap中的数据依然存在，那么在下一条线程重用这个Thread的时候，很可能get到的是上条线程set的数据而不是自己想要的内容。<br>这个问题非常隐晦，一旦出现这个原因导致的错误，没有相关经验或者没有扎实的基础非常难发现这个问题，因此在写代码的时候就要注意这一点，这将给你后续减少很多的工作量。</p>
<h1 id="不捕获Java类库中定义的继承自RuntimeException的运行时异常类"><a href="#不捕获Java类库中定义的继承自RuntimeException的运行时异常类" class="headerlink" title="不捕获Java类库中定义的继承自RuntimeException的运行时异常类"></a>不捕获Java类库中定义的继承自RuntimeException的运行时异常类</h1><ul>
<li>ArithmeticException可以通过判断除数是否为空来规避</li>
<li>NullPointerException可以通过判断对象是否为空来规避</li>
<li>IndexOutOfBoundsException可以通过判断数组/字符串长度来规避</li>
<li>ClassCastException可以通过instanceof关键字来规避</li>
<li>ConcurrentModificationException可以使用迭代器来规避</li>
</ul>
<h1 id="避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed-导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数"><a href="#避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed-导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数" class="headerlink" title="避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数"></a>避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数</h1><p>解释一下竞争同一个seed导致性能下降的原因，比如，看一下Random类的nextInt()方法实现：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(<span class="number">32</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用了next(int bits)方法，这是一个受保护的方法：</p>
<p>复制代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> bits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> oldseed, nextseed;</span><br><span class="line">    AtomicLong seed = <span class="keyword">this</span>.seed;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        oldseed = seed.get();</span><br><span class="line">        nextseed = (oldseed * multiplier + addend) &amp; mask;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!seed.compareAndSet(oldseed, nextseed));</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(nextseed &gt;&gt;&gt; (<span class="number">48</span> - bits));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>复制代码<br>而这边的seed是一个全局变量：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The internal state associated with this pseudorandom number generator.</span></span><br><span class="line"><span class="comment"> * (The specs for the methods in this class describe the ongoing</span></span><br><span class="line"><span class="comment"> * computation of this value.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicLong seed;</span><br></pre></td></tr></table></figure></p>
<p>多个线程同时获取随机数的时候，会竞争同一个seed，导致了效率的降低。</p>
<p>转自：<a href="http://www.cnblogs.com/xrq730/p/4865416.html" target="_blank" rel="noopener">五月的仓颉</a></p>
<ul>
<li>谨此祭奠过去N多年来逃避现实的自己</li>
<li>永远对这个世界保持好奇心！</li>
<li>痛苦时分析其产生的根源，去改正能改正的己过，以技术角度为突破口走出来，切莫陷入痛苦的漩涡无法自拔</li>
<li>番茄使人充实，也是驱使你前进的本源！</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>代码优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernates(k8s)</title>
    <url>/archives/5c5aaca6.html</url>
    <content><![CDATA[<h1 id="搭建k8s集群"><a href="#搭建k8s集群" class="headerlink" title="搭建k8s集群"></a>搭建k8s集群</h1><h2 id="主机名映射"><a href="#主机名映射" class="headerlink" title="主机名映射"></a>主机名映射</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">192.168.213.130   k8s-master</span><br><span class="line">192.168.213.131   k8s-slave</span><br></pre></td></tr></table></figure>
<p>主机名和IP加入到hostname<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/hostname</span><br></pre></td></tr></table></figure></p>
<h2 id="在所有节点上安装kubeadm，这里使用阿里云的系统和kubernetes的源"><a href="#在所有节点上安装kubeadm，这里使用阿里云的系统和kubernetes的源" class="headerlink" title="在所有节点上安装kubeadm，这里使用阿里云的系统和kubernetes的源"></a>在所有节点上安装kubeadm，这里使用阿里云的系统和kubernetes的源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@k8s-master:~# cat /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main</span><br></pre></td></tr></table></figure>
<h2 id="更新源并安装kubeadm-kubectl-kubelet软件包-安装docker-io-非docker-ce"><a href="#更新源并安装kubeadm-kubectl-kubelet软件包-安装docker-io-非docker-ce" class="headerlink" title="更新源并安装kubeadm, kubectl, kubelet软件包;安装docker.io(非docker-ce)"></a>更新源并安装kubeadm, kubectl, kubelet软件包;安装docker.io(非docker-ce)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update -y &amp;&amp; apt-get install -y kubelet kubeadm kubectl --allow-unauthenticated</span><br><span class="line"></span><br><span class="line">apt-get install docker.io -y</span><br></pre></td></tr></table></figure>
<h2 id="使用kubeadmin初始化master节点，这里有两个坑！！"><a href="#使用kubeadmin初始化master节点，这里有两个坑！！" class="headerlink" title="使用kubeadmin初始化master节点，这里有两个坑！！"></a>使用kubeadmin初始化master节点，这里有两个坑！！</h2><ul>
<li><p>坑1、使用网络上常见的方式，那么如果没有用vpn翻墙，那么则会卡住，无法下载，幸好v1.13.0版本无需翻墙，指定版本即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.13.0 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--apiserver-advertise-address=192.168.213.130</span><br></pre></td></tr></table></figure>
</li>
<li><p>坑2、需要禁用swap<br>修改/etc/fstab</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@k8s-master:~# cat /etc/fstab </span><br><span class="line"># /etc/fstab: static file system information.</span><br><span class="line">#</span><br><span class="line"># Use &apos;blkid&apos; to print the universally unique identifier for a</span><br><span class="line"># device; this may be used with UUID= as a more robust way to name devices</span><br><span class="line"># that works even if disks are added and removed. See fstab(5).</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line">/dev/mapper/ubuntugustave--vg-root /               ext4    errors=remount-ro 0       1</span><br><span class="line"># /boot was on /dev/sda1 during installation</span><br><span class="line"># UUID=340c3d0f-eb29-4512-83ca-ef6ba9d8577f /boot           ext2    defaults        0       2</span><br><span class="line"># /dev/mapper/ubuntugustave--vg-swap_1 none            swap    sw              0       0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>修改之后执行<code>swapoff -a</code><br>如果还不行 <code>kubeadm reset</code></p>
<h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@k8s-master:~# kubeadm init --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.13.0 --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.213.130</span><br><span class="line">[init] Using Kubernetes version: v1.13.0</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &apos;kubeadm config images pull&apos;</span><br><span class="line"></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.213.130 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.213.130 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.213.130]</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 28.005554 seconds</span><br><span class="line">[uploadconfig] storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.13&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[patchnode] Uploading the CRI Socket information &quot;/var/run/dockershim.sock&quot; to the Node API object &quot;k8s-master&quot; as an annotation</span><br><span class="line">[mark-control-plane] Marking the node k8s-master as control-plane by adding the label &quot;node-role.kubernetes.io/master=&apos;&apos;&quot;</span><br><span class="line">[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: 3lnb74.tku3cdu5bagn0air</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstraptoken] creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes master has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now join any number of machines by running the following on each node</span><br><span class="line">as root:</span><br><span class="line"></span><br><span class="line">  kubeadm join 192.168.213.130:6443 --token 3lnb74.tku3cdu5bagn0air --discovery-token-ca-cert-hash sha256:2ba48ce20ebefcfb6d07ddf01141590eb81cad5de5c0406f08f41faab26a8696</span><br></pre></td></tr></table></figure>
<ul>
<li>按图索骥,按指示的方式配置k8s就行了,其中最后显示的kubeadm join语句包含了节点添加的token等等<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装网络插件canal"><a href="#安装网络插件canal" class="headerlink" title="安装网络插件canal"></a>安装网络插件canal</h2><ul>
<li>执行如下两条命令即可<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/canal/rbac.yaml</span><br><span class="line"> </span><br><span class="line">clusterrole.rbac.authorization.k8s.io &quot;calico&quot; created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io &quot;flannel&quot; created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io &quot;canal-flannel&quot; created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io &quot;canal-calico&quot; created</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/canal/canal.yaml</span><br><span class="line"> </span><br><span class="line">configmap &quot;canal-config&quot; created</span><br><span class="line">daemonset.extensions &quot;canal&quot; created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io &quot;felixconfigurations.crd.projectcalico.org&quot; created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io &quot;bgpconfigurations.crd.projectcalico.org&quot; created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io &quot;ippools.crd.projectcalico.org&quot; created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io &quot;clusterinformations.crd.projectcalico.org&quot; created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io &quot;globalnetworkpolicies.crd.projectcalico.org&quot; created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io &quot;networkpolicies.crd.projectcalico.org&quot; created</span><br><span class="line">serviceaccount &quot;canal&quot; created</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="执行如下命令，可以就可以查看canal的安装状态了"><a href="#执行如下命令，可以就可以查看canal的安装状态了" class="headerlink" title="执行如下命令，可以就可以查看canal的安装状态了"></a>执行如下命令，可以就可以查看canal的安装状态了</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@k8s-master:~# kubectl get pod -n kube-system -o wide</span><br><span class="line">NAME                                 READY   STATUS    RESTARTS   AGE   IP                NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">canal-6f6kk                          3/3     Running   0          58m   192.168.213.130   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">canal-rgb57                          3/3     Running   0          50m   192.168.213.131   k8s-slave    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-78d4cf999f-hp7cv             1/1     Running   0          64m   10.244.0.3        k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-78d4cf999f-p4r7w             1/1     Running   0          64m   10.244.0.2        k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-k8s-master                      1/1     Running   0          69m   192.168.213.130   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-k8s-master            1/1     Running   0          68m   192.168.213.130   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-k8s-master   1/1     Running   0          69m   192.168.213.130   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-fknxh                     1/1     Running   0          50m   192.168.213.131   k8s-slave    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-pvt8w                     1/1     Running   0          69m   192.168.213.130   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-k8s-master            1/1     Running   0          69m   192.168.213.130   k8s-master   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>
<h2 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
<h1 id="slave节点在集群中的操作"><a href="#slave节点在集群中的操作" class="headerlink" title="slave节点在集群中的操作"></a>slave节点在集群中的操作</h1><h2 id="增加新的Node节点到你的集群的命令如下："><a href="#增加新的Node节点到你的集群的命令如下：" class="headerlink" title="增加新的Node节点到你的集群的命令如下："></a>增加新的Node节点到你的集群的命令如下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.213.130:6443 --token 3lnb74.tku3cdu5bagn0air --discovery-token-ca-cert-hash sha256:2ba48ce20ebefcfb6d07ddf01141590eb81cad5de5c0406f08f41faab26a8696</span><br></pre></td></tr></table></figure>
<ul>
<li><p>token，一般token两天就过期了，如果过期了你需要重新创建（查看token命令是kubeadm token list，创建token命令是kubeadm token create)，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@k8s-master:~# kubeadm token list</span><br><span class="line">TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class="line">3lnb74.tku3cdu5bagn0air   22h       2019-01-08T14:59:55+08:00   authentication,signing   The default bootstrap token generated by &apos;kubeadm init&apos;.   system:bootstrappers:kubeadm:default-node-token</span><br></pre></td></tr></table></figure>
</li>
<li><p>–discovery-token-ca-cert-hash，通过如下命令就可以得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@k8s-master:~# openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed &apos;s/^.* //&apos;</span><br><span class="line">2ba48ce20ebefcfb6d07ddf01141590eb81cad5de5c0406f08f41faab26a8696</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="删除slave节点"><a href="#删除slave节点" class="headerlink" title="删除slave节点"></a>删除slave节点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node &lt;node name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>Kubernates</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/archives/9494c549.html</url>
    <content><![CDATA[<p>time flies</p>
<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>最近略忙，都没时间搞了，冒个泡<br>我的自信和自负皆源自于此，如此一直下去就可以了<br>即将更新，redis！！</p>
<p>redis连踩两天坑，终于搞定！！爽</p>
<h1 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h1><ul>
<li>由于spring版本的问题，踩了几多坑，找到合适的版本<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>biz.paluch.redis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="redis-properties"><a href="#redis-properties" class="headerlink" title="redis.properties"></a>redis.properties</h1><ul>
<li>使用的哨兵模式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis.nodes=192.168.213.129:26379,192.168.213.129:26380,192.168.213.129:26381</span><br><span class="line">redis.masterName=mymaster</span><br><span class="line">redis.password=</span><br><span class="line">redis.maxTotal=10000</span><br><span class="line">redis.maxIdle=100</span><br><span class="line">redis.minIdle=50</span><br><span class="line">redis.timeout=30000</span><br><span class="line">redis.database=6</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="applicationContext-redis-xml"><a href="#applicationContext-redis-xml" class="headerlink" title="applicationContext-redis.xml"></a>applicationContext-redis.xml</h1><ul>
<li>使用lettuce操作redis</li>
<li>更改了序列化方式，可以直接查看redis里的数据<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">	                    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	                    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--连接池配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"defaultLettucePool"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.lettuce.DefaultLettucePool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sentinelConfiguration"</span> <span class="attr">ref</span>=<span class="string">"lettuceSentinelConfiguration"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"genericObjectPoolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--common-pool2线程池配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"genericObjectPoolConfig"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.pool2.impl.GenericObjectPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.minIdle&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxTotal&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 其他相关配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--哨兵集群信息配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lettuceSentinelConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisSentinelConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"master"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.masterName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sentinelHostAndPorts"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.nodes&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lettuceConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注销掉的部分为spring-data-redis2.0以下的版本配置的方式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;constructor-arg name="sentinelConfiguration" ref="lettuceSentinelConfiguration"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"pool"</span> <span class="attr">ref</span>=<span class="string">"defaultLettucePool"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.database&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-data-redis2.0以上建议获取的方式--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"&gt;&lt;/constructor-arg&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--手动设置 key  与 value的序列化方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"keySerializer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"valueSerializer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置jedis模板  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"lettuceConnectionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span> <span class="attr">ref</span>=<span class="string">"keySerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span> <span class="attr">ref</span>=<span class="string">"valueSerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span> <span class="attr">ref</span>=<span class="string">"keySerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span> <span class="attr">ref</span>=<span class="string">"valueSerializer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--也可以StringRedisTemplate  专注于String的操作  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringRedisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.StringRedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="connectionFactory" ref="jedisConnectionFactory"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在StringRedisTemplate与redisTemplate不同,可以直接造构造器中传入ConnectionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"lettuceConnectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span> <span class="attr">ref</span>=<span class="string">"keySerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span> <span class="attr">ref</span>=<span class="string">"valueSerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span> <span class="attr">ref</span>=<span class="string">"keySerializer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span> <span class="attr">ref</span>=<span class="string">"valueSerializer"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Redis操作命令"><a href="#Redis操作命令" class="headerlink" title="Redis操作命令"></a>Redis操作命令</h1><h2 id="连接操作相关的命令"><a href="#连接操作相关的命令" class="headerlink" title="连接操作相关的命令"></a>连接操作相关的命令</h2><ul>
<li>ping：测试连接是否存活如果正常会返回 pong</li>
<li>echo：打印</li>
<li>select：切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值</li>
<li>quit：关闭连接（connection）</li>
<li>auth：简单密码认证<h2 id="服务端相关命令"><a href="#服务端相关命令" class="headerlink" title="服务端相关命令"></a>服务端相关命令</h2></li>
<li>time：返回当前服务器时间</li>
<li>client list: 返回所有连接到服务器的客户端信息和统计数据 参见 <a href="http://redisdoc.com/server/client_list.html" target="_blank" rel="noopener">http://redisdoc.com/server/client_list.html</a></li>
<li>client kill ip:port：关闭地址为 ip:port 的客户端</li>
<li>save：将数据同步保存到磁盘</li>
<li>bgsave：将数据异步保存到磁盘</li>
<li>lastsave：返回上次成功将数据保存到磁盘的Unix时戳</li>
<li>shundown：将数据同步保存到磁盘，然后关闭服务</li>
<li>info：提供服务器的信息和统计</li>
<li>config resetstat：重置 info 命令中的某些统计数据</li>
<li>config get：获取配置文件信息</li>
<li>config set：动态地调整 Redis 服务器的配置(configuration)而无须重启，可以修改的配置参数可以使用命令 CONFIG GET * 来列出</li>
<li>config rewrite：Redis 服务器时所指定的 redis.conf 文件进行改写</li>
<li>monitor：实时转储收到的请求</li>
<li>slaveof：改变复制策略设置<h2 id="发布订阅相关命令"><a href="#发布订阅相关命令" class="headerlink" title="发布订阅相关命令"></a>发布订阅相关命令</h2></li>
<li>psubscribe：订阅一个或多个符合给定模式的频道 例如 psubscribe news.<em> tweet.</em></li>
<li>publish：将信息 message 发送到指定的频道 channel 例如 publish msg “good morning”</li>
<li>pubsub channels：列出当前的活跃频道 例如 PUBSUB CHANNELS news.i*</li>
<li>pubsub numsub：返回给定频道的订阅者数量 例如 PUBSUB NUMSUB news.it news.internet news.sport news.music</li>
<li>pubsub numpat：返回客户端订阅的所有模式的数量总和</li>
<li>punsubscribe：指示客户端退订所有给定模式。</li>
<li>subscribe：订阅给定的一个或多个频道的信息。例如 subscribe msg chat_room</li>
<li>unsubscribe：指示客户端退订给定的频道。<h2 id="对-KEY-操作的命令"><a href="#对-KEY-操作的命令" class="headerlink" title="对 KEY 操作的命令"></a>对 KEY 操作的命令</h2></li>
<li>exists(key)：确认一个 key 是否存在</li>
<li>del(key)：删除一个 key</li>
<li>type(key)：返回值的类型</li>
<li>keys(pattern)：返回满足给定 pattern 的所有 key</li>
<li>randomkey：随机返回 key 空间的一个</li>
<li>keyrename(oldname, newname)：重命名 key</li>
<li>dbsize：返回当前数据库中 key 的数目</li>
<li>expire：设定一个 key 的活动时间（s）</li>
<li>ttl：获得一个 key 的活动时间</li>
<li>move(key, dbindex)：移动当前数据库中的 key 到 dbindex 数据库</li>
<li>flushdb：删除当前选择数据库中的所有 key</li>
<li>flushall：删除所有数据库中的所有 key<h2 id="对-String-操作的命令"><a href="#对-String-操作的命令" class="headerlink" title="对 String 操作的命令"></a>对 String 操作的命令</h2></li>
<li>set(key, value)：给数据库中名称为 key 的 string 赋予值 value</li>
<li>get(key)：返回数据库中名称为 key 的 string 的 value</li>
<li>getset(key, value)：给名称为 key 的 string 赋予上一次的 value</li>
<li>mget(key1, key2,…, key N)：返回库中多个 string 的 value</li>
<li>setnx(key, value)：添加 string，名称为 key，值为 value</li>
<li>setex(key, time, value)：向库中添加 string，设定过期时间 time</li>
<li>mset(key N, value N)：批量设置多个 string 的值</li>
<li>msetnx(key N, value N)：如果所有名称为 key i 的 string 都不存在</li>
<li>incr(key)：名称为 key 的 string 增 1 操作</li>
<li>incrby(key, integer)：名称为 key 的 string 增加 integer</li>
<li>decr(key)：名称为 key 的 string 减 1 操作</li>
<li>decrby(key, integer)：名称为 key 的 string 减少 integer</li>
<li>append(key, value)：名称为 key 的 string 的值附加 value</li>
<li>substr(key, start, end)：返回名称为 key 的 string 的 value 的子串<h2 id="对-List-操作的命令"><a href="#对-List-操作的命令" class="headerlink" title="对 List 操作的命令"></a>对 List 操作的命令</h2></li>
<li>rpush(key, value)：在名称为 key 的 list 尾添加一个值为 value 的元素</li>
<li>lpush(key, value)：在名称为 key 的 list 头添加一个值为 value 的元素</li>
<li>llen(key)：返回名称为 key 的 list 的长度</li>
<li>lrange(key, start, end)：返回名称为 key 的 list 中 start 至 end 之间的元素</li>
<li>ltrim(key, start, end)：截取名称为 key 的 list</li>
<li>lindex(key, index)：返回名称为 key 的 list 中 index 位置的元素</li>
<li>lset(key, index, value)：给名称为 key 的 list 中 index 位置的元素赋值</li>
<li>lrem(key, count, value)：删除 count 个 key 的 list 中值为 value 的元素</li>
<li>lpop(key)：返回并删除名称为 key 的 list 中的首元素</li>
<li>rpop(key)：返回并删除名称为 key 的 list 中的尾元素</li>
<li>blpop(key1, key2,… key N, timeout)：lpop 命令的 block 版本。</li>
<li>brpop(key1, key2,… key N, timeout)：rpop 的 block 版本。</li>
<li>rpoplpush(srckey, dstkey)：返回并删除名称为 srckey 的 list 的尾元素，并将该元素添加到名称为 dstkey 的 list 的头部<h2 id="对-Set-操作的命令"><a href="#对-Set-操作的命令" class="headerlink" title="对 Set 操作的命令"></a>对 Set 操作的命令</h2></li>
<li>sadd(key, member)：向名称为 key 的 set 中添加元素 member</li>
<li>srem(key, member) ：删除名称为 key 的 set 中的元素 member</li>
<li>spop(key) ：随机返回并删除名称为 key 的 set 中一个元素</li>
<li>smove(srckey, dstkey, member) ：移到集合元素</li>
<li>scard(key) ：返回名称为 key 的 set 的基数</li>
<li>sismember(key, member) ：member 是否是名称为 key 的 set 的元素</li>
<li>sinter(key1, key2,…key N) ：求交集</li>
<li>sinterstore(dstkey, (keys)) ：求交集并将交集保存到 dstkey 的集合</li>
<li>sunion(key1, (keys)) ：求并集</li>
<li>sunionstore(dstkey, (keys)) ：求并集并将并集保存到 dstkey 的集合</li>
<li>sdiff(key1, (keys)) ：求差集</li>
<li>sdiffstore(dstkey, (keys)) ：求差集并将差集保存到 dstkey 的集合</li>
<li>smembers(key) ：返回名称为 key 的 set 的所有元素</li>
<li>srandmember(key) ：随机返回名称为 key 的 set 的一个元素<h2 id="对-Hash-操作的命令"><a href="#对-Hash-操作的命令" class="headerlink" title="对 Hash 操作的命令"></a>对 Hash 操作的命令</h2></li>
<li>hset(key, field, value)：向名称为 key 的 hash 中添加元素 field</li>
<li>hget(key, field)：返回名称为 key 的 hash 中 field 对应的 value</li>
<li>hmget(key, (fields))：返回名称为 key 的 hash 中 field i 对应的 value</li>
<li>hmset(key, (fields))：向名称为 key 的 hash 中添加元素 field</li>
<li>hincrby(key, field, integer)：将名称为 key 的 hash 中 field 的 value 增加 integer</li>
<li>hexists(key, field)：名称为 key 的 hash 中是否存在键为 field 的域</li>
<li>hdel(key, field)：删除名称为 key 的 hash 中键为 field 的域</li>
<li>hlen(key)：返回名称为 key 的 hash 中元素个数</li>
<li>hkeys(key)：返回名称为 key 的 hash 中所有键</li>
<li>hvals(key)：返回名称为 key 的 hash 中所有键对应的 value</li>
<li>hgetall(key)：返回名称为 key 的 hash 中所有的键（field）及其对应的 value<h2 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h2></li>
<li>ping ：返回 pong</li>
<li>sentinel masters ：列出所有被监视的主服务器，以及这些主服务器的当前状态。</li>
<li>sentinel slaves：列出给定主服务器的所有从服务器，以及这些从服务器的当前状态。</li>
<li>sentinel get-master-addr-by-name：返回给定名字的主服务器的 IP 地址和端口号。如果这个主服务器正在执行故障转移操作，或者针对这个主服务器的故障转移操作已经完成，那么这个命令返回新的主服务器的 IP 地址和端口号。</li>
<li>sentinel reset：重置所有名字和给定模式 pattern 相匹配的主服务器。pattern 参数是一个 Glob 风格的模式 重置操作清楚主服务器目前的所有状态，包括正在执行中的故障转移，并移除目前已经发现和关联的，主服务器的所有从服务器和 Sentinel 。</li>
<li>sentinel failover：当主服务器失效时，在不询问其他 Sentinel 意见的情况下，强制开始一次自动故障迁移（不过发起故障转移的 Sentinel 会向其他 Sentinel 发送一个新的配置，其他 Sentinel 会根据这个配置进行相应的更新）。</li>
</ul>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>密码与素数</title>
    <url>/archives/47e39252.html</url>
    <content><![CDATA[<p>转自: <a href="https://blog.csdn.net/ssmile/article/details/53423201#tt_daymode=1" target="_blank" rel="noopener">密码学</a></p>
<blockquote>
<p>密码学，一向被人们认为门槛很高，特别高端…这也是实际，但是这决不意味着普通人无法了解它的精髓，对于喜欢画圆的人来讲，即便是理解了密码技术背后的哪怕一点理论，也是激动人心的。</p>
</blockquote>
<h1 id="规则的抽象"><a href="#规则的抽象" class="headerlink" title="规则的抽象"></a>规则的抽象</h1><blockquote>
<p>我们小学的时候学习过四则混合运算，后来又将运算的作用范围扩大到了整个实数集 合，再后来又引入了虚数…实际上，这些都不重要，关键点在于运算法则本身。给定一个集合，如果集合内的任意元素在进行四则混合运算(要满足交换率，结 合率…)后的结果仍然在该集合内，如果该集合又是一个有限的集合，那么该集合就可以作为计算机上密码学使用的那个有限的框框。<br>          如何来生成一个有限的集合，方法很多，最显而易见的就是“取模”，即对一个数字做除法然后取余数，比如如果我们将所有的正整数集合内的任意数字对数字5取 模，那么结果无非也就0，1，2，3，4这5个数，不管怎么样结果也跑不出这5个数，就算你用1000和1234相加，结果2234除以5所得的余数4， 也在这个范围内，这就是一个有限的集合，即我们说的那个有限的框框，计算机在这个集合里面做运算刚刚好，对于上一节所举的这个大数而言，任意正整数对它取 模便可以形成一个很大的集合，而计算机密码学的很多运算就是在这类集合内运转的。<br>          到此为止，我们已经知道如何生成一个有限的集合来方便计算机进行任意的运算，但是光这还不够，因为我们仅仅定义了一些运算法则以及一个有限的集合，单位元 我们还没有，对于单位元而言，它可以作为集合内任意元素之间的媒介，事实上它是一个衡量的尺度，比如对于整数加法，单位元就是0，任何一个数字和0相加结 果都是它本身，通过单位元0还可以找到任意一个整数的相反数，与其相加的结果就是单位元，对于乘法而言也类似，乘法的单位元是1，而对应加法相反数的概念 则是倒数，不管是加法的相反数，还是乘法的倒数，都可以被称作逆元。那么对于取模的结果生成的集合内，有没有单位元呢？在回答这个问题之前，必须要声明的 一点就是：对于集合内的任意一个元素，都必须拥有逆元，这样整个集合才可能是闭合的，否则一旦让一个没有逆元的元素参与运算，结果将是不可预知的(跑飞 了…)。理解了这一点之后，我们就可以瞬间理解“为什么在密码学中素数这么重要”，“为什么循环群一定要有生成元”等问题。</p>
</blockquote>
<h1 id="为什么一定要素数"><a href="#为什么一定要素数" class="headerlink" title="为什么一定要素数"></a>为什么一定要素数</h1><blockquote>
<p>在密码学中，特别是公钥密钥学中，我们经常要面对生成一个大素数的问题，可是为什么一定要是素数呢？难道就是因为它数量比较少吗？No！难道因为它的分布不确定吗？No！那到底是为什么？<br>          我们再来看上面那个模5的运算，集合为{0,1,2,3,4}，对于乘法，我们看看每一个元素的逆元分别是什么，显然0的逆元不存在，而 1<em>1%5=1，2</em>3%5=1，3<em>2%5=1，4</em>4%5=1，这样除了0之外，其它的元素都有逆元，而我们注意到，模数5是一个素数…那么我们 把特殊的元素0抛弃，留下{1,2,3,4}作为我们需要的有限集合，是不是可以呢？当然可以！<br>          然而，我上面的论述有点以偏概全了，毕竟这只是一个特例。那么接下来就要证明一下这是一个普遍的结论：如果模数p为一个素数，那么对整个正整数集合取模的 结果去掉0就能生成一个乘法运算闭合的集合，该集合是个素域，集合中的元素数量是p-1(因为去掉了0。Oh yeah，这不就是朴素的欧拉函数吗？)。证明方法很简单。<br>          假设一个集合N={1,2,3,4….p-1}，p为素数，对于其中任意一个元素a，用a去乘整个集合，得到一个新的集合N’= {1<em>a%p,2</em>a%p,3<em>a%p,4</em>a%p…(p-1)<em>a%p}，我们只需要证明这个新的集合中的某一个元素为1即可。对于集合N而言，有 一个条件我们还没有用过，那就是p为素数！这是关键之关键！p为素数意味着集合N中所有的元素和p都是互素的，即它们没有公约数，同时这也意味着，N’中 的元素和p也是互素的(这很容易用反证法证明！)，再看，N集合和N’集合的元素数量是一致的，而N集合包含了到p为止的正整数全集，我没只需要证明N’ 集合中的元素两两不相等，就可以说明N’集合也是到p为止的正整数全集，从而证明N==N’！还是反证法，假设N’即集合中有m</em>a%p==n<em>a%p， 其中m&gt;n，设m=r</em>p+x1，n=s<em>p+x2，则x1%p==x2%p，x1和x2均是小于p的数，可以证明m和n模p同余，由于m和n都小 于p，因此m==n，和假设不符。因此N==N’。<br>          这能说明什么呢？这说明集合N’中包含数字1，也就是说对于任何一个N中的元素a，在集合N中均拥有一个元素和其乘积模p等于1，这就说明集合N中的每一 个元素的逆元都是存在的。这就是模数为素数的重要性质！那么，相反地，如果模数不为素数又如何呢？举一个反例即可，如果模数p=a</em>b，即它的因数是 a，b，并且a和b均小于p，那么集合N={1,2,3,4…p-1}中的a和b将不存在逆元，因为它们除模数p的余数始终为0，而不是单位元1！<br>          显然，模数为素数的重要性质就是可以将集合框在一个范围内，在此范围内，四则混合运算照常如旧，乘法单位元1存在！这是模运算的恩惠，也许是上帝的恩惠， 数学如此之美！想想看，在实数范围内的四则混合运算与单位元，在素数模运算中，竟然如此一致，这就是抽象代数，实际上，抽象代数不是被发明的，而是被发现 的！</p>
</blockquote>
<h1 id="乘法逆元-大数分解"><a href="#乘法逆元-大数分解" class="headerlink" title="乘法逆元-大数分解"></a>乘法逆元-大数分解</h1><blockquote>
<p>在理解了基本理论后，我们来看一下逆元为何如此重要，简单的说，求逆元在算法上是一个规范性的操作， 比如使用辗转相除法等，然而对于模数p未知的情况下，却是一个在计算上不可能的问题。至于为什么不可能，请不要按照学子们的理论来考究，而要用收益/代价 均衡的理论来考虑。比如你破解一个算法花了30年，有意义吗？在学术环境下是有意义的，那好吧，如果你能把算法强度提高到破解它需要付出300年的时间， 你就可以拿到大奖了。<br>          求逆元是一个甚是简便的做法，可以说是一个协议，试想，加密解密双方在没有任何交互的前提下，怎么知道如何操作。那么运算集中的操作就是协议了，比如就是 求逆元。那么安全性在哪体现？给你两堆沙子，你将它们混合在了一起，然后你能再将它们区分出来吗？这就是大数分解问题的隐喻，这就是有限集合模运算算法安 全性的保障！<br>          素数模数界定了一个有限的集合，提供了可计算性，大数分解提供了计算的单向性。<br>          现在我们步入RSA算法，这是一种常规的非对称密钥算法。首先选择两个比较大的素数p和q，然后计算n=p<em>q，接下来需要界定一个集合，该集合内全部都 是和n互素的数，显然n不是素数，这就意味着必须在集合N={1,2,3,4…n-1}中抛弃和n不互素的数字。那么剩下的集合N’中还剩下多少元素 呢？在进一步讨论之前，我先讲一下前提。<br>          上一节我论述了，如果模数p是一个素数，那么集合{1,2,3,…p-1}构成一个有限集合N，可以用作非对称密钥学计算，那么推广一下，如果p不是 素数，那么这个集合该如何界定呢？结论是，在集合N中抛弃所有和数字p不互素的数。我们假设p=m</em>n，其中m，n均为素数，那么集合 {1,2,3,4…m<em>n-1}中有多少和p互素的数呢？很显然，这些不和p互素的数字分为两类，一类是m的倍数，另一类是n的倍数，m的倍数在集合 中是{m,2m,3m…(n-1)m}，而n的倍数则是{n,2n,3n…(m-1)n}，因此集合{1,2,3,4…p-1}中和p互素的 集合N中数字的数量一共有(p-1)-(n-1)-(m-1)=m</em>n-m-n+1=(m-1)<em>(n-1)。<br>          上述集合N中元素都有逆元吗？答案是肯定的。证明方法和素域p中的元素都有逆元的证明是一样的。首先将待求逆元的元素乘以集合N中的每一个元素并对m</em>n 取模，得到新集合N’，证明这个集N’合和集合N是相等的，因此里面必然有元素1。证明这个只需要两点，首先证明N‘中的元素都是和m<em>n互素的(实际上 代表了全部的和m</em>n互素的数字组成的集合)，其次证明它们两两不相等，这就可以说明两个集合是一样的。<br>          上面的这个结论是极其重要的，毕竟RSA算法的最开始就是要选择两个大素数p，q，然后计算n=p<em>q，并且计算m=(p-1)</em>(q-1)，看看m是什 么，m就是集合{1,2,3…n-1}中和n互素的集合N中数字的数量！RSA的计算将全部在集合N中进行！实际上，前几步的选取大素数p，q以及计 算(p-1)*(q-1)只是界定了一个计算的集合而已。<br>          RSA算法在界定了集合N之后，就会在N中选取一个数字e，显然e的逆元肯定是存在的！那么计算e的逆元，结果就是私钥d！公钥就是e以及n。<br>          n是明确的，但是你很难得到p和q，这就是算法的根本。技术实现上的关键点是，这种算法之所以可行，完全是这些算法过程是建立在一个有限的集合的基础上， 在该集合中存在单位元，满足交换率，计算闭合性。到这里为止，我并没有提到群，环，域的概念，也没有给出任何的定义，定理。但是殊途同归，一个简单的规则 抽象的设想便可以推出基本上所有的定理，定义，只是我没有说哪些是定义，哪些是定理罢了。想了解这些，随便找一本数论，抽象代数的书你就可以学到。读了这 些书的结果如何呢？结果就是你可以拿起笔写下试题的答案，然而即便这样，如果不自己从头到尾的思考，你可能仍然不知所以然，只知道某某学科有一个XX定 理，它的证法是这样的…<br>         这个简单的设想就是在一个集合中，其所有元素乘法逆元的存在性。要存在乘法逆元，素数便登上了舞台，因为我们发现，如果一个集合中的元素和模数均是互素 的，那么乘法逆元就一定存在，最简单的这种集合就是所谓的素域，当然对于模数是任意值的集合而言，欧拉函数给出了集合中元素的个数。请注意，欧拉函数“只 是一种找到元素个数的方法”，而和集合的本质没有太多的关系。<br>          依然本着乘法逆元，我们来看一下它是怎么导出在有限集合中的离散对数问题的。</p>
</blockquote>
<h1 id="乘法逆元-离散对数问题"><a href="#乘法逆元-离散对数问题" class="headerlink" title="乘法逆元-离散对数问题"></a>乘法逆元-离散对数问题</h1><blockquote>
<p>我 们依然看最初的那个集合N={1,2,3,4…p-1}，其中p为素数。现在我们知道这个集合中均存在乘法逆元，计算也都是闭合的。我们随便拿出该集 合的一个元素a，用它来乘以集合N中的每一个元素并模p，得到新的集合N’={1<em>a%p,2</em>a%p,3<em>a%p,4</em>a%p…(p- 1)<em>a%p}，我们知道其中肯定有一个元素为1，对应的该元素去掉</em>a后就是a的逆元。好的，一切正常，现在没有完，继续用a乘以集合N’中的元素并模 p得到N’’，我们知道N‘’和N是相等的，再进一步，用a去乘N‘’的每一个元素并模p得到N‘’‘，…N’‘’‘’我们可以得出，所有这些 N，N’，N’’，N’’’，N’’’’’…等都是相同的集合，因此我们就知道，a的不管多少次方模p的结果都在集合N内。<br>          这个结论很重要，这显然又构成了一个闭合的运算集合，在该集合内，任意一个元素的任意次方模p的结果依然属于该集合，给定一个集合内的元素a以及另一个元 素b，你能算出a的多少次方模p等于b吗？这就是离散对数问题。显然，只有在模运算的情况下才绘出现如此多的有趣特性，显然，钟表上绕圈还是很好玩的。也 许你想知道离散对数问题和乘法逆元有什么关系，关系并不是那么明确，然而，一个集合中每一个元素逆元的存在则是必须的要求。如此好玩的在钟表上绕圈的规则 总结成一门学科就是数论，而密码学则是利用了数论的诸多定理和定义的学科。</p>
</blockquote>
]]></content>
      <categories>
        <category>好奇尚异</category>
      </categories>
      <tags>
        <tag>密码</tag>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8Lambda、Stream及日期的使用整理</title>
    <url>/archives/a6c4b5fd.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇主要讲述是Java中JDK1.8的一些新语法特性使用，主要是Lambda、Stream和LocalDate日期的一些使用讲解。</p>
<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>Lambda介绍<br>Lambda 表达式(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。</p>
<h1 id="Lambda表达式的结构"><a href="#Lambda表达式的结构" class="headerlink" title="Lambda表达式的结构"></a>Lambda表达式的结构</h1><p>一个 Lambda 表达式可以有零个或多个参数<br>参数的类型既可以明确声明，也可以根据上下文来推断。例如：(int a)与(a)效果相同<br>所有参数需包含在圆括号内，参数之间用逗号相隔。例如：(a, b) 或 (int a, int b) 或 (String a, int b, float c)<br>空圆括号代表参数集为空。例如：() -&gt; 42<br>当只有一个参数，且其类型可推导时，圆括号（）可省略。例如：a -&gt; return a*a<br>Lambda 表达式的主体可包含零条或多条语句<br>如果 Lambda 表达式的主体只有一条语句，花括号{}可省略。匿名函数的返回类型与该主体表达式一致<br>如果 Lambda 表达式的主体包含一条以上语句，则表达式必须包含在花括号{}中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空<br>Lambda 表达式的使用<br>下面我们先使用一个简单的例子来看看Lambda的效果吧。</p>
<p>比如我们对Map 的遍历<br>传统方式遍历如下:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"a"</span>, <span class="string">"a"</span>);</span><br><span class="line">map.put(<span class="string">"b"</span>, <span class="string">"b"</span>);</span><br><span class="line">map.put(<span class="string">"c"</span>, <span class="string">"c"</span>);</span><br><span class="line">map.put(<span class="string">"d"</span>, <span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"map普通方式遍历:"</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"k="</span> + key + <span class="string">"，v="</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用Lambda进行遍历:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"map拉姆达表达式遍历:"</span>);</span><br><span class="line">    map.forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"k="</span> + k + <span class="string">"，v="</span> + v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>List也同理，不过List还可以通过双冒号运算符遍历:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"bb"</span>);</span><br><span class="line">list.add(<span class="string">"ccc"</span>);</span><br><span class="line">list.add(<span class="string">"dddd"</span>);</span><br><span class="line">System.out.println(<span class="string">"list拉姆达表达式遍历:"</span>);</span><br><span class="line">list.forEach(v -&gt; &#123;</span><br><span class="line">    System.out.println(v);</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">"list双冒号运算符遍历:"</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>
<p>输出结果:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">map普通方式遍历:</span><br><span class="line">k=a，v=a</span><br><span class="line">k=b，v=b</span><br><span class="line">k=c，v=c</span><br><span class="line">k=d，v=d</span><br><span class="line">map拉姆达表达式遍历:</span><br><span class="line">k=a，v=a</span><br><span class="line">k=b，v=b</span><br><span class="line">k=c，v=c</span><br><span class="line">k=d，v=d</span><br><span class="line">list拉姆达表达式遍历:</span><br><span class="line">a</span><br><span class="line">bb</span><br><span class="line">ccc</span><br><span class="line">dddd</span><br><span class="line">list双冒号运算符遍历:</span><br><span class="line">a</span><br><span class="line">bb</span><br><span class="line">ccc</span><br><span class="line">dddd</span><br></pre></td></tr></table></figure></p>
<p>Lambda除了在for循环遍历中使用外，它还可以代替匿名的内部类。<br>比如下面这个例子的线程创建:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//使用普通的方式创建</span></span><br><span class="line">Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通方式创建!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用拉姆达方式创建</span></span><br><span class="line">Runnable r2 = ()-&gt; System.out.println(<span class="string">"拉姆达方式创建!"</span>);</span><br></pre></td></tr></table></figure></p>
<p>注: 这个例子中使用Lambda表达式的时候，编译器会自动推断：根据线程类的构造函数签名 Runnable r { }，将该 Lambda 表达式赋Runnable 接口。</p>
<p>Lambda 表达式与匿名类的区别<br>使用匿名类与 Lambda 表达式的一大区别在于关键词的使用。对于匿名类，关键词 this 解读为匿名类，而对于 Lambda 表达式，关键词 this 解读为写就 Lambda 的外部类。</p>
<p>Lambda表达式使用注意事项<br>Lambda虽然简化了代码的编写，但同时也减少了可读性。</p>
<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>Stream介绍<br>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p>
<p>Stream特性：</p>
<p>不是数据结构： 它没有内部存储，它只是用操作管道从 source（数据结构、数组、generator function、IO channel）抓取数据。它也绝不修改自己所封装的底层数据结构的数据。例如 Stream 的 filter 操作会产生一个不包含被过滤元素的新 Stream，而不是从 source 删除那些元素。<br>不支持索引访问： 但是很容易生成数组或者 List 。<br>惰性化：很多 Stream 操作是向后延迟的，一直到它弄清楚了最后需要多少数据才会开始。Intermediate 操作永远是惰性化的。<br>并行能力。当一个 Stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行进行的。<br>可以是无限的：集合有固定大小，Stream 则不必。limit(n) 和 findFirst() 这类的 short-circuiting 操作可以对无限的 Stream 进行运算并很快完成。<br>注意事项：所有 Stream 的操作必须以 lambda 表达式为参数。<br>Stream 流操作类型：</p>
<p>Intermediate：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。 这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。<br>Terminal：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。 所以这必定是流的最后一个操作。 Terminal操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。<br>Stream使用<br>这里我们依旧使用一个简单示例来看看吧。<br>在开发中，我们有时需要对一些数据进行过滤，如果是传统的方式，我们需要对这批数据进行遍历过滤，会显得比较繁琐，如果使用steam流方式的话，那么可以很方便的进行处理。</p>
<p>首先通过普通的方式进行过滤:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"xuwujing"</span>);</span><br><span class="line">    System.out.println(<span class="string">"过滤之前:"</span> + list);</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"李四"</span>.equals(str)) &#123;</span><br><span class="line">            result.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"过滤之后:"</span> + result);</span><br><span class="line">使用Steam方式进行过滤：</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; result2 = list.stream().filter(str -&gt; !<span class="string">"李四"</span>.equals(str)).collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">"stream 过滤之后:"</span> + result2);</span><br></pre></td></tr></table></figure></p>
<p>输出结果:</p>
<p>过滤之前:[张三, 李四, 王五, xuwujing]<br>过滤之后:[张三, 王五, xuwujing]<br>stream 过滤之后:[张三, 王五, xuwujing]<br>是不是很简洁和方便呢。<br>其实Stream流还有更多的使用方法，filter只是其中的一角而已。那么在这里我们就来学习了解下这些用法吧。</p>
<h1 id="1-构造Stream流的方式"><a href="#1-构造Stream流的方式" class="headerlink" title="1.构造Stream流的方式"></a>1.构造Stream流的方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Stream stream = Stream.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">String[] strArray = <span class="keyword">new</span> String[] &#123; <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span> &#125;;</span><br><span class="line">stream = Stream.of(strArray);</span><br><span class="line">stream = Arrays.stream(strArray);</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class="line">stream = list.stream();</span><br></pre></td></tr></table></figure>
<h1 id="2-Stream流的之间的转换"><a href="#2-Stream流的之间的转换" class="headerlink" title="2.Stream流的之间的转换"></a>2.Stream流的之间的转换</h1><p>注意:一个Stream流只可以使用一次，这段代码为了简洁而重复使用了数次，因此会抛出 stream has already been operated upon or closed 异常。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">// 转换成 Array</span></span><br><span class="line">        String[] strArray1 = stream2.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 Collection</span></span><br><span class="line">        List&lt;String&gt; list1 = stream2.collect(Collectors.toList());</span><br><span class="line">        List&lt;String&gt; list2 = stream2.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));          </span><br><span class="line">        Set set1 = stream2.collect(Collectors.toSet());</span><br><span class="line">        Stack stack1 = stream2.collect(Collectors.toCollection(Stack::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成 String</span></span><br><span class="line">        String str = stream.collect(Collectors.joining()).toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="3-Stream流的map使用"><a href="#3-Stream流的map使用" class="headerlink" title="3.Stream流的map使用"></a>3.Stream流的map使用</h1><p>map方法用于映射每个元素到对应的结果，一对一。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例一：转换大写</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list3 = Arrays.asList(<span class="string">"zhangSan"</span>, <span class="string">"liSi"</span>, <span class="string">"wangWu"</span>);</span><br><span class="line">    System.out.println(<span class="string">"转换之前的数据:"</span> + list3);</span><br><span class="line">    List&lt;String&gt; list4 = list3.stream().map(String::toUpperCase).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"转换之后的数据:"</span> + list4); </span><br><span class="line">    <span class="comment">// 转换之后的数据:[ZHANGSAN, LISI,WANGWU]</span></span><br><span class="line">示例二：转换数据类型</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list31 = Arrays.asList(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</span><br><span class="line">    System.out.println(<span class="string">"转换之前的数据:"</span> + list31);</span><br><span class="line">    List&lt;Integer&gt; list41 = list31.stream().map(Integer::valueOf).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"转换之后的数据:"</span> + list41); </span><br><span class="line">    <span class="comment">// [1, 2, 3]</span></span><br><span class="line">示例三：获取平方</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list5 = Arrays.asList(<span class="keyword">new</span> Integer[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;);</span><br><span class="line">    List&lt;Integer&gt; list6 = list5.stream().map(n -&gt; n * n).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"平方的数据:"</span> + list6);</span><br><span class="line">    <span class="comment">// [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></p>
<h1 id="4-Stream流的filter使用"><a href="#4-Stream流的filter使用" class="headerlink" title="4.Stream流的filter使用"></a>4.Stream流的filter使用</h1><p>filter方法用于通过设置的条件过滤出元素。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例二：通过与 findAny 得到 <span class="keyword">if</span>/<span class="keyword">else</span> 的值</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>, <span class="string">"xuwujing"</span>);</span><br><span class="line">String result3 = list.stream().filter(str -&gt; <span class="string">"李四"</span>.equals(str)).findAny().orElse(<span class="string">"找不到!"</span>);</span><br><span class="line">String result4 = list.stream().filter(str -&gt; <span class="string">"李二"</span>.equals(str)).findAny().orElse(<span class="string">"找不到!"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"stream 过滤之后 2:"</span> + result3);</span><br><span class="line">System.out.println(<span class="string">"stream 过滤之后 3:"</span> + result4);</span><br><span class="line"><span class="comment">//stream 过滤之后 2:李四</span></span><br><span class="line"><span class="comment">//stream 过滤之后 3:找不到!</span></span><br><span class="line">示例三：通过与 mapToInt 计算和</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; lists = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    lists.add(<span class="keyword">new</span> User(<span class="number">6</span>, <span class="string">"张三"</span>));</span><br><span class="line">    lists.add(<span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"李四"</span>));</span><br><span class="line">    lists.add(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"王五"</span>));</span><br><span class="line">    lists.add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"张三"</span>));</span><br><span class="line">    <span class="comment">// 计算这个list中出现 "张三" id的值</span></span><br><span class="line">    <span class="keyword">int</span> sum = lists.stream().filter(u -&gt; <span class="string">"张三"</span>.equals(u.getName())).mapToInt(u -&gt; u.getId()).sum();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"计算结果:"</span> + sum); </span><br><span class="line">    <span class="comment">// 7</span></span><br></pre></td></tr></table></figure></p>
<h1 id="5-Stream流的flatMap使用"><a href="#5-Stream流的flatMap使用" class="headerlink" title="5.Stream流的flatMap使用"></a>5.Stream流的flatMap使用</h1><p>flatMap 方法用于映射每个元素到对应的结果，一对多。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例:从句子中得到单词</span><br><span class="line"></span><br><span class="line">    String worlds = <span class="string">"The way of the future"</span>;</span><br><span class="line">    List&lt;String&gt; list7 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list7.add(worlds);</span><br><span class="line">    List&lt;String&gt; list8 = list7.stream().flatMap(str -&gt; Stream.of(str.split(<span class="string">" "</span>)))</span><br><span class="line">            .filter(world -&gt; world.length() &gt; <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"单词:"</span>);</span><br><span class="line">    list8.forEach(System.out::println);</span><br><span class="line">    <span class="comment">// 单词:</span></span><br><span class="line">    <span class="comment">// The </span></span><br><span class="line">    <span class="comment">// way </span></span><br><span class="line">    <span class="comment">// of </span></span><br><span class="line">    <span class="comment">// the </span></span><br><span class="line">    <span class="comment">// future</span></span><br></pre></td></tr></table></figure></p>
<h1 id="6-Stream流的limit使用"><a href="#6-Stream流的limit使用" class="headerlink" title="6.Stream流的limit使用"></a>6.Stream流的limit使用</h1><p>limit 方法用于获取指定数量的流。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例一：获取前n条数的数据</span><br><span class="line"></span><br><span class="line">    Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">    System.out.println(<span class="string">"取到的前三条数据:"</span>);</span><br><span class="line">    rd.ints().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    <span class="comment">//  取到的前三条数据:</span></span><br><span class="line">    <span class="comment">//  1167267754</span></span><br><span class="line">    <span class="comment">//  -1164558977</span></span><br><span class="line">    <span class="comment">//  1977868798</span></span><br><span class="line">示例二：结合skip使用得到需要的数据</span><br><span class="line"></span><br><span class="line">skip表示的是扔掉前n个元素。</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; list9 = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(i, <span class="string">"pancm"</span> + i);</span><br><span class="line">        list9.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"截取之前的数据:"</span>);</span><br><span class="line">    <span class="comment">// 取前3条数据，但是扔掉了前面的2条，可以理解为拿到的数据为 2&lt;=i&lt;3 (i 是数值下标)</span></span><br><span class="line">    List&lt;String&gt; list10 = list9.stream().map(User::getName).limit(<span class="number">3</span>).skip(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"截取之后的数据:"</span> + list10);</span><br><span class="line">    <span class="comment">//      截取之前的数据:</span></span><br><span class="line">    <span class="comment">//      姓名:pancm1</span></span><br><span class="line">    <span class="comment">//      姓名:pancm2</span></span><br><span class="line">    <span class="comment">//      姓名:pancm3</span></span><br><span class="line">    <span class="comment">//      截取之后的数据:[pancm3]</span></span><br><span class="line">注:User实体类中 getName 方法会打印姓名。</span><br></pre></td></tr></table></figure></p>
<h1 id="7-Stream流的sort使用"><a href="#7-Stream流的sort使用" class="headerlink" title="7.Stream流的sort使用"></a>7.Stream流的sort使用</h1><p>sorted方法用于对流进行升序排序。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例一：随机取值排序</span><br><span class="line"></span><br><span class="line">    Random rd2 = <span class="keyword">new</span> Random();</span><br><span class="line">    System.out.println(<span class="string">"取到的前三条数据然后进行排序:"</span>);</span><br><span class="line">    rd2.ints().limit(<span class="number">3</span>).sorted().forEach(System.out::println);</span><br><span class="line">    <span class="comment">//  取到的前三条数据然后进行排序:</span></span><br><span class="line">    <span class="comment">//  -2043456377</span></span><br><span class="line">    <span class="comment">//  -1778595703</span></span><br><span class="line">    <span class="comment">//  1013369565</span></span><br><span class="line">示例二：优化排序</span><br><span class="line"></span><br><span class="line">tips:先获取在排序效率会更高!</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通的排序取值</span></span><br><span class="line">    List&lt;User&gt; list11 = list9.stream().sorted((u1, u2) -&gt; u1.getName().compareTo(u2.getName())).limit(<span class="number">3</span>)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"排序之后的数据:"</span> + list11);</span><br><span class="line">    <span class="comment">//优化排序取值</span></span><br><span class="line">    List&lt;User&gt; list12 = list9.stream().limit(<span class="number">3</span>).sorted((u1, u2) -&gt; u1.getName().compareTo(u2.getName()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"优化排序之后的数据:"</span> + list12);</span><br><span class="line">    <span class="comment">//排序之后的数据:[&#123;"id":1,"name":"pancm1"&#125;, &#123;"id":2,"name":"pancm2"&#125;, &#123;"id":3,"name":"pancm3"&#125;]</span></span><br><span class="line">    <span class="comment">//优化排序之后的数据:[&#123;"id":1,"name":"pancm1"&#125;, &#123;"id":2,"name":"pancm2"&#125;, &#123;"id":3,"name":"pancm3"&#125;]</span></span><br></pre></td></tr></table></figure></p>
<h1 id="8-Stream流的peek使用"><a href="#8-Stream流的peek使用" class="headerlink" title="8.Stream流的peek使用"></a>8.Stream流的peek使用</h1><p>peek对每个元素执行操作并返回一个新的Stream<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例:双重操作</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"peek使用:"</span>);</span><br><span class="line">    Stream.of(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>).filter(e -&gt; e.length() &gt; <span class="number">3</span>).peek(e -&gt; System.out.println(<span class="string">"转换之前: "</span> + e))</span><br><span class="line">            .map(String::toUpperCase).peek(e -&gt; System.out.println(<span class="string">"转换之后: "</span> + e)).collect(Collectors.toList());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  转换之前: three</span></span><br><span class="line">    <span class="comment">//  转换之后: THREE</span></span><br><span class="line">    <span class="comment">//  转换之前: four</span></span><br><span class="line">    <span class="comment">//  转换之后: FOUR</span></span><br></pre></td></tr></table></figure></p>
<h1 id="9-Stream流的parallel使用"><a href="#9-Stream流的parallel使用" class="headerlink" title="9.Stream流的parallel使用"></a>9.Stream流的parallel使用</h1><p>parallelStream 是流并行处理程序的代替方法。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例:获取空字符串的数量</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">"a"</span>, <span class="string">""</span>, <span class="string">"c"</span>, <span class="string">""</span>, <span class="string">"e"</span>,<span class="string">""</span>, <span class="string">" "</span>);</span><br><span class="line">    <span class="comment">// 获取空字符串的数量</span></span><br><span class="line">    <span class="keyword">long</span> count =  strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">    System.out.println(<span class="string">"空字符串的个数:"</span>+count);</span><br></pre></td></tr></table></figure></p>
<h1 id="10-Stream流的max-min-distinct使用"><a href="#10-Stream流的max-min-distinct使用" class="headerlink" title="10.Stream流的max/min/distinct使用"></a>10.Stream流的max/min/distinct使用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例一：得到最大最小值</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list13 = Arrays.asList(<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"xuwujing"</span>);</span><br><span class="line">    <span class="keyword">int</span> maxLines = list13.stream().mapToInt(String::length).max().getAsInt();</span><br><span class="line">    <span class="keyword">int</span> minLines = list13.stream().mapToInt(String::length).min().getAsInt();</span><br><span class="line">    System.out.println(<span class="string">"最长字符的长度:"</span> + maxLines+<span class="string">",最短字符的长度:"</span>+minLines);</span><br><span class="line">    <span class="comment">//最长字符的长度:8,最短字符的长度:4</span></span><br><span class="line">示例二：得到去重之后的数据</span><br><span class="line"></span><br><span class="line">    String lines = <span class="string">"good good study day day up"</span>;</span><br><span class="line">    List&lt;String&gt; list14 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    list14.add(lines);</span><br><span class="line">    List&lt;String&gt; words = list14.stream().flatMap(line -&gt; Stream.of(line.split(<span class="string">" "</span>))).filter(word -&gt; word.length() &gt; <span class="number">0</span>)</span><br><span class="line">            .map(String::toLowerCase).distinct().sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"去重复之后:"</span> + words);</span><br><span class="line">    <span class="comment">//去重复之后:[day, good, study, up]</span></span><br></pre></td></tr></table></figure>
<h1 id="11-Stream流的Match使用"><a href="#11-Stream流的Match使用" class="headerlink" title="11.Stream流的Match使用"></a>11.Stream流的Match使用</h1><p>allMatch：Stream 中全部元素符合则返回 true ;<br>anyMatch：Stream 中只要有一个元素符合则返回 true;<br>noneMatch：Stream 中没有一个元素符合则返回 true。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例:数据是否符合</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> all = lists.stream().allMatch(u -&gt; u.getId() &gt; <span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">"是否都大于3:"</span> + all);</span><br><span class="line">    <span class="keyword">boolean</span> any = lists.stream().anyMatch(u -&gt; u.getId() &gt; <span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">"是否有一个大于3:"</span> + any);</span><br><span class="line">    <span class="keyword">boolean</span> none = lists.stream().noneMatch(u -&gt; u.getId() &gt; <span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">"是否没有一个大于3的:"</span> + none);       </span><br><span class="line">    <span class="comment">//  是否都大于3:false</span></span><br><span class="line">    <span class="comment">//  是否有一个大于3:true</span></span><br><span class="line">    <span class="comment">//  是否没有一个大于3的:false</span></span><br></pre></td></tr></table></figure></p>
<h1 id="12-Stream流的reduce使用"><a href="#12-Stream流的reduce使用" class="headerlink" title="12.Stream流的reduce使用"></a>12.Stream流的reduce使用</h1><p>reduce 主要作用是把 Stream 元素组合起来进行操作。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例一：字符串连接</span><br><span class="line"></span><br><span class="line">String concat = Stream.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>).reduce(<span class="string">""</span>, String::concat);</span><br><span class="line">System.out.println(<span class="string">"字符串拼接:"</span> + concat);</span><br><span class="line">示例二：得到最小值</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> minValue = Stream.of(-<span class="number">4.0</span>, <span class="number">1.0</span>, <span class="number">3.0</span>, -<span class="number">2.0</span>).reduce(Double.MAX_VALUE, Double::min);</span><br><span class="line">    System.out.println(<span class="string">"最小值:"</span> + minValue);</span><br><span class="line">    <span class="comment">//最小值:-4.0</span></span><br><span class="line">示例三：求和</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求和, 无起始值</span></span><br><span class="line">    <span class="keyword">int</span> sumValue = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(Integer::sum).get();</span><br><span class="line">    System.out.println(<span class="string">"有无起始值求和:"</span> + sumValue);</span><br><span class="line">    <span class="comment">// 求和, 有起始值</span></span><br><span class="line">     sumValue = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).reduce(<span class="number">1</span>, Integer::sum);</span><br><span class="line">     System.out.println(<span class="string">"有起始值求和:"</span> + sumValue);</span><br><span class="line">    <span class="comment">//  有无起始值求和:10</span></span><br><span class="line">    <span class="comment">//  有起始值求和:11</span></span><br><span class="line">示例四：过滤拼接</span><br><span class="line"></span><br><span class="line">concat = Stream.of(<span class="string">"a"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"F"</span>).filter(x -&gt; x.compareTo(<span class="string">"Z"</span>) &gt; <span class="number">0</span>).reduce(<span class="string">""</span>, String::concat);</span><br><span class="line">System.out.println(<span class="string">"过滤和字符串连接:"</span> + concat);</span><br><span class="line">    <span class="comment">//过滤和字符串连接:ace</span></span><br></pre></td></tr></table></figure></p>
<h1 id="13-Stream流的iterate使用"><a href="#13-Stream流的iterate使用" class="headerlink" title="13.Stream流的iterate使用"></a>13.Stream流的iterate使用</h1><p>iterate 跟 reduce 操作很像，接受一个种子值，和一个UnaryOperator（例如 f）。 然后种子值成为 Stream 的第一个元素，f(seed) 为第二个，f(f(seed)) 第三个，以此类推。 在 iterate 时候管道必须有 limit 这样的操作来限制 Stream 大小。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例:生成一个等差队列</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"从2开始生成一个等差队列:"</span>);</span><br><span class="line">    Stream.iterate(<span class="number">2</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">5</span>).forEach(x -&gt; System.out.print(x + <span class="string">" "</span>));</span><br><span class="line">    <span class="comment">// 从2开始生成一个等差队列:</span></span><br><span class="line">    <span class="comment">// 2 4 6 8 10</span></span><br></pre></td></tr></table></figure></p>
<h1 id="14-Stream流的Supplier使用"><a href="#14-Stream流的Supplier使用" class="headerlink" title="14.Stream流的Supplier使用"></a>14.Stream流的Supplier使用</h1><p>通过实现Supplier类的方法可以自定义流计算规则。</p>
<p>示例：随机获取两条用户信息<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"自定义一个流进行计算输出:"</span>);</span><br><span class="line">    Stream.generate(<span class="keyword">new</span> UserSupplier()).limit(<span class="number">2</span>).forEach(u -&gt; System.out.println(u.getId() + <span class="string">", "</span> + u.getName()));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第一次:</span></span><br><span class="line">    <span class="comment">//自定义一个流进行计算输出:</span></span><br><span class="line">    <span class="comment">//10, pancm7</span></span><br><span class="line">    <span class="comment">//11, pancm6</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二次:</span></span><br><span class="line">    <span class="comment">//自定义一个流进行计算输出:</span></span><br><span class="line">    <span class="comment">//10, pancm4</span></span><br><span class="line">    <span class="comment">//11, pancm2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第三次:</span></span><br><span class="line">    <span class="comment">//自定义一个流进行计算输出:</span></span><br><span class="line">    <span class="comment">//10, pancm4</span></span><br><span class="line">    <span class="comment">//11, pancm8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSupplier</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(index++, <span class="string">"pancm"</span> + random.nextInt(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>}</p>
<h1 id="15-Stream流的groupingBy-partitioningBy使用"><a href="#15-Stream流的groupingBy-partitioningBy使用" class="headerlink" title="15.Stream流的groupingBy/partitioningBy使用"></a>15.Stream流的groupingBy/partitioningBy使用</h1><p>groupingBy：分组排序；<br>partitioningBy：分区排序。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例一：分组排序</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"通过id进行分组排序:"</span>);</span><br><span class="line">    Map&lt;Integer, List&lt;User&gt;&gt; personGroups = Stream.generate(<span class="keyword">new</span> UserSupplier2()).limit(<span class="number">5</span>)</span><br><span class="line">            .collect(Collectors.groupingBy(User::getId));</span><br><span class="line">    Iterator it = personGroups.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;Integer, List&lt;User&gt;&gt; persons = (Map.Entry) it.next();</span><br><span class="line">        System.out.println(<span class="string">"id "</span> + persons.getKey() + <span class="string">" = "</span> + persons.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  通过id进行分组排序:</span></span><br><span class="line">    <span class="comment">//  id 10 = [&#123;"id":10,"name":"pancm1"&#125;] </span></span><br><span class="line">    <span class="comment">//  id 11 = [&#123;"id":11,"name":"pancm3"&#125;, &#123;"id":11,"name":"pancm6"&#125;, &#123;"id":11,"name":"pancm4"&#125;, &#123;"id":11,"name":"pancm7"&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UserSupplier2</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(index % <span class="number">2</span> == <span class="number">0</span> ? index++ : index, <span class="string">"pancm"</span> + random.nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">示例二：分区排序</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"通过年龄进行分区排序:"</span>);</span><br><span class="line">    Map&lt;Boolean, List&lt;User&gt;&gt; children = Stream.generate(<span class="keyword">new</span> UserSupplier3()).limit(<span class="number">5</span>)</span><br><span class="line">            .collect(Collectors.partitioningBy(p -&gt; p.getId() &lt; <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"小孩: "</span> + children.get(<span class="keyword">true</span>));</span><br><span class="line">    System.out.println(<span class="string">"成年人: "</span> + children.get(<span class="keyword">false</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过年龄进行分区排序:</span></span><br><span class="line">    <span class="comment">// 小孩: [&#123;"id":16,"name":"pancm7"&#125;, &#123;"id":17,"name":"pancm2"&#125;]</span></span><br><span class="line">    <span class="comment">// 成年人: [&#123;"id":18,"name":"pancm4"&#125;, &#123;"id":19,"name":"pancm9"&#125;, &#123;"id":20,"name":"pancm6"&#125;]</span></span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">UserSupplier3</span> <span class="keyword">implements</span> <span class="title">Supplier</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(index++, <span class="string">"pancm"</span> + random.nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="16-Stream流的summaryStatistics使用"><a href="#16-Stream流的summaryStatistics使用" class="headerlink" title="16.Stream流的summaryStatistics使用"></a>16.Stream流的summaryStatistics使用</h1><p>IntSummaryStatistics 用于收集统计信息(如count、min、max、sum和average)的状态对象。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">示例:得到最大、最小、之和以及平均数。</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>);</span><br><span class="line">    IntSummaryStatistics stats = numbers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">     </span><br><span class="line">    System.out.println(<span class="string">"列表中最大的数 : "</span> + stats.getMax());</span><br><span class="line">    System.out.println(<span class="string">"列表中最小的数 : "</span> + stats.getMin());</span><br><span class="line">    System.out.println(<span class="string">"所有数之和 : "</span> + stats.getSum());</span><br><span class="line">    System.out.println(<span class="string">"平均数 : "</span> + stats.getAverage());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  列表中最大的数 : 9</span></span><br><span class="line">    <span class="comment">//  列表中最小的数 : 1</span></span><br><span class="line">    <span class="comment">//  所有数之和 : 25</span></span><br><span class="line">    <span class="comment">//  平均数 : 5.0</span></span><br></pre></td></tr></table></figure></p>
<p>Stream 介绍就到这里了，JDK1.8中的Stream流其实还有很多很多用法，更多的用法则需要大家去查看JDK1.8的API文档了。</p>
<h1 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h1><p>介绍<br>JDK1.8除了新增了lambda表达式、stream流之外，它还新增了全新的日期时间API。在JDK1.8之前，Java处理日期、日历和时间的方式一直为社区所诟病，将 java.util.Date设定为可变类型，以及SimpleDateFormat的非线程安全使其应用非常受限。因此推出了java.time包，该包下的所有类都是不可变类型而且线程安全。</p>
<h1 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h1><p>Instant：瞬时时间。<br>LocalDate：本地日期，不包含具体时间, 格式 yyyy-MM-dd。<br>LocalTime：本地时间，不包含日期. 格式 yyyy-MM-dd HH:mm:ss.SSS 。<br>LocalDateTime：组合了日期和时间，但不包含时差和时区信息。<br>ZonedDateTime：最完整的日期时间，包含时区和相对UTC或格林威治的时差。<br>使用</p>
<h1 id="1-获取当前的日期时间"><a href="#1-获取当前的日期时间" class="headerlink" title="1.获取当前的日期时间"></a>1.获取当前的日期时间</h1><p>通过静态工厂方法now()来获取当前时间。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//本地日期,不包括时分秒</span></span><br><span class="line">LocalDate nowDate = LocalDate.now();</span><br><span class="line"><span class="comment">//本地日期,包括时分秒</span></span><br><span class="line">LocalDateTime nowDateTime = LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">"当前时间:"</span>+nowDate);</span><br><span class="line">System.out.println(<span class="string">"当前时间:"</span>+nowDateTime);</span><br><span class="line"><span class="comment">//  当前时间:2018-12-19</span></span><br><span class="line"><span class="comment">//  当前时间:2018-12-19T15:24:35.822</span></span><br></pre></td></tr></table></figure></p>
<h1 id="2-获取当前的年月日时分秒"><a href="#2-获取当前的年月日时分秒" class="headerlink" title="2.获取当前的年月日时分秒"></a>2.获取当前的年月日时分秒</h1><p>获取时间之后，直接get获取年月日时分秒。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//获取当前的时间，包括毫秒</span></span><br><span class="line"> LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line"> System.out.println(<span class="string">"当前年:"</span>+ldt.getYear());   <span class="comment">//2018</span></span><br><span class="line"> System.out.println(<span class="string">"当前年份天数:"</span>+ldt.getDayOfYear());<span class="comment">//172 </span></span><br><span class="line"> System.out.println(<span class="string">"当前月:"</span>+ldt.getMonthValue());</span><br><span class="line"> System.out.println(<span class="string">"当前时:"</span>+ldt.getHour());</span><br><span class="line"> System.out.println(<span class="string">"当前分:"</span>+ldt.getMinute());</span><br><span class="line"> System.out.println(<span class="string">"当前时间:"</span>+ldt.toString());</span><br><span class="line"><span class="comment">//       当前年:2018</span></span><br><span class="line"><span class="comment">//       当前年份天数:353</span></span><br><span class="line"><span class="comment">//       当前月:12</span></span><br><span class="line"><span class="comment">//       当前时:15</span></span><br><span class="line"><span class="comment">//       当前分:24</span></span><br><span class="line"><span class="comment">//       当前时间:2018-12-19T15:24:35.833</span></span><br></pre></td></tr></table></figure></p>
<h1 id="3-格式化时间"><a href="#3-格式化时间" class="headerlink" title="3.格式化时间"></a>3.格式化时间</h1><p>格式时间格式需要用到DateTimeFormatter类。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">"格式化时间: "</span>+ ldt.format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>)));</span><br><span class="line"><span class="comment">//格式化时间:2018-12-19 15:37:47.119</span></span><br></pre></td></tr></table></figure></p>
<h1 id="4-时间增减"><a href="#4-时间增减" class="headerlink" title="4.时间增减"></a>4.时间增减</h1><p>在指定的时间进行增加/减少年月日时分秒。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line"> System.out.println(<span class="string">"后5天时间:"</span>+ldt.plusDays(<span class="number">5</span>));</span><br><span class="line"> System.out.println(<span class="string">"前5天时间并格式化:"</span>+ldt.minusDays(<span class="number">5</span>).format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>))); <span class="comment">//2018-06-16</span></span><br><span class="line"> System.out.println(<span class="string">"前一个月的时间:"</span>+ldt2.minusMonths(<span class="number">1</span>).format(DateTimeFormatter.ofPattern(<span class="string">"yyyyMM"</span>))); <span class="comment">//2018-06-16</span></span><br><span class="line"> System.out.println(<span class="string">"后一个月的时间:"</span>+ldt2.plusMonths(<span class="number">1</span>)); <span class="comment">//2018-06-16</span></span><br><span class="line"> System.out.println(<span class="string">"指定2099年的当前时间:"</span>+ldt.withYear(<span class="number">2099</span>)); <span class="comment">//2099-06-21T15:07:39.506</span></span><br><span class="line"><span class="comment">//      后5天时间:2018-12-24T15:50:37.508</span></span><br><span class="line"><span class="comment">//      前5天时间并格式化:2018-12-14</span></span><br><span class="line"><span class="comment">//      前一个月的时间:201712</span></span><br><span class="line"><span class="comment">//      后一个月的时间:2018-02-04T09:19:29.499</span></span><br><span class="line"><span class="comment">//      指定2099年的当前时间:2099-12-19T15:50:37.508</span></span><br></pre></td></tr></table></figure></p>
<h1 id="5-创建指定时间"><a href="#5-创建指定时间" class="headerlink" title="5.创建指定时间"></a>5.创建指定时间</h1><p>通过指定年月日来创建。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">LocalDate ld3=LocalDate.of(<span class="number">2017</span>, Month.NOVEMBER, <span class="number">17</span>);</span><br><span class="line">LocalDate ld4=LocalDate.of(<span class="number">2018</span>, <span class="number">02</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure></p>
<h1 id="6-时间相差比较"><a href="#6-时间相差比较" class="headerlink" title="6.时间相差比较"></a>6.时间相差比较</h1><p>比较相差的年月日时分秒。</p>
<p>示例一: 具体相差的年月日<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">LocalDate ld=LocalDate.parse(<span class="string">"2017-11-17"</span>);</span><br><span class="line">LocalDate ld2=LocalDate.parse(<span class="string">"2018-01-05"</span>);</span><br><span class="line">Period p=Period.between(ld, ld2);</span><br><span class="line">System.out.println(<span class="string">"相差年: "</span>+p.getYears()+<span class="string">" 相差月 :"</span>+p.getMonths() +<span class="string">" 相差天:"</span>+p.getDays());</span><br><span class="line"><span class="comment">// 相差年: 0 相差月 :1 相差天:19</span></span><br></pre></td></tr></table></figure></p>
<p>注:这里的月份是不满足一年，天数是不满足一个月的。这里实际相差的是1月19天，也就是49天。</p>
<p>示例二：相差总数的时间</p>
<p>ChronoUnit 日期周期单位的标准集合。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">LocalDate startDate = LocalDate.of(<span class="number">2017</span>, <span class="number">11</span>, <span class="number">17</span>);</span><br><span class="line">LocalDate endDate = LocalDate.of(<span class="number">2018</span>, <span class="number">01</span>, <span class="number">05</span>);</span><br><span class="line">System.out.println(<span class="string">"相差月份:"</span>+ChronoUnit.MONTHS.between(startDate, endDate));</span><br><span class="line">System.out.println(<span class="string">"两月之间的相差的天数   : "</span> + ChronoUnit.DAYS.between(startDate, endDate));</span><br><span class="line"><span class="comment">//         相差月份:1</span></span><br><span class="line"><span class="comment">//         两天之间的差在天数   : 49</span></span><br></pre></td></tr></table></figure></p>
<p>注:ChronoUnit也可以计算相差时分秒。</p>
<p>示例三：精度时间相差</p>
<p>Duration 这个类以秒和纳秒为单位建模时间的数量或数量。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Instant inst1 = Instant.now();</span><br><span class="line">System.out.println(<span class="string">"当前时间戳 : "</span> + inst1);</span><br><span class="line">Instant inst2 = inst1.plus(Duration.ofSeconds(<span class="number">10</span>));</span><br><span class="line">System.out.println(<span class="string">"增加之后的时间 : "</span> + inst2);</span><br><span class="line">System.out.println(<span class="string">"相差毫秒 : "</span> + Duration.between(inst1, inst2).toMillis());</span><br><span class="line">System.out.println(<span class="string">"相毫秒 : "</span> + Duration.between(inst1, inst2).getSeconds());</span><br><span class="line"><span class="comment">//  当前时间戳 : 2018-12-19T08:14:21.675Z</span></span><br><span class="line"><span class="comment">//  增加之后的时间 : 2018-12-19T08:14:31.675Z</span></span><br><span class="line"><span class="comment">//  相差毫秒 : 10000</span></span><br><span class="line"><span class="comment">//  相毫秒 : 10</span></span><br></pre></td></tr></table></figure></p>
<p>示例四：时间大小比较<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">LocalDateTime ldt4 = LocalDateTime.now();</span><br><span class="line">LocalDateTime ldt5 = ldt4.plusMinutes(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">"当前时间是否大于:"</span>+ldt4.isAfter(ldt5));</span><br><span class="line">System.out.println(<span class="string">"当前时间是否小于"</span>+ldt4.isBefore(ldt5));</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<h1 id="7-时区时间计算"><a href="#7-时区时间计算" class="headerlink" title="7.时区时间计算"></a>7.时区时间计算</h1><p>得到其他时区的时间。</p>
<p>示例一:通过Clock时钟类获取计算</p>
<p>Clock时钟类用于获取当时的时间戳，或当前时区下的日期时间信息。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Clock clock = Clock.systemUTC();</span><br><span class="line">System.out.println(<span class="string">"当前时间戳 : "</span> + clock.millis());</span><br><span class="line">Clock clock2 = Clock.system(ZoneId.of(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">System.out.println(<span class="string">"亚洲上海此时的时间戳:"</span>+clock2.millis());</span><br><span class="line">Clock clock3 = Clock.system(ZoneId.of(<span class="string">"America/New_York"</span>));</span><br><span class="line">System.out.println(<span class="string">"美国纽约此时的时间戳:"</span>+clock3.millis());</span><br><span class="line"><span class="comment">//  当前时间戳 : 1545209277657</span></span><br><span class="line"><span class="comment">//  亚洲上海此时的时间戳:1545209277657</span></span><br><span class="line"><span class="comment">//  美国纽约此时的时间戳:1545209277658</span></span><br></pre></td></tr></table></figure></p>
<p>示例二:通过ZonedDateTime类和ZoneId<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ZoneId zoneId= ZoneId.of(<span class="string">"America/New_York"</span>);</span><br><span class="line">ZonedDateTime dateTime=ZonedDateTime.now(zoneId);</span><br><span class="line">System.out.println(<span class="string">"美国纽约此时的时间 : "</span> + dateTime.format(DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>)));</span><br><span class="line">System.out.println(<span class="string">"美国纽约此时的时间 和时区: "</span> + dateTime);</span><br><span class="line"><span class="comment">//  美国纽约此时的时间 : 2018-12-19 03:52:22.494</span></span><br><span class="line"><span class="comment">// 美国纽约此时的时间 和时区: 2018-12-19T03:52:22.494-05:00[America/New_York]</span></span><br></pre></td></tr></table></figure></p>
<p>Java 8日期时间API总结:</p>
<p>提供了javax.time.ZoneId 获取时区。<br>提供了LocalDate和LocalTime类。<br>Java 8 的所有日期和时间API都是不可变类并且线程安全，而现有的Date和Calendar API中的java.util.Date和SimpleDateFormat是非线程安全的。<br>主包是 java.time,包含了表示日期、时间、时间间隔的一些类。里面有两个子包java.time.format用于格式化， java.time.temporal用于更底层的操作。<br>时区代表了地球上某个区域内普遍使用的标准时间。每个时区都有一个代号，格式通常由区域/城市构成（Asia/Tokyo），在加上与格林威治或 UTC的时差。例如：东京的时差是+09:00。<br>OffsetDateTime类实际上组合了LocalDateTime类和ZoneOffset类。用来表示包含和格林威治或UTC时差的完整日期（年、月、日）和时间（时、分、秒、纳秒）信息。<br>DateTimeFormatter 类用来格式化和解析时间。与SimpleDateFormat不同，这个类不可变并且线程安全，需要时可以给静态常量赋值。 DateTimeFormatter类提供了大量的内置格式化工具，同时也允许你自定义。在转换方面也提供了parse()将字符串解析成日期，如果解析出错会抛出DateTimeParseException。DateTimeFormatter类同时还有format()用来格式化日期，如果出错会抛出DateTimeException异常。<br>再补充一点，日期格式“MMM d yyyy”和“MMM dd yyyy”有一些微妙的不同，第一个格式可以解析“Jan 2 2014”和“Jan 14 2014”，而第二个在解析“Jan 2 2014”就会抛异常，因为第二个格式里要求日必须是两位的。如果想修正，你必须在日期只有个位数时在前面补零，就是说“Jan 2 2014”应该写成 “Jan 02 2014”。</p>
<h1 id="利用lambda以及Compartor接口进行排序"><a href="#利用lambda以及Compartor接口进行排序" class="headerlink" title="利用lambda以及Compartor接口进行排序"></a>利用lambda以及Compartor接口进行排序</h1><ul>
<li>对于有多个字段得排序，这样的方式就更加方便一点<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLambda</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;StudentCourse&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[][] nums = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">88</span>&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>&#125;, &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">9</span>&#125;, &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">88</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            StudentCourse course = <span class="keyword">new</span> StudentCourse();</span><br><span class="line">            course.setSid(nums[i][<span class="number">0</span>]);</span><br><span class="line">            course.setCid(nums[i][<span class="number">1</span>]);</span><br><span class="line">            course.setScore(nums[i][<span class="number">2</span>]);</span><br><span class="line">            list.add(course);</span><br><span class="line">        &#125;</span><br><span class="line">        list.sort(Comparator.comparing(StudentCourse::getSid).reversed()</span><br><span class="line">                .thenComparing((s1,s2)-&gt;s2.getCid().compareTo(s1.getCid()))</span><br><span class="line">                .thenComparing(StudentCourse::getScore));</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentCourse(sid=<span class="number">8</span>, cid=<span class="number">4</span>, score=<span class="number">7</span>)</span><br><span class="line">StudentCourse(sid=<span class="number">8</span>, cid=<span class="number">2</span>, score=<span class="number">9</span>)</span><br><span class="line">StudentCourse(sid=<span class="number">8</span>, cid=<span class="number">2</span>, score=<span class="number">88</span>)</span><br><span class="line">StudentCourse(sid=<span class="number">1</span>, cid=<span class="number">4</span>, score=<span class="number">88</span>)</span><br></pre></td></tr></table></figure>
<p>转自: <a href="http://www.cnblogs.com/xuwujing" target="_blank" rel="noopener">http://www.cnblogs.com/xuwujing</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lambda</tag>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL，一叶障目，不见泰山</title>
    <url>/archives/5bea5d90.html</url>
    <content><![CDATA[<ul>
<li>过于草率地相信直觉的判断了，作为一个猜想是需要验证的，想当然才是根源</li>
<li>执行力不够，脑袋里产生想法之后一定要立即马上去验证，时间长了就忘了！！（最次也得上备忘录）</li>
<li>对于连表的理解有欠缺</li>
<li>sql语句多学多看，多查，终身学习，不要被其他的边边角角占据了头脑，保持敏锐！</li>
<li>对于where in和inner join，not in 和left join之间的转化关系有进一步了解</li>
<li>前几名的问题，使用group_concat 和 find_in_set的形式可以方便地解决问题</li>
<li>周的生日的问题，年份必须转化，不然只会是错误的结果</li>
<li>case when 的用法，常见于行和列的转化</li>
<li>MySQL里没有排名函数，所以使用定义的方式就尤为重要，尤其是不保留排名的方式，必须要3个变量</li>
</ul>
<h1 id="Update-Join"><a href="#Update-Join" class="headerlink" title="Update Join"></a>Update Join</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> table_name_1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table_name_2 <span class="keyword">on</span> table_name_1.id = table_name_2.uid</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table_name_3 <span class="keyword">on</span> table_name_3.id = table_name_1.tid</span><br><span class="line"><span class="keyword">set</span> *** = ***</span><br><span class="line"><span class="keyword">where</span> ***</span><br></pre></td></tr></table></figure>
<h1 id="Delete-Join"><a href="#Delete-Join" class="headerlink" title="Delete Join"></a>Delete Join</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a <span class="keyword">FROM</span> t1 a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">min</span>(info_id) <span class="keyword">AS</span> infoId</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> form_id) b <span class="keyword">ON</span> a.info_id = b.infoId <span class="keyword">WHERE</span> b.infoId <span class="keyword">is</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>
<h1 id="in-和-exists"><a href="#in-和-exists" class="headerlink" title="in 和 exists"></a>in 和 exists</h1><p>in是把外表和内表作hash连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询，一直以来认为exists比in效率高的说法是不准确的。如果查询的两个表大小相当，那么用in和exists差别不大；如果两个表中一个较小一个较大，则子查询表大的用exists，子查询表小的用in；</p>
<p>例如：表A(小表)，表B(大表)</p>
<p>select * from A where cc in(select cc from B)　　–&gt;效率低，用到了A表上cc列的索引；</p>
<p>select * from A where exists(select cc from B where cc=A.cc)　　–&gt;效率高，用到了B表上cc列的索引。<br>相反的：</p>
<p>select * from B where cc in(select cc from A)　　–&gt;效率高，用到了B表上cc列的索引</p>
<p>select * from B where exists(select cc from A where cc=B.cc)　　–&gt;效率低，用到了A表上cc列的索引。</p>
<h1 id="not-in-和not-exists"><a href="#not-in-和not-exists" class="headerlink" title="not in 和not exists"></a>not in 和not exists</h1><p>not in 逻辑上不完全等同于not exists，如果你误用了not in，小心你的程序存在致命的BUG，请看下面的例子：</p>
<p>create table #t1(c1 int,c2 int);</p>
<p>create table #t2(c1 int,c2 int);</p>
<p>insert into #t1 values(1,2);</p>
<p>insert into #t1 values(1,3);</p>
<p>insert into #t2 values(1,2);</p>
<p>insert into #t2 values(1,null);</p>
<p>select * from #t1 where c2 not in(select c2 from #t2);　　–&gt;执行结果：无</p>
<p>select * from #t1 where not exists(select 1 from #t2 where #t2.c2=#t1.c2)　　–&gt;执行结果：1　　3</p>
<p>正如所看到的，not in出现了不期望的结果集，存在逻辑错误。如果看一下上述两个select 语句的执行计划，也会不同，后者使用了hash_aj，所以，请尽量不要使用not in(它会调用子查询)，而尽量使用not exists（它会调用关联子查询）。如果子查询中返回的任意一条记录含有空值，则查询将不返回任何记录。如果子查询字段有非空限制，这时可以使用not in，并且可以通过提示让它用hasg_aj或merge_aj连接。</p>
<p>如果查询语句使用了not in，那么对内外表都进行全表扫描，没有用到索引；而not exists的子查询依然能用到表上的索引。所以无论哪个表大，用not exists都比not in 要快。</p>
<ul>
<li>说多了都是泪啊</li>
</ul>
<h1 id="获取表中某字段包含某字符串的数据"><a href="#获取表中某字段包含某字符串的数据" class="headerlink" title="获取表中某字段包含某字符串的数据"></a>获取表中某字段包含某字符串的数据</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`表名`</span> <span class="keyword">WHERE</span> <span class="keyword">LOCATE</span>(<span class="string">'关键字'</span>, 字段名)</span><br></pre></td></tr></table></figure>
<ul>
<li>locate函数的用法</li>
</ul>
<h1 id="连续范围的问题"><a href="#连续范围的问题" class="headerlink" title="连续范围的问题"></a>连续范围的问题</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test_number`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`number`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'数字'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">5</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">7</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_number <span class="keyword">values</span>(<span class="number">8</span>,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">min</span>(<span class="built_in">number</span>) start_range, <span class="keyword">max</span>(<span class="built_in">number</span>) end_range</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">number</span>, rn, <span class="built_in">number</span> - rn diff</span><br><span class="line">      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="built_in">number</span>, @<span class="built_in">number</span> := @<span class="built_in">number</span> + <span class="number">1</span> rn</span><br><span class="line">            <span class="keyword">FROM</span> test_number,</span><br><span class="line">                 (<span class="keyword">SELECT</span> @<span class="built_in">number</span> := <span class="number">0</span>) <span class="keyword">AS</span> <span class="built_in">number</span>) b) c</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> diff;</span><br></pre></td></tr></table></figure>
<h1 id="签到问题"><a href="#签到问题" class="headerlink" title="签到问题"></a>签到问题</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建参考表(模拟数据需要用到)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test_nums`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'参考表'</span>;</span><br><span class="line"><span class="comment"># 模拟数据，插入 1-1000 连续数据.</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">PROCEDURE</span> <span class="keyword">test</span>()</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">int</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    WHILE (i &lt; 1000) DO INSERT INTO test_nums VALUES (i);</span><br><span class="line">      <span class="keyword">SET</span> i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">CALL</span> <span class="keyword">test</span>();</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test_sign_history`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'签到时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'签到历史表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_sign_history(uid,create_time)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ceil</span>(<span class="keyword">rand</span>()*<span class="number">10000</span>),<span class="keyword">str_to_date</span>(<span class="string">'2016-12-11'</span>,<span class="string">'%Y-%m-%d'</span>)+<span class="built_in">interval</span> <span class="keyword">ceil</span>(<span class="keyword">rand</span>()*<span class="number">10000</span>) <span class="keyword">minute</span></span><br><span class="line"><span class="keyword">from</span> test_nums <span class="keyword">where</span> <span class="keyword">id</span>&lt;<span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每天的每小时用户签到情况</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">       tmp.h,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161211'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">11</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161212'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">12</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161213'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">13</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161214'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">14</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161215'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">15</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161216'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">16</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161217'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">17</span><span class="keyword">sign</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">hour</span>(create_time) h,<span class="keyword">date_format</span>(create_time,<span class="string">'%Y%m%d'</span>) <span class="keyword">as</span> d,<span class="keyword">count</span>(*) c</span><br><span class="line"><span class="keyword">FROM</span> test_sign_history <span class="keyword">group</span> <span class="keyword">BY</span> h,d) tmp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tmp.h <span class="keyword">ORDER</span> <span class="keyword">BY</span> tmp.h;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每天的每小时用户签到情况(当某个小时没有数据时，显示0)</span></span><br><span class="line"><span class="comment"># 主要在于使用了辅助表，使用它用来作为left join 的主表</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">       tmp.h,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161211'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">11</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161212'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">12</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161213'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">13</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161214'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">14</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161215'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">15</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161216'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">16</span><span class="keyword">sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> tmp.d = <span class="string">'20161217'</span> <span class="keyword">THEN</span> tmp.c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="number">17</span><span class="keyword">sign</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     (<span class="keyword">SELECT</span> b.h,tsh.d,tsh.c</span><br><span class="line">     <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">as</span> h <span class="keyword">FROM</span> test_nums <span class="keyword">WHERE</span> <span class="keyword">id</span> &lt;= <span class="number">24</span>) b</span><br><span class="line">     <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">     (<span class="keyword">select</span> <span class="keyword">hour</span>(create_time) h,<span class="keyword">date_format</span>(create_time,<span class="string">'%Y%m%d'</span>) <span class="keyword">as</span> d,<span class="keyword">count</span>(*) c</span><br><span class="line">      <span class="keyword">FROM</span> test_sign_history <span class="keyword">group</span> <span class="keyword">BY</span> h,d) tsh <span class="keyword">ON</span> b.h = tsh.h</span><br><span class="line">     ) tmp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tmp.h <span class="keyword">ORDER</span> <span class="keyword">BY</span> tmp.h;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每天的用户签到数据和每天的增量数据</span></span><br><span class="line"><span class="comment"># 自己想的写法</span></span><br><span class="line"><span class="keyword">SELECT</span> t.d, t.cnt, t.cnt - @rown <span class="keyword">AS</span> increase, @rown := t.cnt</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">date_format</span>(create_time, <span class="string">'%Y%m%d'</span>) <span class="keyword">AS</span> d, <span class="keyword">count</span>(*) <span class="keyword">AS</span> cnt</span><br><span class="line">            <span class="keyword">FROM</span> test_sign_history</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> d</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> d) t,</span><br><span class="line">     (<span class="keyword">SELECT</span> @rown := <span class="number">0</span>) r;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考写法</span></span><br><span class="line"><span class="comment"># 两种写法，思想不同而已</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">type</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> create_time = <span class="string">'2016-12-11'</span> <span class="keyword">THEN</span> c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="number">11</span><span class="keyword">Sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> create_time = <span class="string">'2016-12-12'</span> <span class="keyword">THEN</span> c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="number">12</span><span class="keyword">Sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> create_time = <span class="string">'2016-12-13'</span> <span class="keyword">THEN</span> c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="number">13</span><span class="keyword">Sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> create_time = <span class="string">'2016-12-14'</span> <span class="keyword">THEN</span> c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="number">14</span><span class="keyword">Sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> create_time = <span class="string">'2016-12-15'</span> <span class="keyword">THEN</span> c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="number">15</span><span class="keyword">Sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> create_time = <span class="string">'2016-12-16'</span> <span class="keyword">THEN</span> c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="number">16</span><span class="keyword">Sign</span>,</span><br><span class="line">       <span class="keyword">sum</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> create_time = <span class="string">'2016-12-17'</span> <span class="keyword">THEN</span> c <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="number">17</span><span class="keyword">Sign</span></span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> b.create_time, <span class="keyword">ifnull</span>(b.c - c.c, <span class="number">0</span>) c, <span class="string">'Increment'</span> <span class="keyword">type</span></span><br><span class="line">      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>) create_time, <span class="keyword">count</span>(*) c</span><br><span class="line">            <span class="keyword">FROM</span> test_sign_history</span><br><span class="line">            <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>)) b</span><br><span class="line">             <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>) create_time, <span class="keyword">count</span>(*) c</span><br><span class="line">                        <span class="keyword">FROM</span> test_sign_history</span><br><span class="line">                        <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>)) c</span><br><span class="line">               <span class="keyword">ON</span> (b.create_time = c.create_time + <span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>)</span><br><span class="line">      <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>) create_time, <span class="keyword">count</span>(*) c, <span class="string">'Current'</span></span><br><span class="line">      <span class="keyword">FROM</span> test_sign_history</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>)) a</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">type</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">type</span> = <span class="string">'Current'</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟不同的用户签到了不同的天数</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_sign_history(uid,create_time)</span><br><span class="line"><span class="keyword">select</span> uid,create_time + <span class="built_in">interval</span> <span class="keyword">ceil</span>(<span class="keyword">rand</span>()*<span class="number">10</span>) <span class="keyword">day</span> <span class="keyword">from</span> test_sign_history,test_nums</span><br><span class="line"><span class="keyword">where</span> test_nums.id &lt;<span class="number">10</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">rand</span>() <span class="keyword">limit</span> <span class="number">150</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计签到天数相同的用户数量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">date_format</span>(create_time,<span class="string">'%Y%m%d'</span>) <span class="keyword">as</span> d,<span class="keyword">count</span>(<span class="keyword">DISTINCT</span> uid) <span class="keyword">AS</span> user_cnt</span><br><span class="line"><span class="keyword">FROM</span> test_sign_history <span class="keyword">GROUP</span> <span class="keyword">BY</span> d <span class="keyword">ORDER</span> <span class="keyword">BY</span> d;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计每个用户的连续签到时间</span></span><br><span class="line"><span class="comment"># 属于连续问题的解决办法</span></span><br><span class="line"><span class="keyword">SELECT</span> tmp2.uid,<span class="keyword">max</span>(tmp2.sign_last) <span class="keyword">FROM</span></span><br><span class="line">       (</span><br><span class="line">       <span class="keyword">SELECT</span> tmp.uid, <span class="keyword">min</span>(d) <span class="keyword">AS</span> begin_date, <span class="keyword">max</span>(d) <span class="keyword">AS</span> end_date, <span class="keyword">datediff</span>(<span class="keyword">max</span>(d), <span class="keyword">min</span>(d)) + <span class="number">1</span> <span class="keyword">AS</span> sign_last</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ud.uid, ud.d, <span class="keyword">datediff</span>(ud.d, @<span class="built_in">time</span>) <span class="keyword">AS</span> diff, @<span class="built_in">time</span> := @<span class="built_in">time</span> + <span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span></span><br><span class="line">              <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> uid, <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>) <span class="keyword">AS</span> d</span><br><span class="line">                    <span class="keyword">FROM</span> test_sign_history</span><br><span class="line">                    <span class="keyword">GROUP</span> <span class="keyword">BY</span> uid, d</span><br><span class="line">                    <span class="keyword">ORDER</span> <span class="keyword">BY</span> uid, d) ud,</span><br><span class="line">                   (<span class="keyword">SELECT</span> @<span class="built_in">time</span> := <span class="string">'2016-01-01'</span>) t) tmp</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> tmp.uid, tmp.diff</span><br><span class="line">       ) tmp2 <span class="keyword">GROUP</span> <span class="keyword">BY</span> tmp2.uid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考写法</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> d.*, @ggid := @cggid, @cggid := d.uid, <span class="keyword">if</span>(@ggid = @cggid, @grank := @grank + <span class="number">1</span>, @grank := <span class="number">1</span>) grank</span><br><span class="line">      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> uid, <span class="keyword">min</span>(c.create_time) begin_date, <span class="keyword">max</span>(c.create_time) end_date, <span class="keyword">count</span>(*) <span class="keyword">count</span></span><br><span class="line">            <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> b.*,</span><br><span class="line">                         @gid := @cgid,</span><br><span class="line">                         @cgid := b.uid,</span><br><span class="line">                         <span class="keyword">if</span>(@gid = @cgid, @<span class="keyword">rank</span> := @<span class="keyword">rank</span> + <span class="number">1</span>, @<span class="keyword">rank</span> := <span class="number">1</span>),</span><br><span class="line">                         b.diff - @<span class="keyword">rank</span> <span class="keyword">as</span> flag</span><br><span class="line">                  <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> uid,</span><br><span class="line">                                        <span class="keyword">date_format</span>(create_time, <span class="string">'%Y-%m-%d'</span>) create_time,</span><br><span class="line">                                        <span class="keyword">datediff</span>(create_time, <span class="keyword">now</span>())         diff</span><br><span class="line">                        <span class="keyword">FROM</span> test_sign_history</span><br><span class="line">                        <span class="keyword">ORDER</span> <span class="keyword">BY</span> uid, create_time) b,</span><br><span class="line">                       (<span class="keyword">SELECT</span> @gid := <span class="number">1</span>, @cgid := <span class="number">1</span>, @<span class="keyword">rank</span> := <span class="number">1</span>) <span class="keyword">AS</span> a) c</span><br><span class="line">            <span class="keyword">GROUP</span> <span class="keyword">BY</span> uid, flag</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> uid, <span class="keyword">count</span>(*) <span class="keyword">DESC</span>) d,</span><br><span class="line">           (<span class="keyword">SELECT</span> @ggid := <span class="number">1</span>, @cggid := <span class="number">1</span>, @grank := <span class="number">1</span>) <span class="keyword">AS</span> e)f</span><br><span class="line"><span class="keyword">WHERE</span> grank = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/Thomson617/article/details/83140926" target="_blank" rel="noopener">MySQL2</a></p>
<h1 id="MySQL的测试表"><a href="#MySQL的测试表" class="headerlink" title="MySQL的测试表"></a>MySQL的测试表</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line">  s_id <span class="built_in">varchar</span> (<span class="number">20</span>),</span><br><span class="line">  s_name <span class="built_in">varchar</span> (<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  s_birth <span class="built_in">varchar</span> (<span class="number">20</span>)<span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  s_sex <span class="built_in">varchar</span> (<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (s_id)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(</span><br><span class="line">  c_id <span class="built_in">varchar</span> (<span class="number">20</span>),</span><br><span class="line">  c_name <span class="built_in">varchar</span> (<span class="number">20</span>)<span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  t_id <span class="built_in">varchar</span> (<span class="number">20</span>)<span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  primary <span class="keyword">key</span>( c_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(</span><br><span class="line">  t_id <span class="built_in">varchar</span> (<span class="number">20</span>),</span><br><span class="line">  t_name <span class="built_in">varchar</span> (<span class="number">20</span>)<span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (t_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">  s_id <span class="built_in">varchar</span> (<span class="number">20</span>),</span><br><span class="line">  c_id <span class="built_in">varchar</span> (<span class="number">20</span>),</span><br><span class="line">  s_score <span class="built_in">int</span>(<span class="number">3</span>),</span><br><span class="line">  primary <span class="keyword">key</span> (s_id,c_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'赵雷'</span> , <span class="string">'1990-01-01'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'钱电'</span> , <span class="string">'1990-12-21'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'孙风'</span> , <span class="string">'1990-05-20'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'李云'</span> , <span class="string">'1990-08-06'</span> , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'周梅'</span> , <span class="string">'1991-12-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'吴兰'</span> , <span class="string">'1992-03-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'郑竹'</span> , <span class="string">'1989-07-01'</span> , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'08'</span> , <span class="string">'王菊'</span> , <span class="string">'1990-01-20'</span> , <span class="string">'女'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'语文'</span> , <span class="string">'02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'数学'</span> , <span class="string">'01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'英语'</span> , <span class="string">'03'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'李四'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'王五'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'02'</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'03'</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'01'</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'02'</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'02'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'01'</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'02'</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'03'</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'01'</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'02'</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'01'</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'03'</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'02'</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Score <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'03'</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure>
<h1 id="查询”01”课程比”02”课程成绩高的学生的信息及课程分数"><a href="#查询”01”课程比”02”课程成绩高的学生的信息及课程分数" class="headerlink" title="查询”01”课程比”02”课程成绩高的学生的信息及课程分数"></a>查询”01”课程比”02”课程成绩高的学生的信息及课程分数</h1><ul>
<li>考虑02课程没选的的情况<br>SELECT<pre><code>s.*,sc.s_score AS 01score,sc2.s_score AS 02score
</code></pre>FROM student s INNER JOIN score sc ON s.s_id = sc.s_id AND sc.c_id = ‘01’<pre><code>LEFT JOIN score sc2 ON s.s_id = sc2.s_id AND sc2.c_id = &apos;02&apos;
</code></pre>WHERE sc.s_score &lt; sc2.s_score OR sc.s_score is NULL ;</li>
</ul>
<p>SELECT student.*, a.s_score AS 01_score, b.s_score AS 02_score<br>FROM student<br>       JOIN score a ON student.s_id = a.s_id AND a.c_id = ‘01’<br>       LEFT JOIN score b ON student.s_id = b.s_id AND b.c_id = ‘02’ OR b.c_id = NULL<br>WHERE a.s_score &gt; b.s_score;</p>
<h1 id="查询”01”课程比”02”课程成绩低的学生的信息及课程分数"><a href="#查询”01”课程比”02”课程成绩低的学生的信息及课程分数" class="headerlink" title="查询”01”课程比”02”课程成绩低的学生的信息及课程分数"></a>查询”01”课程比”02”课程成绩低的学生的信息及课程分数</h1><p>SELECT student.*, a.s_score AS 01_score, b.s_score AS 02_score<br>FROM student<br>       JOIN score a ON student.s_id = a.s_id AND a.c_id = ‘01’ OR a.c_id = NULL<br>       LEFT JOIN score b ON student.s_id = b.s_id AND b.c_id = ‘02’<br>WHERE a.s_score &lt; b.s_score;</p>
<h1 id="查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩"><a href="#查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩" class="headerlink" title="查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩"></a>查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</h1><ul>
<li>group by 之后，如果已经group by 了用以区分的id,那么其他所有的属性都是可以直接得出来的<br>SELECT<pre><code>s.s_id,s.s_name,round(avg(sc.s_score),1) as avg_score
</code></pre>FROM student s LEFT JOIN score sc on s.s_id = sc.s_id<br>GROUP BY s.s_id,s.s_name HAVING avg(sc.s_score) &gt;= 60;</li>
</ul>
<p>SELECT student.s_id, student.s_name, tmp.avg_score<br>FROM student<br>       JOIN (SELECT score.s_id, round(avg(score.s_score), 1)AS avg_score FROM score GROUP BY s_id)AS tmp<br>         ON tmp.avg_score &gt;= 60<br>WHERE student.s_id = tmp.s_id;</p>
<p>–答案2</p>
<p>SELECT student.s_id, student.s_name, round(avg(score.s_score), 1) AS avg_score<br>FROM student<br>       JOIN score ON student.s_id = score.s_id<br>GROUP BY score.s_id<br>HAVING avg(score.s_score) &gt;= 60;</p>
<h1 id="查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩"><a href="#查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩" class="headerlink" title="查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩"></a>查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩</h1><p>– (包括有成绩的和无成绩的)<br>SELECT<br>       s.s_id,s.s_name,ifnull(round(avg(sc.s_score),1),0) as avg_score<br>FROM student s LEFT JOIN score sc on s.s_id = sc.s_id<br>GROUP BY s.s_id,s.s_name HAVING avg(sc.s_score) &lt; 60<br>                             or count(sc.s_score) = 0;</p>
<p>SELECT student.s_id, student.s_name, tmp.avg_score<br>FROM student<br>       JOIN (SELECT score.s_id, round(avg(score.s_score), 1)AS avg_score FROM score GROUP BY s_id)AS tmp<br>         ON tmp.avg_score &lt; 60<br>WHERE student.s_id = tmp.s_id<br>UNION<br>SELECT s_id, s_name, 0 AS avg_score<br>FROM student<br>WHERE s_id NOT IN<br>      (SELECT DISTINCT s_id FROM score);</p>
<p>–答案2</p>
<p>SELECT student.s_id, student.s_name, round(avg(score.s_score), 1) AS avg_score<br>FROM student<br>       JOIN score ON student.s_id = score.s_id<br>GROUP BY score.s_id<br>HAVING avg(score.s_score) &lt; 60<br>UNION<br>SELECT s_id, s_name, 0 AS avg_score<br>FROM student<br>WHERE s_id NOT IN<br>      (SELECT DISTINCT s_id FROM score);</p>
<h1 id="查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩"><a href="#查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩" class="headerlink" title="查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩"></a>查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</h1><p>SELECT  s.s_id,s.s_name,count(DISTINCT sc.c_id) as num,sum(sc.s_score) as total<br>FROM student s LEFT JOIN score sc ON s.s_id = sc.s_id<br>GROUP BY s.s_id ORDER BY total DESC ;</p>
<p>SELECT student.s_id, student.s_name, count(score.c_id) AS total_count, sum(score.s_score)AS total_score<br>FROM student<br>       LEFT JOIN score ON student.s_id = score.s_id<br>GROUP BY student.s_id ORDER BY total_score DESC ;</p>
<h1 id="查询”李”姓老师的数量"><a href="#查询”李”姓老师的数量" class="headerlink" title="查询”李”姓老师的数量"></a>查询”李”姓老师的数量</h1><p>SELECT count(1)<br>FROM teacher<br>WHERE t_name LIKE ‘李%’;</p>
<h1 id="查询学过”张三”老师授课的同学的信息"><a href="#查询学过”张三”老师授课的同学的信息" class="headerlink" title="查询学过”张三”老师授课的同学的信息"></a>查询学过”张三”老师授课的同学的信息</h1><p>– 这就是因为对于连表的概念还不够融汇贯通的表现<br>SELECT student.*<br>FROM student INNER JOIN<br>         (SELECT sc.s_id<br>          FROM score sc INNER JOIN course c ON sc.c_id = c.c_id<br>                        INNER JOIN teacher t ON c.t_id = t.t_id WHERE t.t_name= ‘张三’) tmp<br>         ON student.s_id = tmp.s_id;</p>
<p>SELECT student.*<br>FROM student INNER JOIN<br>         score sc ON student.s_id = sc.s_id INNER JOIN course c ON sc.c_id = c.c_id<br>             INNER JOIN teacher t ON c.t_id = t.t_id WHERE t.t_name= ‘张三’;</p>
<p>SELECT *<br>FROM student<br>       JOIN score ON student.s_id = score.s_id<br>WHERE score.c_id IN (SELECT course.c_id<br>                     FROM course<br>                     WHERE course.t_id IN (SELECT teacher.t_id FROM teacher WHERE teacher.t_name = ‘张三’));</p>
<p>–答案2</p>
<p>SELECT student.*<br>FROM student<br>       JOIN score ON student.s_id = score.s_id<br>       JOIN course ON course.c_id = score.c_id<br>       JOIN teacher ON course.t_id = teacher.t_id AND t_name = ‘张三’;</p>
<h1 id="查询没学过”张三”老师授课的同学的信息"><a href="#查询没学过”张三”老师授课的同学的信息" class="headerlink" title="查询没学过”张三”老师授课的同学的信息"></a>查询没学过”张三”老师授课的同学的信息</h1><p>SELECT *<br>FROM student<br>WHERE s_id NOT IN (SELECT score.s_id<br>                   FROM score<br>                   WHERE score.c_id IN (SELECT course.c_id<br>                                        FROM course<br>                                        WHERE course.t_id =<br>                                              (SELECT teacher.t_id FROM teacher WHERE teacher.t_name = ‘张三’)));</p>
<p>SELECT student.*<br>FROM student LEFT JOIN<br>         (SELECT sc.s_id<br>          FROM score sc INNER JOIN course c ON sc.c_id = c.c_id<br>                        INNER JOIN teacher t ON c.t_id = t.t_id WHERE t.t_name= ‘张三’) tmp<br>         ON student.s_id = tmp.s_id WHERE tmp.s_id is NULL ;</p>
<p>–答案2</p>
<p>SELECT student.*<br>FROM student<br>       LEFT JOIN (SELECT s_id<br>                  FROM score<br>                         JOIN course ON course.c_id = score.c_id<br>                         JOIN teacher ON course.t_id = teacher.t_id AND t_name = ‘张三’)tmp ON student.s_id = tmp.s_id<br>WHERE tmp.s_id IS NULL;</p>
<h1 id="查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息"><a href="#查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息" class="headerlink" title="查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息"></a>查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息</h1><p>SELECT *<br>FROM student<br>WHERE s_id IN (SELECT s_id FROM score WHERE c_id = 1)<br>  AND s_id IN (SELECT s_id FROM score WHERE c_id = 2);</p>
<h1 id="查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息"><a href="#查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息" class="headerlink" title="查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息"></a>查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息</h1><p>SELECT *<br>FROM student<br>WHERE s_id IN (SELECT s_id FROM score WHERE c_id = 1)<br>  AND s_id NOT IN (SELECT s_id FROM score WHERE c_id = 2);</p>
<p>–答案2</p>
<p>SELECT student.*<br>FROM student<br>       JOIN (SELECT s_id FROM score WHERE c_id = 1)tmp1 ON student.s_id = tmp1.s_id<br>       LEFT JOIN (SELECT s_id FROM score WHERE c_id = 2)tmp2 ON student.s_id = tmp2.s_id<br>WHERE tmp2.s_id IS NULL;</p>
<h1 id="查询没有学全所有课程的同学的信息"><a href="#查询没有学全所有课程的同学的信息" class="headerlink" title="查询没有学全所有课程的同学的信息"></a>查询没有学全所有课程的同学的信息</h1><p>SELECT *<br>FROM student<br>WHERE s_id NOT IN (SELECT s_id FROM score GROUP BY s_id HAVING count(c_id) = (SELECT count(1) FROM course));</p>
<h1 id="查询至少有一门课与学号为”01”的同学所学相同的同学的信息"><a href="#查询至少有一门课与学号为”01”的同学所学相同的同学的信息" class="headerlink" title="查询至少有一门课与学号为”01”的同学所学相同的同学的信息"></a>查询至少有一门课与学号为”01”的同学所学相同的同学的信息</h1><p>– 对于这种单个的条件的情况下，使用where in的方式，明显更加直接，如果有多个条件的情况下，使用join才是优势<br>SELECT DISTINCT student.* FROM student INNER JOIN score ON student.s_id = score.s_id WHERE score.c_id IN<br>                                                                                           (SELECT c_id FROM score WHERE s_id = ‘01’) AND student.s_id &lt;&gt; ‘01’;</p>
<p>SELECT *<br>FROM student<br>WHERE s_id &lt;&gt; 01<br>  AND s_id IN (SELECT s_id FROM score WHERE c_id IN (SELECT c_id FROM score WHERE score.s_id = 01) GROUP BY s_id);</p>
<h1 id="查询和”01”号的同学学习的课程完全相同的其他同学的信息"><a href="#查询和”01”号的同学学习的课程完全相同的其他同学的信息" class="headerlink" title="查询和”01”号的同学学习的课程完全相同的其他同学的信息"></a>查询和”01”号的同学学习的课程完全相同的其他同学的信息</h1><p>– 使用了group_concat的知识，还以为能有什么新鲜的<br>SELECT s.*,tmp1.cids FROM student s INNER JOIN<br>                              (SELECT s_id,group_concat(c_id ORDER by c_id) as cids FROM score GROUP BY s_id ) tmp1<br>                              ON s.s_id = tmp1.s_id AND s.s_id &lt;&gt; ‘01’<br>WHERE tmp1.cids =<br>      (SELECT group_concat(c_id ORDER by c_id) as cids FROM score WHERE s_id = ‘01’ GROUP BY s_id );</p>
<p>SELECT student.*, tmp.course_id<br>FROM (SELECT s_id, group_concat(c_id) course_id<br>      FROM score<br>      GROUP BY s_id<br>      HAVING s_id &lt;&gt; 1<br>         AND course_id = (SELECT group_concat(c_id) course_id2 FROM score WHERE s_id = 1))tmp<br>       JOIN student ON student.s_id = tmp.s_id;</p>
<h1 id="查询没学过”张三”老师讲授的任一门课程的学生姓名"><a href="#查询没学过”张三”老师讲授的任一门课程的学生姓名" class="headerlink" title="查询没学过”张三”老师讲授的任一门课程的学生姓名"></a>查询没学过”张三”老师讲授的任一门课程的学生姓名</h1><p>SELECT *<br>FROM student<br>WHERE s_id NOT IN (SELECT s_id<br>                   FROM score<br>                          JOIN (SELECT c_id FROM course WHERE t_id IN (SELECT t_id FROM teacher WHERE t_name = ‘张三’))tmp<br>                            ON score.c_id = tmp.c_id);</p>
<p>–答案2</p>
<p>SELECT student.*<br>FROM student<br>       LEFT JOIN (SELECT s_id<br>                  FROM score<br>                         JOIN (SELECT c_id FROM course<br>                                                  JOIN teacher ON course.t_id = teacher.t_id AND t_name = ‘张三’)tmp2<br>                           ON score.c_id = tmp2.c_id)tmp ON student.s_id = tmp.s_id<br>WHERE tmp.s_id IS NULL;</p>
<h1 id="查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩"><a href="#查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩" class="headerlink" title="查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩"></a>查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩</h1><p>– 关于sum里面可以使用计算条件的方式，很多人都不知道<br>SELECT s.*,round(tmp.avg_score,1) as avg_score FROM student s INNER JOIN<br>                                                        (SELECT s_id,avg(s_score) as avg_score FROM score GROUP BY s_id HAVING sum(s_score &lt; 60) &gt;=2) tmp<br>                                                        ON s.s_id = tmp.s_id;</p>
<p>SELECT student.s_id, student.s_name, tmp.avg_score<br>FROM student<br>       LEFT JOIN (SELECT s_id, round(AVG(score.s_score)) avg_score FROM score GROUP BY s_id)tmp<br>         ON tmp.s_id = student.s_id<br>WHERE student.s_id IN (SELECT s_id FROM score WHERE s_score &lt; 60 GROUP BY score.s_id HAVING count(s_id) &gt; 1);</p>
<h1 id="检索”01”课程分数小于60，按分数降序排列的学生信息"><a href="#检索”01”课程分数小于60，按分数降序排列的学生信息" class="headerlink" title="检索”01”课程分数小于60，按分数降序排列的学生信息"></a>检索”01”课程分数小于60，按分数降序排列的学生信息</h1><p>SELECT student.*, s_score<br>FROM student,<br>     score<br>WHERE student.s_id = score.s_id<br>  AND s_score &lt; 60<br>  AND c_id = ‘01’<br>ORDER BY s_score DESC;</p>
<h1 id="按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩"><a href="#按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩" class="headerlink" title="按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩"></a>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</h1><p>– 在查找的选项里还是可以有这种花式的写法的<br>SELECT s_id,<br>       (SELECT s_score<br>        FROM score<br>        WHERE s_id = a.s_id<br>          AND c_id = ‘01’)AS     语文,<br>       (SELECT s_score<br>        FROM score<br>        WHERE s_id = a.s_id<br>          AND c_id = ‘02’)AS     数学,<br>       (SELECT s_score<br>        FROM score<br>        WHERE s_id = a.s_id<br>          AND c_id = ‘03’)AS     英语,<br>       round(avg(s_score), 2) AS 平均分<br>FROM score a<br>GROUP BY s_id<br>ORDER BY 平均分 DESC;</p>
<p>–答案2<br>– 尝试使用group_concat 的方式处理,外连接的一点模糊领域，要知道一个都连不到的情况下才会出现null</p>
<p>SELECT sc.s_id,avg(sc.s_score) as avg_score,group_concat(sc.s_score) FROM score sc<br>                                                                            RIGHT JOIN course c ON c.c_id = sc.c_id<br>GROUP BY sc.s_id ORDER BY avg_score DESC ;</p>
<p>– 由于如果一旦使用了group by sid的方式，那么各科的成绩将无法获取，所以使用left join 多个表的形式处理<br>SELECT a.s_id,<br>       tmp1.s_score             AS chinese,<br>       tmp2.s_score             AS math,<br>       tmp3.s_score             AS english,<br>       round(avg(a.s_score), 2) AS avgScore<br>FROM score a<br>       LEFT JOIN (SELECT s_id, s_score FROM score s1 WHERE c_id = ‘01’)tmp1 ON tmp1.s_id = a.s_id<br>       LEFT JOIN (SELECT s_id, s_score FROM score s2 WHERE c_id = ‘02’)tmp2 ON tmp2.s_id = a.s_id<br>       LEFT JOIN (SELECT s_id, s_score FROM score s3 WHERE c_id = ‘03’)tmp3 ON tmp3.s_id = a.s_id<br>GROUP BY a.s_id, tmp1.s_score, tmp2.s_score, tmp3.s_score<br>ORDER BY avgScore DESC;</p>
<h1 id="查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率-–及格为-gt-60，中等为：70-80，优良为：80-90，优秀为：-gt-90"><a href="#查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率-–及格为-gt-60，中等为：70-80，优良为：80-90，优秀为：-gt-90" class="headerlink" title="查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 –及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90"></a>查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 –及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</h1><p>– 再次验证了sum里面的条件其实是可以直接等效为case when的，这样就非常方便了<br>SELECT sc.c_id,c.c_name,avg(sc.s_score) avg_score,max(sc.s_score) max_score,<br>       min(sc.s_score) min_score,sum(s_score&gt;=60)/count(<em>) AS pass_rate,<br>       sum(s_score&gt;=80 AND s_score&lt;90)/count(</em>) AS good_rate<br>FROM score sc INNER JOIN course c on sc.c_id =c.c_id GROUP BY sc.c_id;</p>
<p>SELECT score.c_id    AS                                                                                     ‘课程ID’,<br>       course.c_name AS                                                                                     ‘课程name’,<br>       max(s_score)  AS                                                                                     ‘最高分’,<br>       min(s_score)AS                                                                                       ‘最低分’,<br>       round(avg(s_score), 2)                                                                               ‘平均分’,<br>       round(sum(CASE WHEN s_score &gt;= 60 THEN 1 ELSE 0 END) / sum(CASE WHEN s_score THEN 1 ELSE 0 END), 2)’及格率’,<br>       round(sum(CASE WHEN s_score &gt;= 70 AND s_score &lt; 80 THEN 1 ELSE 0 END) / sum(CASE WHEN s_score THEN 1 ELSE 0 END),<br>             2)’中等率’,<br>       round(sum(CASE WHEN s_score &gt;= 80 AND s_score &lt; 90 THEN 1 ELSE 0 END) / sum(CASE WHEN s_score THEN 1 ELSE 0 END),<br>             2)’优良率’,<br>       round(sum(CASE WHEN s_score &gt;= 90 THEN 1 ELSE 0 END) / (SUM(CASE WHEN s_score THEN 1 ELSE 0 END)), 2)’优秀率’<br>FROM score<br>       LEFT JOIN course ON score.c_id = course.c_id<br>GROUP BY score.c_id;</p>
<p>–答案2</p>
<p>SELECT course.c_id,<br>       course.c_name,<br>       tmp.maxScore,<br>       tmp.minScore,<br>       tmp.avgScore,<br>       tmp.passRate,<br>       tmp.moderate,<br>       tmp.goodRate,<br>       tmp.excellentRates<br>FROM course<br>       JOIN (SELECT c_id,<br>                    max(s_score) AS                                                                         maxScore,<br>                    min(s_score)AS                                                                          minScore,<br>                    round(avg(s_score), 2)                                                                  avgScore,<br>                    round(sum(CASE WHEN s_score &gt;= 60 THEN 1 ELSE 0 END) / count(c_id), 2)passRate,<br>                    round(sum(CASE WHEN s_score &gt;= 60 AND s_score &lt; 70 THEN 1 ELSE 0 END) / count(c_id), 2) moderate,<br>                    round(sum(CASE WHEN s_score &gt;= 70 AND s_score &lt; 80 THEN 1 ELSE 0 END) / count(c_id), 2) goodRate,<br>                    round(sum(CASE WHEN s_score &gt;= 80 AND s_score &lt; 90 THEN 1 ELSE 0 END) / count(c_id),<br>                          2)                                                                                excellentRates<br>             FROM score<br>             GROUP BY c_id)tmp ON tmp.c_id = course.c_id;</p>
<h1 id="按各科成绩进行排序，并显示排名-实现不完全"><a href="#按各科成绩进行排序，并显示排名-实现不完全" class="headerlink" title="按各科成绩进行排序，并显示排名(实现不完全)"></a>按各科成绩进行排序，并显示排名(实现不完全)</h1><p>– mysql没有rank函数<br>–方法1<br>– 关于排名的sql，很蛋疼的是可能会涉及到不同的同分情况下，是否占用排名的形式<br>– 在select的项里面，可以使用查找语句，查找出的是一个值就是了</p>
<p>(SELECT <em> FROM<br>(SELECT s1.s_id, s1.c_id, s1.s_score,<br>(SELECT COUNT(distinct sc.s_score) FROM score sc<br>WHERE sc.s_score&gt;=s1.s_score AND sc.c_id = ‘01’) as ‘rank不保留排名’<br>FROM score s1 WHERE s1.c_id = ‘01’ ORDER BY s1.s_score DESC) t1)<br>UNION (SELECT </em> FROM<br>(SELECT s1.s_id, s1.c_id, s1.s_score,<br>(SELECT COUNT(DISTINCT sc.s_score) FROM score sc<br>WHERE sc.s_score&gt;=s1.s_score AND sc.c_id = ‘02’) ‘rank不保留排名’<br>FROM score s1 WHERE s1.c_id = ‘02’ ORDER BY s1.s_score DESC) t2)<br>UNION (SELECT * FROM<br>(SELECT s1.s_id, s1.c_id, s1.s_score,<br>(SELECT COUNT(DISTINCT sc.s_score) FROM score sc<br>WHERE sc.s_score&gt;=s1.s_score AND sc.c_id = ‘03’) ‘rank不保留排名’<br>FROM score s1 WHERE s1.c_id = ‘03’ ORDER BY s1.s_score DESC) t3)</p>
<p>–方法2</p>
<p>(SELECT a.s_id, a.c_id, @i:=@i+1 AS i保留排名,<br>@k:=(CASE WHEN @score = a.s_score THEN @k ELSE @i END) AS rank不保留排名,<br>@score:=a.s_score AS score<br>FROM (SELECT <em> FROM score WHERE c_id = ‘01’ GROUP BY s_id, c_id, s_score ORDER BY s_score DESC)a,<br>(SELECT @i:=0, @k:=0, @score:=0)b)<br>UNION<br>(SELECT a.s_id, a.c_id, @m:=@m+1 AS i保留排名,<br>@k:=(CASE WHEN @score = a.s_score THEN @k ELSE @m END) AS rank不保留排名,<br>@score:=a.s_score AS score<br>FROM (SELECT </em> FROM score WHERE c_id = ‘02’ GROUP BY s_id, c_id, s_score ORDER BY s_score DESC)a,<br>(SELECT @m:=0, @k:=0, @score:=0)b)<br>UNION<br>(SELECT a.s_id, a.c_id, @x:=@x+1 AS i保留排名,<br>@k:=(CASE WHEN @score = a.s_score THEN @k ELSE @x END) AS rank不保留排名,<br>@score:=a.s_score AS score<br>FROM (SELECT * FROM score WHERE c_id = ‘03’ GROUP BY s_id, c_id, s_score ORDER BY s_score DESC)a,<br>(SELECT @x:=0, @k:=0, @score:=0)b);</p>
<h1 id="查询学生的总成绩并进行排名"><a href="#查询学生的总成绩并进行排名" class="headerlink" title="查询学生的总成绩并进行排名"></a>查询学生的总成绩并进行排名</h1><p>SELECT score.s_id, s_name, sum(s_score) sumscore<br>FROM score,<br>     student<br>WHERE score.s_id = student.s_id<br>GROUP BY score.s_id<br>ORDER BY sumscore DESC;</p>
<h1 id="查询不同老师所教不同课程平均分从高到低显示"><a href="#查询不同老师所教不同课程平均分从高到低显示" class="headerlink" title="查询不同老师所教不同课程平均分从高到低显示"></a>查询不同老师所教不同课程平均分从高到低显示</h1><p>–方法1<br>– 自行写法,参考写法实在是多此一举啊<br>SELECT t.t_id,sc.c_id,t.t_name,avg(sc.s_score) avgScore<br>FROM teacher t INNER JOIN course c ON t.t_id = c.t_id<br>               INNER JOIN score sc ON sc.c_id = c.c_id<br>GROUP BY t.t_id,sc.c_id ORDER BY avgScore DESC ;</p>
<p>SELECT tmp.c_id, t_id, avgscore AS ‘平均分’<br>FROM ((SELECT DISTINCT c_id, (round((SELECT avg(s_score) FROM score WHERE c_id = ‘01’ GROUP BY c_id), 2))avgscore<br>       FROM score s1<br>       WHERE c_id = ‘01’)<br>      UNION<br>      (SELECT DISTINCT c_id, (round((SELECT avg(s_score) FROM score WHERE c_id = ‘02’ GROUP BY c_id), 2))avgscore<br>       FROM score s1<br>       WHERE c_id = ‘02’)<br>      UNION<br>      (SELECT DISTINCT c_id, (round((SELECT avg(s_score) FROM score WHERE c_id = ‘03’ GROUP BY c_id), 2))avgscore<br>       FROM score s1<br>       WHERE c_id = ‘03’))tmp,<br>     course<br>WHERE tmp.c_id = course.c_id<br>ORDER BY tmp.avgscore DESC;</p>
<p>–方法2</p>
<p>SELECT course.c_id, course.t_id, t_name, round(avg(s_score), 2)AS avgscore<br>FROM course<br>       JOIN teacher ON teacher.t_id = course.t_id<br>       JOIN score ON course.c_id = score.c_id<br>GROUP BY score.c_id<br>ORDER BY avgscore DESC;</p>
<p>–方法3<br>– 使用cross join 的方式反而是对查询效率的降级<br>SELECT course.c_id, course.t_id, t_name, round(avg(s_score), 2)AS avgscore<br>FROM course,<br>     teacher,<br>     score<br>WHERE teacher.t_id = course.t_id<br>  AND course.c_id = score.c_id<br>GROUP BY score.c_id<br>ORDER BY avgscore DESC;</p>
<h1 id="查询所有课程的成绩第2名到第3名的学生信息及该课程成绩"><a href="#查询所有课程的成绩第2名到第3名的学生信息及该课程成绩" class="headerlink" title="查询所有课程的成绩第2名到第3名的学生信息及该课程成绩"></a>查询所有课程的成绩第2名到第3名的学生信息及该课程成绩</h1><p>–方法1<br>– 由于这种情况下，group by 之后没有办法使用limit，而这种特定的名词就是使用Limit的处理合适，所以就使用union进行连接</p>
<p>(SELECT student.<em>, tmp1.c_id, tmp1.s_score FROM student,<br>(SELECT s_id, c_id, s_score FROM score WHERE c_id = ‘01’ ORDER BY s_score DESC LIMIT 1, 2)tmp1<br>WHERE student.s_id = tmp1.s_id)<br>UNION (SELECT student.</em>, tmp2.c_id, tmp2.s_score FROM student,<br>(SELECT s_id, c_id, s_score FROM score WHERE c_id = ‘02’ ORDER BY s_score DESC LIMIT 1, 2)tmp2<br>WHERE student.s_id = tmp2.s_id)<br>UNION (SELECT student.*, tmp3.c_id, tmp3.s_score FROM student,<br>(SELECT s_id, c_id, s_score FROM score WHERE c_id = ‘03’ ORDER BY s_score DESC LIMIT 1, 2)tmp3<br>WHERE student.s_id = tmp3.s_id);</p>
<p>–方法2<br>– 直接找出排名，然后对排名进行筛选，当然是一种方法，但是并不推荐<br>(SELECT student.<em>, tmp.c_id, tmp.s_score, tmp.排名 FROM (<br>SELECT a.s_id, a.c_id, a.s_score, @i:=@i+1 AS 排名 FROM score a, (SELECT @i:=0)b<br>WHERE a.c_id = ‘01’ ORDER BY a.s_score DESC<br>)tmp JOIN student ON tmp.s_id = student.s_id WHERE 排名 BETWEEN 2 AND 3)<br>UNION (<br>SELECT student.</em>, tmp.c_id, tmp.s_score, tmp.排名 FROM (<br>SELECT a.s_id, a.c_id, a.s_score, @j:=@j+1 AS 排名 FROM score a, (SELECT @j:=0)b<br>WHERE a.c_id = ‘02’ ORDER BY a.s_score DESC<br>)tmp JOIN student ON tmp.s_id = student.s_id WHERE 排名 BETWEEN 2 AND 3<br>) UNION (<br>SELECT student.*, tmp.c_id, tmp.s_score, tmp.排名 FROM (<br>SELECT a.s_id, a.c_id, a.s_score, @k:=@k+1 AS 排名 FROM score a, (SELECT @k:=0)b<br>WHERE a.c_id = ‘03’ ORDER BY a.s_score DESC<br>)tmp JOIN student ON tmp.s_id = student.s_id WHERE 排名 BETWEEN 2 AND 3);</p>
<h1 id="统计各科成绩各分数段人数：课程编号-课程名称-100-85-85-70-70-60-0-60及所占百分比"><a href="#统计各科成绩各分数段人数：课程编号-课程名称-100-85-85-70-70-60-0-60及所占百分比" class="headerlink" title="统计各科成绩各分数段人数：课程编号,课程名称,100-85,85-70,70-60,0-60及所占百分比"></a>统计各科成绩各分数段人数：课程编号,课程名称,100-85,85-70,70-60,0-60及所占百分比</h1><p>– 很简单可以搞定的东西，为何需要那么复杂啊。。<br>select c.c_id,c.c_name,<br>       sum(sc.s_score&lt;=100 AND sc.s_score&gt;=85) AS a,<br>       sum(sc.s_score<85 and sc.s_score>=70) AS b,<br>       sum(sc.s_score<70 and sc.s_score>=60) AS c<br>FROM course c INNER JOIN score sc ON c.c_id = sc.c_id<br>GROUP BY c.c_id ;</70></85></p>
<h1 id="查询学生平均成绩及其名次"><a href="#查询学生平均成绩及其名次" class="headerlink" title="查询学生平均成绩及其名次"></a>查询学生平均成绩及其名次</h1><ul>
<li>因为MySQL没有rowcount的函数，所以需要使用此种形式</li>
</ul>
<p>SELECT a.s_id, a.s_name, a.平均分, @i := @i + 1 AS 排名<br>FROM (SELECT student.s_id, student.s_name, avg(score.s_score) AS “平均分”<br>      FROM student,<br>           score<br>      WHERE student.s_id = score.s_id<br>      GROUP BY score.s_id<br>      ORDER BY <code>平均分</code> DESC)a,<br>     (SELECT @i := 0)b;</p>
<h1 id="查询各科成绩前三名的记录"><a href="#查询各科成绩前三名的记录" class="headerlink" title="查询各科成绩前三名的记录"></a>查询各科成绩前三名的记录</h1><p>– 1.选出b表比a表成绩大的所有组<br>– 2.选出比当前id成绩大的 小于三个的<br>–没有查学生姓名</p>
<ul>
<li>查找前几名的方法，使用find_in_set真的是可以事半功倍啊！！<br>SELECT s1.*,s2.c_name  FROM score s1 INNER JOIN<pre><code>(SELECT sc.c_id,c.c_name,group_concat(sc.s_id ORDER BY sc.s_score DESC) as sids
 FROM score sc INNER JOIN course c on c.c_id = sc.c_id GROUP BY sc.c_id) s2 ON s1.c_id = s2.c_id WHERE
</code></pre>  find_in_set(s1.s_id,s2.sids) BETWEEN 1 AND 3 ORDER BY s1.c_id,s1.s_score DESC ;</li>
</ul>
<p>(SELECT score.c_id, course.c_name, s_score FROM score, course<br> WHERE score.c_id = ‘01’ AND course.c_id = score.c_id ORDER BY s_score DESC LIMIT 3)<br>UNION<br>    (SELECT score.c_id, course.c_name, s_score FROM score, course<br>     WHERE score.c_id = ‘02’ AND course.c_id = score.c_id ORDER BY s_score DESC LIMIT 3)<br>UNION<br>    (SELECT score.c_id, course.c_name, s_score FROM score, course<br>     WHERE score.c_id = ‘03’ AND course.c_id = score.c_id ORDER BY s_score DESC LIMIT 3);</p>
<p>–查了学生姓名</p>
<p>(SELECT score.c_id, course.c_name, student.s_name, s_score FROM score<br>JOIN student ON student.s_id = score.s_id<br>JOIN course ON score.c_id = ‘01’ AND course.c_id = score.c_id ORDER BY s_score DESC LIMIT 3)<br>UNION (<br>SELECT score.c_id, course.c_name, student.s_name, s_score FROM score<br>JOIN student ON student.s_id = score.s_id<br>JOIN course ON score.c_id = ‘02’ AND course.c_id = score.c_id ORDER BY s_score DESC LIMIT 3</p>
<p>) UNION (<br>SELECT score.c_id, course.c_name, student.s_name, s_score FROM score<br>JOIN student ON student.s_id = score.s_id<br>JOIN course ON score.c_id = ‘03’ AND course.c_id = score.c_id ORDER BY s_score DESC LIMIT 3);</p>
<h1 id="查询每门课程被重修的学生数"><a href="#查询每门课程被重修的学生数" class="headerlink" title="查询每门课程被重修的学生数"></a>查询每门课程被重修的学生数</h1><ul>
<li>能直接连接就不要使用子查询，使用count(1)的形式其实是不严谨的<br>SELECT  c.c_id,c.c_name,count(DISTINCT sc.s_id) AS cnt FROM course c LEFT JOIN score sc ON c.c_id = sc.c_id<br>WHERE sc.s_score &lt; 60<br>GROUP BY c.c_id;</li>
</ul>
<p>SELECT c.c_id, c.c_name, a.<code>被选修人数</code><br>FROM course c<br>       JOIN (SELECT c_id, count(1) AS <code>被选修人数</code> FROM score WHERE score.s_score &lt; 60 GROUP BY score.c_id)a<br>         ON a.c_id = c.c_id;</p>
<h1 id="查询出只有两门课程的全部学生的学号和姓名"><a href="#查询出只有两门课程的全部学生的学号和姓名" class="headerlink" title="查询出只有两门课程的全部学生的学号和姓名"></a>查询出只有两门课程的全部学生的学号和姓名</h1><ul>
<li>还是那句话，如果已经group by了完全的s_id了，那么其他的项都是可以获取到的<br>SELECT s.s_id,s.s_name<br>FROM student s INNER JOIN score sc ON s.s_id = sc.s_id GROUP BY s.s_id HAVING count(DISTINCT c_id) = 2;</li>
</ul>
<p>SELECT st.s_id, st.s_name<br>FROM student st<br>       JOIN (SELECT s_id FROM score GROUP BY s_id HAVING count(c_id) = 2)a ON st.s_id = a.s_id;</p>
<h1 id="查询男生、女生人数"><a href="#查询男生、女生人数" class="headerlink" title="查询男生、女生人数"></a>查询男生、女生人数</h1><p>SELECT<br>       sum(s_sex = ‘男’) as male,<br>       sum(s_sex = ‘女’) as female<br>FROM student;</p>
<p>SELECT a.男生人数, b.女生人数<br>FROM (SELECT count(1) AS 男生人数 FROM student WHERE s_sex = ‘男’)a,<br>     (SELECT count(1) AS 女生人数 FROM student WHERE s_sex = ‘女’)b;</p>
<h1 id="查询名字中含有”风”字的学生信息"><a href="#查询名字中含有”风”字的学生信息" class="headerlink" title="查询名字中含有”风”字的学生信息"></a>查询名字中含有”风”字的学生信息</h1><p>SELECT *<br>FROM student<br>WHERE s_name LIKE ‘%风%’;</p>
<h1 id="查询同名同性学生名单，并统计同名人数"><a href="#查询同名同性学生名单，并统计同名人数" class="headerlink" title="查询同名同性学生名单，并统计同名人数"></a>查询同名同性学生名单，并统计同名人数</h1><ul>
<li><p>统计个数就是聚合的方式，很简单，直接group by就是了，大不了再用find_in_set就是了<br>SELECT s_name,s_sex,GROUP_CONCAT(s_id) sids,count(s_id) cnt<br>FROM student GROUP BY s_name,s_sex HAVING count(s_id) &gt;=2;</p>
</li>
<li><p>这是错误的写法，老哥啊<br>SELECT s1.s_name, s1.s_sex, count(*) AS 同名人数<br>FROM student s1,<br>   student s2<br>WHERE s1.s_name = s2.s_name<br>AND s1.s_id &lt;&gt; s2.s_id<br>AND s1.s_sex = s2.s_sex<br>GROUP BY s1.s_name, s1.s_sex;</p>
</li>
</ul>
<h1 id="查询1990年出生的学生名单"><a href="#查询1990年出生的学生名单" class="headerlink" title="查询1990年出生的学生名单"></a>查询1990年出生的学生名单</h1><p>SELECT *<br>FROM student<br>WHERE s_birth LIKE ‘1990%’;</p>
<h1 id="查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列"><a href="#查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列" class="headerlink" title="查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列"></a>查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</h1><p>SELECT score.c_id, c_name, round(avg(s_score), 2) AS 平均成绩<br>FROM score<br>       JOIN course ON score.c_id = course.c_id<br>GROUP BY c_id<br>ORDER BY <code>平均成绩</code> DESC, score.c_id ASC;</p>
<h1 id="查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩"><a href="#查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩" class="headerlink" title="查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩"></a>查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩</h1><p>SELECT s.s_id,s.s_name,round(avg(sc.s_score),2) AS avgScore<br>FROM student s INNER JOIN score sc ON s.s_id = sc.s_id<br>GROUP BY s.s_id HAVING avgScore &gt;= 85;</p>
<p>SELECT score.s_id, s_name, round(avg(s_score), 2)AS 平均成绩<br>FROM score<br>       JOIN student ON student.s_id = score.s_id<br>GROUP BY score.s_id<br>HAVING <code>平均成绩</code> &gt;= 85;</p>
<h1 id="查询课程名称为”数学”，且分数低于60的学生姓名和分数"><a href="#查询课程名称为”数学”，且分数低于60的学生姓名和分数" class="headerlink" title="查询课程名称为”数学”，且分数低于60的学生姓名和分数"></a>查询课程名称为”数学”，且分数低于60的学生姓名和分数</h1><p>SELECT s_name, s_score AS 数学成绩<br>FROM student<br>       JOIN (SELECT s_id, s_score<br>             FROM score,<br>                  course<br>             WHERE score.c_id = course.c_id<br>               AND c_name = ‘数学’)a ON a.s_score &lt; 60 AND student.s_id = a.s_id;</p>
<h1 id="查询所有学生的课程及分数情况"><a href="#查询所有学生的课程及分数情况" class="headerlink" title="查询所有学生的课程及分数情况"></a>查询所有学生的课程及分数情况</h1><ul>
<li>相当于行列转换的用法了，由于需要就算总分，必须要要使用聚合<br>SELECT a.s_name,<pre><code>SUM(CASE c.c_name WHEN &apos;语文&apos; THEN b.s_score ELSE 0 END) AS 语文,
SUM(CASE c.c_name WHEN &apos;数学&apos; THEN b.s_score ELSE 0 END) AS 数学,
SUM(CASE c.c_name WHEN &apos;英语&apos; THEN b.s_score ELSE 0 END) AS 英语,
SUM(b.s_score)                                         AS 总分
</code></pre>FROM student a<pre><code>JOIN score b ON a.s_id = b.s_id
JOIN course c ON b.c_id = c.c_id
</code></pre>GROUP BY s_name, a.s_id;</li>
</ul>
<h1 id="查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数"><a href="#查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数" class="headerlink" title="查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数"></a>查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数</h1><p>SELECT s.s_id,s.s_name,sc.s_score FROM student s INNER JOIN score sc ON s.s_id = sc.s_id<br>WHERE sc.s_id not IN<br>      (SELECT s_id FROM score WHERE s_score &lt; 70 GROUP BY s_id);</p>
<ul>
<li>又是一个错误的写法<br>SELECT s_name, c_name, s_score<br>FROM score<pre><code>JOIN student ON student.s_id = score.s_id
JOIN course ON score.c_id = course.c_id
</code></pre>WHERE s_score &lt; 70;</li>
</ul>
<h1 id="查询不及格的课程"><a href="#查询不及格的课程" class="headerlink" title="查询不及格的课程"></a>查询不及格的课程</h1><p>SELECT s_name, c_name AS 不及格课程, tmp.s_score<br>FROM student<br>       JOIN (SELECT s_id, s_score, c_name<br>             FROM score,<br>                  course<br>             WHERE score.c_id = course.c_id<br>               AND s_score &lt; 60)tmp ON student.s_id = tmp.s_id;</p>
<h1 id="查询课程编号为01且课程成绩在80分以上的学生的学号和姓名"><a href="#查询课程编号为01且课程成绩在80分以上的学生的学号和姓名" class="headerlink" title="查询课程编号为01且课程成绩在80分以上的学生的学号和姓名"></a>查询课程编号为01且课程成绩在80分以上的学生的学号和姓名</h1><p>SELECT student.s_id, s_name, s_score AS score_01<br>FROM student<br>       JOIN score ON student.s_id = score.s_id<br>WHERE c_id = ‘01’<br>  AND s_score &gt;= 80;</p>
<h1 id="求每门课程的学生人数"><a href="#求每门课程的学生人数" class="headerlink" title="求每门课程的学生人数"></a>求每门课程的学生人数</h1><p>SELECT course.c_id, course.c_name, count(1)AS 选课人数<br>FROM course<br>       JOIN score ON course.c_id = score.c_id<br>GROUP BY score.c_id;</p>
<h1 id="查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩"><a href="#查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩" class="headerlink" title="查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩"></a>查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩</h1><p>– 查询老师id</p>
<ul>
<li>此种查法会丢失调同样都是最高分的学生<br>SELECT s.*,c.c_name,sc.s_score<br>FROM student s INNER JOIN score sc ON s.s_id = sc.s_id<pre><code>INNER join course c  ON sc.c_id = c.c_id
INNER JOIN teacher t ON c.t_id = t.t_id
</code></pre>WHERE t.t_name= ‘张三’ ORDER BY sc.s_score DESC LIMIT 1;</li>
</ul>
<p>select s.*,sc.s_score FROM student s inner join score sc ON s.s_id = sc.s_id<br>where sc.s_score = (<br>                   SELECT max(sc.s_score)<br>                   FROM  score sc INNER join course c  ON sc.c_id = c.c_id<br>                                  INNER JOIN teacher t ON c.t_id = t.t_id<br>                   WHERE t.t_name= ‘张三’<br>                   );</p>
<p>– 查询最高分（可能有相同分数）</p>
<p>SELECT  max(s_score)<br>FROM score<br>       JOIN (SELECT course.c_id, c_name<br>             FROM course,<br>                  (SELECT t_id, t_name FROM teacher WHERE t_name = ‘张三’)tmp<br>             WHERE course.t_id = tmp.t_id)tmp2 ON score.c_id = tmp2.c_id;</p>
<h1 id="查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"><a href="#查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩" class="headerlink" title="查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩"></a>查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</h1><p>SELECT DISTINCT a.s_id, a.c_id, a.s_score<br>FROM score a,<br>     score b<br>WHERE a.c_id &lt;&gt; b.c_id<br>  AND a.s_score = b.s_score;</p>
<h1 id="查询每门课程成绩最好的前两名"><a href="#查询每门课程成绩最好的前两名" class="headerlink" title="查询每门课程成绩最好的前两名"></a>查询每门课程成绩最好的前两名</h1><p>–方法1(该方法有bug, 不能查出临界的重复值, 例如查各科的第一名或前三名)</p>
<ul>
<li>这里如果第一名的话，显然就有问题了<br>SELECT a.s_id, a.c_id, a.s_score<br>FROM score a<br>WHERE (SELECT count(1)<pre><code>FROM score b
WHERE a.c_id = b.c_id
  AND b.s_score &gt;= a.s_score) &lt;= 2
</code></pre>ORDER BY a.c_id ASC, a.s_score DESC;</li>
</ul>
<p>–方法2(查前三名)</p>
<ul>
<li>达成这种效果的话，其实find_in_set的方式更加合理和擅长<br>(SELECT <em> FROM score WHERE c_id = ‘01’ ORDER BY s_score DESC LIMIT 3)<br>UNION (<br>SELECT </em> FROM score WHERE c_id = ‘02’ ORDER BY s_score DESC LIMIT 3)<br>UNION (<br>SELECT * FROM score WHERE c_id = ‘03’ ORDER BY s_score DESC LIMIT 3);</li>
</ul>
<p>-方法三</p>
<ul>
<li>仍然是使用find_in_set的方式，比起其他的真是好用很多了<br>SELECT sc.* FROM score sc INNER JOIN<br>(SELECT c_id,group_concat(s_id ORDER by s_score DESC) sids<br>FROM score GROUP BY c_id) tmp ON sc.c_id = tmp.c_id WHERE<br>find_in_set(sc.s_id,tmp.sids) BETWEEN 1 AND 2 ORDER BY sc.c_id,s_score DESC ;<h1 id="统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列"><a href="#统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列" class="headerlink" title="统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列"></a>统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</h1></li>
</ul>
<p>SELECT DISTINCT course.c_id, tmp.选修人数<br>FROM course<br>       JOIN (SELECT c_id, count(1) AS 选修人数 FROM score GROUP BY c_id)tmp<br>WHERE tmp.选修人数 &gt;= 5<br>ORDER BY tmp.选修人数 DESC, course.c_id ASC;</p>
<h1 id="检索至少选修两门课程的学生学号"><a href="#检索至少选修两门课程的学生学号" class="headerlink" title="检索至少选修两门课程的学生学号"></a>检索至少选修两门课程的学生学号</h1><p>SELECT s_id, count(c_id) AS totalCourse<br>FROM score<br>GROUP BY s_id<br>HAVING count(c_id) &gt;= 2;</p>
<h1 id="查询选修了全部课程的学生信息"><a href="#查询选修了全部课程的学生信息" class="headerlink" title="查询选修了全部课程的学生信息"></a>查询选修了全部课程的学生信息</h1><p>SELECT student.*<br>FROM student,<br>     (SELECT s_id, count(c_id) AS totalCourse FROM score GROUP BY s_id)tmp<br>WHERE student.s_id = tmp.s_id<br>  AND totalCourse = 3;</p>
<h1 id="查询各学生的年龄"><a href="#查询各学生的年龄" class="headerlink" title="查询各学生的年龄"></a>查询各学生的年龄</h1><p>– 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</p>
<ul>
<li><p>date_format之后的可以直接进行加减运算，这个就算是记下了<br>SELECT s_name, s_birth, (DATE_FORMAT(NOW(), ‘%Y’) - DATE_FORMAT(s_birth, ‘%Y’) -</p>
<pre><code>CASE
  WHEN (DATE_FORMAT(NOW(), &apos;%m%d&apos;) &gt; DATE_FORMAT(s_birth, &apos;%m%d&apos;)) THEN 1
  ELSE 0 END) AS age
</code></pre><p>FROM student;</p>
<h1 id="查询本周过生日的学生"><a href="#查询本周过生日的学生" class="headerlink" title="查询本周过生日的学生"></a>查询本周过生日的学生</h1><p>–方法1<br>SELECT *,week(s_birth) FROM student<br>WHERE week(now()) = week(concat(date_format(now(),’%Y’),date_format(s_birth,’%m%d’)));</p>
</li>
<li><p>以下全错啊！！<br>SELECT *<br>FROM student<br>WHERE WEEK(DATE_FORMAT(NOW(), ‘%Y%m%d’)) = WEEK(s_birth);</p>
</li>
</ul>
<h1 id="查询本月过生日的学生"><a href="#查询本月过生日的学生" class="headerlink" title="查询本月过生日的学生"></a>查询本月过生日的学生</h1><p>–方法1</p>
<p>SELECT *,month(s_birth)<br>FROM student<br>WHERE MONTH(DATE_FORMAT(NOW(), ‘%Y%m%d’)) = MONTH(s_birth);<br>–方法2</p>
<ul>
<li>这种方法很不正规<br>SELECT s_name, s_sex, s_birth<br>FROM student<br>WHERE substring(s_birth, 6, 2) = ‘03’;</li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
</search>
